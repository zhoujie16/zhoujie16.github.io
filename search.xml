<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git cherry-pick 教程</title>
      <link href="2021/02/09/git%E6%8A%80%E5%B7%A7/git%20cherry-pick%20%E6%95%99%E7%A8%8B/"/>
      <url>2021/02/09/git%E6%8A%80%E5%B7%A7/git%20cherry-pick%20%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git-cherry-pick-教程"><a href="#git-cherry-pick-教程" class="headerlink" title="git cherry-pick 教程"></a>git cherry-pick 教程</h1><p>git cherry-pick 命令的作用，就是将指定的提交（commit）应用于其他分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commitHash&gt;</span><br></pre></td></tr></table></figure><p>Cherry pick 支持一次转移多个提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</span><br></pre></td></tr></table></figure><p>如果想要转移一系列的连续提交，可以使用下面的简便语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick A..B</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>a</title>
      <link href="2021/02/09/a/"/>
      <url>2021/02/09/a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一键优化Windows Server为家用系统</title>
      <link href="2021/02/08/Win%E8%BD%AF%E4%BB%B6/%E4%B8%80%E9%94%AE%E4%BC%98%E5%8C%96WindowsServer%E4%B8%BA%E5%AE%B6%E7%94%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/02/08/Win%E8%BD%AF%E4%BB%B6/%E4%B8%80%E9%94%AE%E4%BC%98%E5%8C%96WindowsServer%E4%B8%BA%E5%AE%B6%E7%94%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>可用于 Windows Server 2016 和 2019 系统</p><p><a href="https://github.com/m2nlight/WindowsServerToWindowsDesktop">https://github.com/m2nlight/WindowsServerToWindowsDesktop</a></p><p>右键点击 bat 批处理文件，选择以管理员权限运行，完成之后有可能要求重启电脑。</p><p>完成之后，右键点击第一个 PowerShell 文件，选第二个用 PowerShell 窗口运行，在弹出的窗口里面输入 A 回车来执行</p>]]></content>
      
      
      <categories>
          
          <category> win软件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>离线KMS激活工具 HEU KMS Activator</title>
      <link href="2021/02/08/Win%E8%BD%AF%E4%BB%B6/%E7%A6%BB%E7%BA%BFKMS%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7%20HEU%20KMS%20Activator/"/>
      <url>2021/02/08/Win%E8%BD%AF%E4%BB%B6/%E7%A6%BB%E7%BA%BFKMS%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7%20HEU%20KMS%20Activator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">链接: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1XaaEFAQ9iSnyXEuK-ZYsQw </span><br><span class="line">提取码: 17nh 复制这段内容后打开百度网盘手机App，操作更方便哦 </span><br><span class="line">--来自百度网盘超级会员v4的分享</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> win软件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS中不常用但强大的操作符</title>
      <link href="2021/02/08/%E5%89%8D%E7%AB%AF/JS%E4%B8%AD%E4%B8%8D%E5%B8%B8%E7%94%A8%E4%BD%86%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>2021/02/08/%E5%89%8D%E7%AB%AF/JS%E4%B8%AD%E4%B8%8D%E5%B8%B8%E7%94%A8%E4%BD%86%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JS 里的操作符大家每天都在使用，还有一些 ES2020、ES2021 新加的实用操作符，这些共同构成了 JS 灵活的语法生态。本文除介绍常用的操作符之外，还会介绍 JS 里一些不常用但是很强大的操作符，下面我们一起来看看吧～</p><h2 id="1-数值分割符"><a href="#1-数值分割符" class="headerlink" title="1. 数值分割符 _"></a>1. 数值分割符 _</h2><p>ES2021 引入了数值分割符 <code>_</code>，在数值组之间提供分隔，使一个长数值读起来更容易。Chrome 已经提供了对数值分割符的支持，可以在浏览器里试起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">100_0000_0000_0000</span> <span class="comment">// 0太多了不用数值分割符眼睛看花了</span></span><br><span class="line"><span class="built_in">console</span>.log(number)             <span class="comment">// 输出 100000000000000</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>此外，十进制的小数部分也可以使用数值分割符，二进制、十六进制里也可以使用数值分割符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x11_1</span> === <span class="number">0x111</span>   <span class="comment">// true 十六进制</span></span><br><span class="line"><span class="number">0.11_1</span> === <span class="number">0.111</span>   <span class="comment">// true 十进制的小数</span></span><br><span class="line"><span class="number">0b11_1</span> === <span class="number">0b111</span>   <span class="comment">// true 二进制</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="2-逗号运算符"><a href="#2-逗号运算符" class="headerlink" title="2. 逗号运算符 ,"></a>2. 逗号运算符 ,</h2><p>什么，逗号也可以是运算符吗？是的，曾经看到这样一个简单的函数，将数组的第一项和第二项调换，并返回两项之和：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [arr[<span class="number">0</span>], arr[<span class="number">1</span>]]=[arr[<span class="number">1</span>], arr[<span class="number">0</span>]], arr[<span class="number">0</span>] + arr[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">reverse(list)   <span class="comment">// 返回 3，此时 list 为[2, 1]</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>逗号操作符对它的每个操作数求值（从左到右），并返回<strong>最后</strong>一个操作数的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr1, expr2, expr3...</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>会返回最后一个表达式 <code>expr3</code> 的结果，其他的表达式只会进行求值。</p><h2 id="3-零合并操作符"><a href="#3-零合并操作符" class="headerlink" title="3. 零合并操作符 ??"></a>3. 零合并操作符 ??</h2><p>零合并操作符 <code>??</code> 是一个逻辑操作符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回右侧操作数，否则返回左侧操作数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr1 ?? expr2</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>空值合并操作符一般用来为常量提供默认值，保证常量不为 <code>null</code> 或者 <code>undefined</code>，以前一般使用 <code>||</code> 来做这件事 <code>variable = variable || &#39;bar&#39;</code>。然而，由于 <code>||</code> 是一个布尔逻辑运算符，左侧的操作数会被强制转换成布尔值用于求值。任何假值（<code>0</code>， <code>&#39;&#39;</code>， <code>NaN</code>， <code>null</code>， <code>undefined</code>）都不会被返回。这导致如果你使用 <code>0</code>、<code>&#39;&#39;</code>、<code>NaN</code> 作为有效值，就会出现不可预料的后果。</p><p>正因为 <code>||</code> 存在这样的问题，而 <code>??</code> 的出现就是解决了这些问题，<code>??</code> 只会在左侧为 <code>undefined</code>、<code>null</code> 时才返回后者，<code>??</code> 可以理解为是 <code>||</code> 的完善解决方案。</p><p>可以在浏览器中执行下面的代码感受一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> || <span class="string">&#x27;default&#x27;</span> <span class="comment">// &#x27;default&#x27;</span></span><br><span class="line"><span class="literal">null</span> || <span class="string">&#x27;default&#x27;</span>      <span class="comment">// &#x27;default&#x27;</span></span><br><span class="line"><span class="literal">false</span> || <span class="string">&#x27;default&#x27;</span>     <span class="comment">// &#x27;default&#x27;</span></span><br><span class="line"><span class="number">0</span> || <span class="string">&#x27;default&#x27;</span>         <span class="comment">// &#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> ?? <span class="string">&#x27;default&#x27;</span> <span class="comment">// &#x27;default&#x27;</span></span><br><span class="line"><span class="literal">null</span> ?? <span class="string">&#x27;default&#x27;</span>      <span class="comment">// &#x27;default&#x27;</span></span><br><span class="line"><span class="literal">false</span> ?? <span class="string">&#x27;default&#x27;</span>     <span class="comment">// &#x27;false&#x27;</span></span><br><span class="line"><span class="number">0</span> ?? <span class="string">&#x27;default&#x27;</span>         <span class="comment">// 0</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>另外在赋值的时候，可以运用赋值运算符的简写 <code>??=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">b</span>: <span class="literal">null</span>, <span class="attr">c</span>: <span class="number">10</span>&#125;</span><br><span class="line">a.b ??= <span class="number">20</span></span><br><span class="line">a.c ??= <span class="number">20</span></span><br><span class="line"><span class="built_in">console</span>.log(a)     <span class="comment">// 输出 &#123; b: 20, c: 10 &#125;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="4-可选链操作符"><a href="#4-可选链操作符" class="headerlink" title="4. 可选链操作符 ?."></a>4. 可选链操作符 ?.</h2><p>可选链操作符 <code>?.</code> 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为 <code>null</code> 或者 <code>undefined</code> 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。</p><p>当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.b?.c)      <span class="comment">// 输出 bar</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.d?.c)      <span class="comment">// 输出 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.func?.())  <span class="comment">// 不报错，输出 undefined</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>以前可能会通过 <code>obj &amp;&amp; obj.a &amp;&amp; obj.a.b</code> 来获取一个深度嵌套的子属性，现在可以直接 <code>obj?.a?.b</code> 即可。</p><p>可选链除了可以用在获取对象的属性，还可以用在数组的索引 <code>arr?.[index]</code>，也可以用在函数的判断 <code>func?.(args)</code>，当尝试调用一个可能不存在的方法时也可以使用可选链。</p><p>调用一个对象上可能不存在的方法时（版本原因或者当前用户的设备不支持该功能的场景下），使用可选链可以使得表达式在函数不存在时返回 <code>undefined</code> 而不是直接抛异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = someInterface.customFunc?.()</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="5-私有方法-属性"><a href="#5-私有方法-属性" class="headerlink" title="5. 私有方法/属性"></a>5. 私有方法/属性</h2><p>在一个类里面可以给属性前面增加 <code>#</code> 私有标记的方式来标记为私有，除了属性可以被标记为私有外，<code>getter/setter</code> 也可以标记为私有，方法也可以标为私有。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getDesc</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.#name +<span class="string">&#x27; &#x27;</span>+ <span class="built_in">this</span>.#getAge()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  #<span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.#age &#125; <span class="comment">// 私有方法</span></span><br><span class="line"></span><br><span class="line">  get #<span class="function"><span class="title">name</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span> &#125; <span class="comment">// 私有访问器</span></span><br><span class="line">  #age = <span class="number">23</span>                   <span class="comment">// 私有属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(a.age)       <span class="comment">// undefined 直接访问不到</span></span><br><span class="line"><span class="built_in">console</span>.log(a.getDesc()) <span class="comment">// foo 23</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="6-位运算符-gt-gt-与-gt-gt-gt"><a href="#6-位运算符-gt-gt-与-gt-gt-gt" class="headerlink" title="6. 位运算符 &gt;&gt; 与 &gt;&gt;&gt;"></a>6. 位运算符 &gt;&gt; 与 &gt;&gt;&gt;</h2><p>有符号右移操作符 <code>&gt;&gt;</code> 将第一个操作数向右移动指定的位数，多余的位移到右边被丢弃，高位补其符号位，正数补 0，负数则补 1。因为新的最左位与前一个最左位的值相同，所以符号位（最左位）不会改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0b111</span>&gt;&gt;<span class="number">1</span>).toString(<span class="number">2</span>)   <span class="comment">// &quot;11&quot;</span></span><br><span class="line">(-<span class="number">0b111</span>&gt;&gt;<span class="number">1</span>).toString(<span class="number">2</span>)  <span class="comment">// &quot;-100&quot; 感觉跟直觉不一样</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>正数的好理解，负数怎么理解呢，负数在计算机中存储是按照补码来存储的，补码的计算方式是取反加一，移位时将补码形式右移，最左边补符号位，移完之后再次取反加一求补码获得处理后的原码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">111</span>      <span class="comment">// 真值</span></span><br><span class="line"><span class="number">1</span> <span class="number">0000111</span> <span class="comment">// 原码（高位的0无所谓，后面加不到）</span></span><br><span class="line"><span class="number">1</span> <span class="number">1111001</span> <span class="comment">// 补码</span></span><br><span class="line"><span class="number">1</span> <span class="number">1111100</span> <span class="comment">// 算数右移</span></span><br><span class="line"><span class="number">1</span> <span class="number">0000100</span> <span class="comment">// 移位后求补码获得原码</span></span><br><span class="line">-<span class="number">100</span>      <span class="comment">// 移位后的真值</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>一般我们用 <code>&gt;&gt;</code> 来将一个数除 2，相当于先舍弃小数位然后进行一次 <code>Math.floor</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> &gt;&gt; <span class="number">1</span>    <span class="comment">// 5</span></span><br><span class="line"><span class="number">13</span> &gt;&gt; <span class="number">1</span>    <span class="comment">// 6 相当于</span></span><br><span class="line"><span class="number">13.9</span> &gt;&gt; <span class="number">1</span>  <span class="comment">// 6</span></span><br><span class="line">-<span class="number">13</span> &gt;&gt; <span class="number">1</span>   <span class="comment">// -7 相当于</span></span><br><span class="line">-<span class="number">13.9</span> &gt;&gt; <span class="number">1</span> <span class="comment">// -7 </span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>无符号右移操作符 <code>&gt;&gt;&gt;</code>，将符号位作为二进制数据的一部分向右移动，高位始终补 0，对于正整数和算数右移没有区别，对于负数来说由于符号位被补 0，成为正数后就不用再求补码了，所以结果总是非负的。即便右移 0 个比特，结果也是非负的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0b111</span>&gt;&gt;&gt;<span class="number">1</span>).toString(<span class="number">2</span>)   <span class="comment">// &quot;11&quot;</span></span><br><span class="line">(-<span class="number">0b111</span>&gt;&gt;&gt;<span class="number">1</span>).toString(<span class="number">2</span>)  <span class="comment">// &quot;1111111111111111111111111111100&quot;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>可以这样去理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">111</span>      <span class="comment">// 真值</span></span><br><span class="line"><span class="number">1</span> <span class="number">000000000000000000000000000111</span> <span class="comment">// 原码</span></span><br><span class="line"><span class="number">1</span> <span class="number">111111111111111111111111111001</span> <span class="comment">// 补码</span></span><br><span class="line"><span class="number">0</span> <span class="number">111111111111111111111111111100</span> <span class="comment">// 算数右移（由于右移后成为正数，就不要再求补码了）</span></span><br><span class="line"><span class="number">1073741820</span>      <span class="comment">// 移位后的真值</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>左移运算符 <code>&lt;&lt;</code> 与之类似，左移很简单左边移除最高位，低位补 0：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0b1111111111111111111111111111100</span>&lt;&lt;<span class="number">1</span>).toString(<span class="number">2</span>)   <span class="comment">// &quot;-1000&quot;</span></span><br><span class="line">(<span class="number">0b1111111111111111111111111111100</span>&lt;&lt;<span class="xml">&lt;1).toString(2)  // &quot;-1000&quot;</span></span><br><span class="line"><span class="xml">复制代码</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：JS 里面没有无符号左移，而且其他语言比如 JAVA 也没有无符号左移。</p></blockquote><h2 id="7-位运算符-amp-与"><a href="#7-位运算符-amp-与" class="headerlink" title="7. 位运算符 &amp; 与 |"></a>7. 位运算符 &amp; 与 |</h2><p>位运算符是按位进行运算，<code>&amp;</code> 与、<code>|</code> 或、<code>~</code> 非、<code>^</code> 按位异或：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;: <span class="number">1010</span>  |: <span class="number">1010</span>  ~: <span class="number">1010</span>  ^: <span class="number">1010</span></span><br><span class="line">   <span class="number">0110</span>     <span class="number">0110</span>              <span class="number">0110</span></span><br><span class="line">   ----     ----     ----     ----</span><br><span class="line">   <span class="number">0010</span>     <span class="number">1110</span>     <span class="number">0101</span>     <span class="number">1100</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>使用位运算符时会抛弃小数位，我们可以利用这个特性来给数字取整，比如给任意数字 <code>&amp;</code> 上二进制的 32 个 1，或者 <code>|</code> 上 0，显而易见后者简单些。</p><p>所以我们可以对一个数字 <code>| 0</code> 来取整，负数也同样适用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.3</span> | <span class="number">0</span>         <span class="comment">// 1</span></span><br><span class="line">-<span class="number">1.9</span> | <span class="number">0</span>        <span class="comment">// -1</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>判断奇偶数除了常见的取余 <code>% 2</code> 之外，也可以使用 <code>&amp; 1</code>，来判断二进制数的最低位是不是 1，这样除了最低位之外都被置 0，取余的结果只剩最低位，是不是很巧妙。负数也同样适用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">3</span></span><br><span class="line">!!(num &amp; <span class="number">1</span>)                    <span class="comment">// true</span></span><br><span class="line">!!(num % <span class="number">2</span>)                    <span class="comment">// true</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="8-双位运算符"><a href="#8-双位运算符" class="headerlink" title="8. 双位运算符 ~~"></a>8. 双位运算符 ~~</h2><p>可以使用双位操作符来替代正数的 <code>Math.floor( )</code>，替代负数的 <code>Math.ceil( )</code>。双否定位操作符的优势在于它执行相同的操作运行速度更快。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">4.9</span>) === <span class="number">4</span>      <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line">~~<span class="number">4.9</span> === <span class="number">4</span>      <span class="comment">// true</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>不过要注意，对正数来说 <code>~~</code> 运算结果与 <code>Math.floor( )</code> 运算结果相同，而对于负数来说与 <code>Math.ceil( )</code> 的运算结果相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~~<span class="number">4.5</span>                <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">4.5</span>)      <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">4.5</span>)       <span class="comment">// 5</span></span><br><span class="line"> </span><br><span class="line">~~-<span class="number">4.5</span>               <span class="comment">// -4</span></span><br><span class="line"><span class="built_in">Math</span>.floor(-<span class="number">4.5</span>)     <span class="comment">// -5</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(-<span class="number">4.5</span>)      <span class="comment">// -4</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>PS：注意 <code>~~(num/2)</code> 方式和 <code>num &gt;&gt; 1</code> 在值为负数时的差别</p></blockquote><h2 id="9-短路运算符-amp-amp-与"><a href="#9-短路运算符-amp-amp-与" class="headerlink" title="9. 短路运算符 &amp;&amp; 与 ||"></a>9. 短路运算符 &amp;&amp; 与 ||</h2><p>我们知道逻辑与 <code>&amp;&amp;</code> 与逻辑或 <code>||</code> 是短路运算符，短路运算符就是从左到右的运算中前者满足要求，就不再执行后者了。</p><p>可以理解为：</p><ul><li><code>&amp;&amp;</code> 为取假运算，从左到右依次判断，如果遇到一个假值，就返回假值，以后不再执行，否则返回最后一个真值</li><li><code>||</code> 为取真运算，从左到右依次判断，如果遇到一个真值，就返回真值，以后不再执行，否则返回最后一个假值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> param1 = expr1 &amp;&amp; expr2</span><br><span class="line"><span class="keyword">let</span> param2 = expr1 || expr2</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><table><thead><tr><th>运算符</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td><code>expr1&amp;&amp;expr2</code></td><td>如果 expr1 能转换成 false 则返回 expr1，否则返回 expr2。 因此，在 Boolean 环境中使用时, 两个操作结果都为 true 时返回 true，否则返回 false</td></tr><tr><td>||</td><td>expr1||expr2</td><td>如果 expr1 能转换成 true 则返回 expr1，否则返回 expr2。 因此,在 boolean 环境(在if的条件判断中)中使用时, 二者操作结果中只要有一个为 true,返回 true；二者操作结果都为 false 时返回 false</td></tr><tr><td><code>!</code></td><td><code>!expr</code></td><td>如果单个表达式能转换为 true  的话返回 false，否则返回 true</td></tr></tbody></table><p>因此可以用来做很多有意思的事，比如给变量赋初值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> variable1</span><br><span class="line"><span class="keyword">let</span> variable2 = variable1  || <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>如果 <code>variable1</code> 是真值就直接返回了，后面短路就不会被返回了，如果为假值，则会返回后面的<code>foo</code>。</p><p>也可以用来进行简单的判断，取代冗长的<code>if</code>语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> variable = param &amp;&amp; param.prop</span><br><span class="line"><span class="comment">// 有了可选链之后可以直接 param?.prop</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>如果 <code>param</code> 如果为真值则返回 <code>param.prop</code> 属性，否则返回 <code>param</code> 这个假值，这样在某些地方防止 <code>param</code> 为 <code>undefined</code> 的时候还取其属性造成报错。</p><h2 id="10-void-运算符"><a href="#10-void-运算符" class="headerlink" title="10. void 运算符"></a>10. void 运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void&#96; 运算符 对给定的表达式进行求值，然后返回 &#96;undefined</span><br></pre></td></tr></table></figure><p>可以用来给在使用立即调用的函数表达式（IIFE）时，可以利用 <code>void</code> 运算符让 JS 引擎把一个 <code>function</code> 关键字识别成函数表达式而不是函数声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iife</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>) &#125;()       <span class="comment">// 报错，因为JS引擎把IIFE识别为了函数声明</span></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span> <span class="title">iife</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>) &#125;()  <span class="comment">// 正常调用</span></span><br><span class="line">~<span class="function"><span class="keyword">function</span> <span class="title">iife</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>) &#125;()      <span class="comment">// 也可以使用一个位操作符</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">iife</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>) &#125;)()     <span class="comment">// 或者干脆用括号括起来表示为整体的表达式</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>还可以用在箭头函数中避免传值泄漏，箭头函数，允许在函数体不使用括号来直接返回值。这个特性给用户带来了很多便利，但有时候也带来了不必要的麻烦，如果右侧调用了一个原本没有返回值的函数，其返回值改变后，会导致非预期的副作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function">() =&gt;</span> <span class="keyword">void</span> customMethod()   <span class="comment">// 特别是给一个事件或者回调函数传一个函数时</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>安全起见，当不希望函数返回值是除了空值以外其他值，应该使用 <code>void</code> 来确保返回 <code>undefined</code>，这样，当 customMethod 返回值发生改变时，也不会影响箭头函数的行为。</p><h2 id="11-其他常用操作符"><a href="#11-其他常用操作符" class="headerlink" title="11. 其他常用操作符"></a>11. 其他常用操作符</h2><ol><li><strong>三元表达式</strong>：很简单了，大家经常用，<code>expr ? expr1 : expr2</code> 如果 <code>expr</code> 为真值则返回 <code>expr1</code>，否则返回 <code>expr2</code></li><li><strong>赋值运算符简写</strong>：加法赋值 <code>+=</code>、减法赋值 <code>-=</code>、乘法赋值 <code>*=</code>、除法赋值 <code>/=</code>、求幂赋值 <code>**=</code>、按位或复制 <code>|=</code>、按位与赋值 <code>&amp;=</code>、有符号按位右移赋值 <code>&gt;&gt;=</code>、无符号按位右移赋值 <code>&gt;&gt;&gt;=</code>、逻辑空赋值 <code>??=</code> ….</li><li><strong>求幂运算符</strong>：<code>var1 ** var2</code> 相当于 <code>Math.pow</code>，结果为 <code>var1</code> 的 <code>var2</code> 次方</li></ol><h2 id="12-操作符优先级"><a href="#12-操作符优先级" class="headerlink" title="12. 操作符优先级"></a>12. 操作符优先级</h2><p>正因为有操作符优先级，所以 <code>variable = 1, 2</code> 的含义是将变量先赋值为 1，再返回数字 2，而不是变量赋值给 <code>1, 2</code> 的返回值 2，这是因为 <code>=</code> 运算符的优先级高于 <code>,</code> 逗号运算符。再比如表达式 <code>6 - 2 * 3 === 0 &amp;&amp; 1</code>，<code>- *  === &amp;&amp;</code> 这四个运算符优先级最高的 <code>*</code> 先运算，然后 <code>-</code> 运算符结果为 0，<code>===</code> 运算符优先级高于 <code>&amp;&amp;</code> 而 <code>true &amp;&amp; 1</code> 的结果为 1，所以这就是运算的结果。</p><p>下面的表将运算符按照优先级的不同从高（20）到低（1）排列，但这个不是最新的，至少没包括可选链，建议参考<a href="https://github.com/SHERlocked93/blog/issues/1">这个表</a>或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">MDN</a>。</p><p><a href="https://github.com/SHERlocked93/blog/issues/1"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93f515a5d0a848d3a946c9023728531c~tplv-k3u1fbpfcp-zoom-1.image" alt="运算符优先级"></a></p><hr><p>网上的帖子大多深浅不一，甚至有些前后矛盾，在下的文章都是学习过程中的总结，如果发现错误，欢迎留言指出，如果本文帮助到了你，别忘了点赞支持一下哦，你的点赞是我更新的最大动力！（收藏不点赞，都是耍流氓 🤣）~</p><p>作者：SHERlocked93<br>链接：<a href="https://juejin.cn/post/6918902650964557838">https://juejin.cn/post/6918902650964557838</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>uni-app 入坑指南</title>
      <link href="2020/12/10/%E5%89%8D%E7%AB%AF/uni-app-guide/"/>
      <url>2020/12/10/%E5%89%8D%E7%AB%AF/uni-app-guide/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="演讲ppt下载地址"><a href="#演讲ppt下载地址" class="headerlink" title="演讲ppt下载地址"></a>演讲ppt下载地址</h4><p>链接: <a href="https://pan.baidu.com/s/1-Od8VvfnUG1reI4sMTz_2A">https://pan.baidu.com/s/1-Od8VvfnUG1reI4sMTz_2A</a> 提取码: 23qy<br>复制这段内容后打开百度网盘手机App，操作更方便哦<br>–来自百度网盘超级会员v4的分享</p><h3 id="什么是-uni-app"><a href="#什么是-uni-app" class="headerlink" title="什么是 uni-app"></a>什么是 uni-app</h3><p>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到 iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。<br>一套代码编到 10 个平台，这不是梦想。眼见为实，扫描 10 个二维码，亲自体验最全面的跨平台效果！<br><img src="http://imgurl.zhoujie16.cn/2020/12/12/550cfe4a6b0a9.png" alt="下载 _1_.png"></p><h3 id="使用-uni-app-的前置条件"><a href="#使用-uni-app-的前置条件" class="headerlink" title="使用 uni-app 的前置条件"></a>使用 uni-app 的前置条件</h3><p>如果你开发过小程序，恰好又会 vue， 那么你的学习成本会非常的低。</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>使用官方推出的 HBuilderX 编辑器，内置相关环境，开箱即用。</p><h3 id="App（ios、安卓）"><a href="#App（ios、安卓）" class="headerlink" title="App（ios、安卓）"></a>App（ios、安卓）</h3><p>uni-app 在 App 端不仅可以使用绝大多数的小程序相关的 API，同时也可以使用 5+API 很好的补足了小程序上一些还没有实现的功能。 <a href="http://www.html5plus.org/doc/h5p.html">相关阅读</a></p><h3 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h3><p>h5 基本上跟常规 vue 开发没有什么区别， 唯一需要注意的是，有些 API 是不能在 h5 中使用，注意文档中标注的平台差异说明。</p><h3 id="如何实现跨端"><a href="#如何实现跨端" class="headerlink" title="如何实现跨端"></a>如何实现跨端</h3><p>虽说是跨端，但是肯定是有情况是不支持的，比如遇到有些平台特有的 API 怎么办 ？<br>不用担心，这些问题 uni-app 都为你想到了，那就是使用条件编译。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>页面组件我们要遵循 Vue 单文件组件 (SFC) 规范</li><li>组件标签靠近微信小程序规范</li><li>接口能力（JS API）靠近微信小程序规范</li><li>数据绑定及事件处理靠近 Vue.js 规范，同时补充了 App 及页面的生命周期， <a href="https://uniapp.dcloud.io/use">相关阅读</a></li><li>为兼容多端运行，建议使用 flex 布局进行开发</li><li>非 H5 端，不能使用浏览器自带对象，比如 document、window、localstorage、cookie 等，更不能使用 jquery 等依赖这些浏览器对象的框架。因为各家小程序快应用都不支持这些对象。没有这些浏览器自带对象并不影响业务开发，uni 提供的 api 足够完成业务。</li><li>uni-app 的 tag 同小程序的 tag，和 HTML 的 tag 不一样，比如 div 要改成 view，span 要改成 text、a 要改成 navigator。</li></ul><h3 id="我认为的坑？"><a href="#我认为的坑？" class="headerlink" title="我认为的坑？"></a>我认为的坑？</h3><p>简单的说一下开发体验，我认为坑大概分三种。</p><ul><li>该框没有的功能，存在不能实现的东西。</li><li>明显的 bug，导致程序出现问题，影响开发进度和结果</li><li>在开发过程中，自己凭借直觉和经验在开发，结果和预期不同，阅读文档过后才发现和之前经验积累的写法不一样，会不由自主的说一句真坑，或者说在不同端有的不同写法，但自己没有做好兼容，就出现了不同端效果不一致，当再次阅读文档找到问题后也会来一句真坑。<br>总的来讲，uni-app 的开发之旅还是比较通畅的。</li></ul><h3 id="踩坑之旅"><a href="#踩坑之旅" class="headerlink" title="踩坑之旅"></a>踩坑之旅</h3><p>前言：下面列举下我遇见过的问题难点，和一些注意点，以及怎么去解决。具体 uni-app 怎么用，<a href="https://uniapp.dcloud.io/">建议阅读文档</a>，文档上写的更清楚。</p><h5 id="跨域的问题"><a href="#跨域的问题" class="headerlink" title="跨域的问题"></a>跨域的问题</h5><p>在开发 H5 平台时，需要使用浏览器进行调试，而浏览器会有跨域的问题。小程序和 App 不会存在跨域问题。<br>H5 跨域解决方案：和 webpack 配置类似，配置 proxy 代理，<br>根据官方文档的描述，devServer 配置被要求在 manifest.json 去配置，并且由于这个配置文件是 json 格式的，所以只能对简单类型进行配置。但对于 proxy 这项配置来说也是足够了的。直接如下方式配置即可解决:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// manifest.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;h5&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;devServer&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;proxy&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;/prefix/api/user/list&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://api-remote.xxxx.com&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;pathRewrite&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;^/prefix&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="反向代理出现-Invalid-Host-header-问题"><a href="#反向代理出现-Invalid-Host-header-问题" class="headerlink" title="反向代理出现 Invalid Host header 问题"></a>反向代理出现 Invalid Host header 问题</h5><p>点开 manifest.json 文件，在 h5 中 devServer 选项中设置”disableHostCheck”: true。</p><h5 id="像素单位"><a href="#像素单位" class="headerlink" title="像素单位"></a>像素单位</h5><p>使用 upx/rpx 而不是 px<br>1px = 2upx 是不准确的，upx 和 rpx 是响应式单位，以 750px 为基准宽度，根据设备屏幕宽度自动调整</p><h5 id="路由和传参"><a href="#路由和传参" class="headerlink" title="路由和传参"></a>路由和传参</h5><p>uni-app 的路由配置方式和小程序很像，如果你会小程序，配置起来更容易了。<br>uni-app 项目的路由还是 pages.json 中 pages 属性中配置，其实上面已经应用到了。。<br>在页面中没有专门的 $route 和 $router 对象 仅能在页面的生命周期里面接受路由传参，在 uni.navigateTo()中 url 参数为路径，其后可以带参数，用于页面传参，参数在新页面中 onLoad 钩子函数接收，没有 vue 中的 query 和 param</p><h5 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h5><p>如果你的项目仅是 h5,那可以放心大胆的使用 dom 操作，但如果要在小程序和 app 跑，就不要做 dom 操作了，不生效。<br>不过 ref 还是可以用的，一样可以获取到这个节点，该干啥干啥。<br>对原生的组件，例如 view、text 设置 ref，在小程序中为 undefined，h5、app 正常。封装的组件能正常使用。</p><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>具体的生命周期在文档 <a href="https://uniapp.dcloud.io/frame?id=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">详情见文档</a><br>大致上和 vue 的差不多，分成页面生命周期和应用生命周期，页面生命周期就是针对单页面的，应用生命周期就是针对整个小程序/app 的。<br>比如在组件中，没有页面生命周期，对，你没看错！比如页面 a 引用了组件 b 在组件 b 中，onLoad，onShow，onReady 全部失效，不过用 mounted 是生效的。<br>在上面说了 ref，如果要在初始化使用 ref 要注意生命周期，页面生命周期中，onload 不能直接访问 dom，onready 可以。</p><h5 id="动态的-class-style"><a href="#动态的-class-style" class="headerlink" title="动态的 class style"></a>动态的 class style</h5><p>非 H5 端不支持 <a href="https://cn.vuejs.org/v2/guide/class-and-style.html">Vue 官方文档：Class 与 Style 绑定</a> 中的 <code>classObject</code> 和 <code>styleObject</code> 语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; class 支持的语法:</span><br><span class="line">&lt;view :class&#x3D;&quot;&#123; active: isActive &#125;&quot;&gt;111&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view</span><br><span class="line">  class&#x3D;&quot;static&quot;</span><br><span class="line">  v-bind:class&#x3D;&quot;&#123; active: isActive, &#39;text-danger&#39;: hasError &#125;&quot;</span><br><span class="line">&gt;222&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;static&quot; :class&#x3D;&quot;[activeClass, errorClass]&quot;&gt;333&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view</span><br><span class="line">  class&#x3D;&quot;static&quot;</span><br><span class="line">  v-bind:class&#x3D;&quot;[isActive ? activeClass : &#39;&#39;, errorClass]&quot;</span><br><span class="line">&gt;444&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view</span><br><span class="line">  class&#x3D;&quot;static&quot;</span><br><span class="line">  v-bind:class&#x3D;&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span><br><span class="line">&gt;555&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;style 支持的语法:</span><br><span class="line">&lt;view</span><br><span class="line">  v-bind:style&#x3D;&quot;&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;&quot;</span><br><span class="line">&gt;666&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view</span><br><span class="line">  v-bind:style&#x3D;&quot;[&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;]&quot;</span><br><span class="line">&gt;777&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h5 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h5><p>uni-app 的事件处理几乎全部支持 Vue 的事件处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件映射表，左侧为 WEB 事件，右侧为 ``uni-app`` 对应事件</span></span><br><span class="line">&#123;</span><br><span class="line">    click: <span class="string">&#x27;tap&#x27;</span>,</span><br><span class="line">    touchstart: <span class="string">&#x27;touchstart&#x27;</span>,</span><br><span class="line">    touchmove: <span class="string">&#x27;touchmove&#x27;</span>,</span><br><span class="line">    touchcancel: <span class="string">&#x27;touchcancel&#x27;</span>,</span><br><span class="line">    touchend: <span class="string">&#x27;touchend&#x27;</span>,</span><br><span class="line">    tap: <span class="string">&#x27;tap&#x27;</span>,</span><br><span class="line">    longtap: <span class="string">&#x27;longtap&#x27;</span>, <span class="comment">//推荐使用longpress代替</span></span><br><span class="line">    input: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    change: <span class="string">&#x27;change&#x27;</span>,</span><br><span class="line">    submit: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">    blur: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">    focus: <span class="string">&#x27;focus&#x27;</span>,</span><br><span class="line">    reset: <span class="string">&#x27;reset&#x27;</span>,</span><br><span class="line">    confirm: <span class="string">&#x27;confirm&#x27;</span>,</span><br><span class="line">    columnchange: <span class="string">&#x27;columnchange&#x27;</span>,</span><br><span class="line">    linechange: <span class="string">&#x27;linechange&#x27;</span>,</span><br><span class="line">    error: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    scrolltoupper: <span class="string">&#x27;scrolltoupper&#x27;</span>,</span><br><span class="line">    scrolltolower: <span class="string">&#x27;scrolltolower&#x27;</span>,</span><br><span class="line">    scroll: <span class="string">&#x27;scroll&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TIPS：</p><p>为兼容各端，事件需使用 v-on 或 @ 的方式绑定，请勿使用小程序端的 bind 和 catch 进行事件绑定。</p><p>事件修饰符<br>.stop：各平台均支持， 使用时会阻止事件冒泡，在非 H5 端同时也会阻止事件的默认行为<br>.prevent 仅在 H5 平台支持<br>.self：仅在 H5 平台支持<br>.once：仅在 H5 平台支持<br>.capture：仅在 H5 平台支持<br>.passive：仅在 H5 平台支持</p><p>若需要禁止蒙版下的页面滚动，可使用 @touchmove.stop.prevent=”moveHandle”，moveHandle 可以用来处理 touchmove 的事件，也可以是一个空函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;mask&quot; @touchmove.stop.prevent&#x3D;&quot;moveHandle&quot;&gt;</span><br></pre></td></tr></table></figure><p>按键修饰符：uni-app 运行在手机端，没有键盘事件，所以不支持按键修饰符。</p><h5 id="标题栏或导航栏重叠"><a href="#标题栏或导航栏重叠" class="headerlink" title="标题栏或导航栏重叠"></a>标题栏或导航栏重叠</h5><p>使用 position:fixed;且 bottom:0;或 top:0;时，h5 端表现为 fixed 元素与标题栏或导航栏重叠。原因为在 h5 端标题和导航都是一个组件，可用窗口大小包括二者。可使用 uni.getSystemInfo 获取系统信息，在 h5 和 app 中会有 windowTop 和 windowBottom 两个参数表示可用窗口顶部和底部位置。使用条件编译动态的设置 top 和 bottom 的值。</p><h5 id="静态资源路径"><a href="#静态资源路径" class="headerlink" title="静态资源路径"></a>静态资源路径</h5><p>css 如果使用本地图片路径和本地字体路径，需要使用<del>@开头的绝对路径</del>@/static/imgs/a.png。40k 以下的本地图片或字体会被转换成 base64，超过的需要使用网络资源。</p><h5 id="全局变量方法的实现"><a href="#全局变量方法的实现" class="headerlink" title="全局变量方法的实现"></a>全局变量方法的实现</h5><ul><li>挂载 Vue.prototype，将一些使用频率较高的常量或者方法，直接扩展到 Vue.prototype 上，每个 Vue 实例对象都会“继承”下来</li><li>globalData，在 App.vue 定义 globalData ，同时使用 API 读写这个值。</li><li>Vuex，Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式，它采用集中式存储管理应用的所有组件的状态。适用于集中管理项目的登录状态、用户信息、设备信息等。</li></ul><h5 id="关于元素尺寸的获取"><a href="#关于元素尺寸的获取" class="headerlink" title="关于元素尺寸的获取"></a>关于元素尺寸的获取</h5><p>因为 uni-app 跨平台时不支持引入 jQuery 等操作 DOM 的插件，H5 平台可以通过条件编译的方式引入使用。所以在 uni-app 中最好不要引入 jQuery，可以使用 uni.createSelectorQuery()创建一个 SelectorQuery 对象实例来获取 DOM 信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如要获取 &lt;view class=&quot;p-list&quot;&gt;&lt;/view&gt;的高度。</span></span><br><span class="line"><span class="keyword">const</span> _this = <span class="built_in">this</span>;</span><br><span class="line">uni</span><br><span class="line">  .createSelectorQuery()</span><br><span class="line">  .select(<span class="string">&quot;.p-list&quot;</span>)</span><br><span class="line">  .boundingClientRect(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    _this.height = data.height;</span><br><span class="line">  &#125;)</span><br><span class="line">  .exec();</span><br></pre></td></tr></table></figure><h2 id="插件市场里面看过-or-用过比较好的组件"><a href="#插件市场里面看过-or-用过比较好的组件" class="headerlink" title="插件市场里面看过 or 用过比较好的组件"></a>插件市场里面看过 or 用过比较好的组件</h2><p><a href="https://ext.dcloud.net.cn/plugin?id=55">uni-ui 官方组件库</a></p><p><a href="https://ext.dcloud.net.cn/plugin?id=273">日期、时间、多级联动选择器组件</a></p><p><a href="http://www.mescroll.com/uni.html">下拉刷新和上拉加载的组件</a></p><p><a href="https://ext.dcloud.net.cn/plugin?id=2389">生成海报组件</a></p><p><a href="https://ext.dcloud.net.cn/plugin?id=1078">下拉式筛选菜单</a></p><p><a href="https://ext.dcloud.net.cn/plugin?id=39">二维码生成组件</a></p><p><a href="https://ext.dcloud.net.cn/plugin?id=271">uCharts 高性能跨全端图表</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端图片加水印</title>
      <link href="2020/05/22/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8A%A0%E6%B0%B4%E5%8D%B0/"/>
      <url>2020/05/22/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8A%A0%E6%B0%B4%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/dxcweb/watermark">react 前端图片加水印</a></p><p><a href="https://github.com/ZhuHuaijun/vue-watermark-directive">vue 组件添加水印指令</a></p><p><a href="https://github.com/gisonyeung/js-watermark">JavaScript 图片文字水印生成工具，生成 base64 编码图片</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次vue项目从webpack2升级到webpack4过程</title>
      <link href="2020/04/19/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E9%A1%B9%E7%9B%AE%E4%BB%8Ewebpack2%E5%8D%87%E7%BA%A7%E5%88%B0webpack4%E8%BF%87%E7%A8%8B/"/>
      <url>2020/04/19/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E9%A1%B9%E7%9B%AE%E4%BB%8Ewebpack2%E5%8D%87%E7%BA%A7%E5%88%B0webpack4%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>公司的一个老项目，2017年创建的，vue cli2创建，基于webpack2.3.3的项目，脚手架配置经过前人修改支持多页面。至今一直在维护。必须在node8环境下开发，版本高了会报错。</p><p>随着项目越来越大，开发过程一定会报node内存溢出，通过修改配置增大node内存解决。每修改一次文件，热更新都要等接近30s，才能看到效果。打包等待过程时分漫长。</p><p>于是就想着，能不能把这个项目迁移到用vue cli4创建的项目中，这样就可以支持webpack4，可以在node12环境下开发。</p><p>项目package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LINCOLN&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;dianka project for App&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;yonyou develop team&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;node --max_old_space_size=4096 build/dev-server.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node --max_old_space_size=4096  build/dev-server.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;node build/build.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;unit&quot;</span>: <span class="string">&quot;cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;e2e&quot;</span>: <span class="string">&quot;node test/e2e/runner.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;npm run unit &amp;&amp; npm run e2e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext .js,.vue src test/unit/specs test/e2e/specs&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;N3-components&quot;</span>: <span class="string">&quot;^2.4.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;axios&quot;</span>: <span class="string">&quot;^0.16.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;better-scroll&quot;</span>: <span class="string">&quot;^1.15.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span>: <span class="string">&quot;^3.3.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;crypto-js&quot;</span>: <span class="string">&quot;^3.1.9-1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;element-ui&quot;</span>: <span class="string">&quot;^2.4.11&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fastclick&quot;</span>: <span class="string">&quot;^1.0.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html2canvas&quot;</span>: <span class="string">&quot;^1.0.0-rc.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span>: <span class="string">&quot;^3.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;js-cookie&quot;</span>: <span class="string">&quot;^2.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;jssha&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;localforage&quot;</span>: <span class="string">&quot;^1.7.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mescroll.js&quot;</span>: <span class="string">&quot;^1.3.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mint-ui&quot;</span>: <span class="string">&quot;^2.2.13&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;plyr&quot;</span>: <span class="string">&quot;3.5.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prop-types&quot;</span>: <span class="string">&quot;^15.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;store&quot;</span>: <span class="string">&quot;^2.0.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;survey-vue&quot;</span>: <span class="string">&quot;^0.12.16&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;v-copy&quot;</span>: <span class="string">&quot;^0.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;video.js&quot;</span>: <span class="string">&quot;^7.6.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.2.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-awesome-swiper&quot;</span>: <span class="string">&quot;^3.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-baidu-map&quot;</span>: <span class="string">&quot;^0.10.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-pdf&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-pdf-shower&quot;</span>: <span class="string">&quot;^1.0.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;^2.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-scroller&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-touch&quot;</span>: <span class="string">&quot;^2.0.0-beta.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span>: <span class="string">&quot;^2.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vuex-i18n&quot;</span>: <span class="string">&quot;^1.3.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vux&quot;</span>: <span class="string">&quot;^2.9.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;autoprefixer&quot;</span>: <span class="string">&quot;^6.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.22.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-eslint&quot;</span>: <span class="string">&quot;^7.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^6.2.10&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-plugin-component&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-plugin-istanbul&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-plugin-transform-runtime&quot;</span>: <span class="string">&quot;^6.22.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-env&quot;</span>: <span class="string">&quot;^1.3.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-preset-stage-2&quot;</span>: <span class="string">&quot;^6.22.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-register&quot;</span>: <span class="string">&quot;^6.22.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chai&quot;</span>: <span class="string">&quot;^3.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chalk&quot;</span>: <span class="string">&quot;^1.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chromedriver&quot;</span>: <span class="string">&quot;^2.27.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;compression-webpack-plugin&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connect-history-api-fallback&quot;</span>: <span class="string">&quot;^1.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connect-timeout&quot;</span>: <span class="string">&quot;^1.9.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;copy-webpack-plugin&quot;</span>: <span class="string">&quot;^4.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cross-spawn&quot;</span>: <span class="string">&quot;^5.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^0.28.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^3.19.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-config-standard&quot;</span>: <span class="string">&quot;^6.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-friendly-formatter&quot;</span>: <span class="string">&quot;^2.0.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-loader&quot;</span>: <span class="string">&quot;^1.7.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-html&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-promise&quot;</span>: <span class="string">&quot;^3.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-standard&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eventsource-polyfill&quot;</span>: <span class="string">&quot;^0.9.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;expose-loader&quot;</span>: <span class="string">&quot;^0.7.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.14.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;extract-text-webpack-plugin&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;file-loader&quot;</span>: <span class="string">&quot;^0.11.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;friendly-errors-webpack-plugin&quot;</span>: <span class="string">&quot;^1.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html-webpack-externals-plugin&quot;</span>: <span class="string">&quot;^3.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^2.28.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;http-proxy-middleware&quot;</span>: <span class="string">&quot;^0.17.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;inject-loader&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma&quot;</span>: <span class="string">&quot;^1.4.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-coverage&quot;</span>: <span class="string">&quot;^1.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-mocha&quot;</span>: <span class="string">&quot;^1.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-phantomjs-launcher&quot;</span>: <span class="string">&quot;^1.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-phantomjs-shim&quot;</span>: <span class="string">&quot;^1.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-sinon-chai&quot;</span>: <span class="string">&quot;^1.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-sourcemap-loader&quot;</span>: <span class="string">&quot;^0.3.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-spec-reporter&quot;</span>: <span class="string">&quot;0.0.30&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;karma-webpack&quot;</span>: <span class="string">&quot;^2.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^2.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^4.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lolex&quot;</span>: <span class="string">&quot;^1.5.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moment&quot;</span>: <span class="string">&quot;^2.24.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;nightwatch&quot;</span>: <span class="string">&quot;^0.9.12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;node-sass&quot;</span>: <span class="string">&quot;^4.5.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;opn&quot;</span>: <span class="string">&quot;^4.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;optimize-css-assets-webpack-plugin&quot;</span>: <span class="string">&quot;^1.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ora&quot;</span>: <span class="string">&quot;^1.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;phantomjs-prebuilt&quot;</span>: <span class="string">&quot;^2.1.14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^2.0.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;^1.19.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rimraf&quot;</span>: <span class="string">&quot;^2.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass&quot;</span>: <span class="string">&quot;^0.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span>: <span class="string">&quot;^6.0.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scss&quot;</span>: <span class="string">&quot;^0.2.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scss-loader&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;selenium-server&quot;</span>: <span class="string">&quot;^3.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;semver&quot;</span>: <span class="string">&quot;^5.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;shelljs&quot;</span>: <span class="string">&quot;^0.7.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sinon&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sinon-chai&quot;</span>: <span class="string">&quot;^2.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^0.18.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;stylus-loader&quot;</span>: <span class="string">&quot;^3.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;^0.11.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url-loader&quot;</span>: <span class="string">&quot;^0.5.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-lazyload&quot;</span>: <span class="string">&quot;^1.2.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-loader&quot;</span>: <span class="string">&quot;^11.3.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-style-loader&quot;</span>: <span class="string">&quot;^2.0.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.2.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vux-loader&quot;</span>: <span class="string">&quot;^1.0.61&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^2.3.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-bundle-analyzer&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-middleware&quot;</span>: <span class="string">&quot;^1.10.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-hot-middleware&quot;</span>: <span class="string">&quot;^2.18.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-merge&quot;</span>: <span class="string">&quot;^4.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;yaml-loader&quot;</span>: <span class="string">&quot;^0.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;engines&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;node&quot;</span>: <span class="string">&quot;&gt;= 4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;npm&quot;</span>: <span class="string">&quot;&gt;= 3.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;not ie &lt;= 8&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;.eslintrc.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是我的升级过程</p><p>Vue cli4 创建项目，将项目原来的依赖重新安装一遍，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lincoln-v2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;N3-components&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;axios&quot;</span>: <span class="string">&quot;^0.19.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;better-scroll&quot;</span>: <span class="string">&quot;^1.15.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span>: <span class="string">&quot;^3.6.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;crypto-js&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;element-ui&quot;</span>: <span class="string">&quot;^2.13.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html2canvas&quot;</span>: <span class="string">&quot;^1.0.0-rc.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span>: <span class="string">&quot;^3.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;js-cookie&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;localforage&quot;</span>: <span class="string">&quot;^1.7.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mescroll.js&quot;</span>: <span class="string">&quot;^1.4.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mint-ui&quot;</span>: <span class="string">&quot;^2.2.13&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moment&quot;</span>: <span class="string">&quot;^2.24.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;plyr&quot;</span>: <span class="string">&quot;^3.5.10&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prop-types&quot;</span>: <span class="string">&quot;^15.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;store&quot;</span>: <span class="string">&quot;^2.0.12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;video.js&quot;</span>: <span class="string">&quot;^7.7.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-awesome-swiper&quot;</span>: <span class="string">&quot;^3.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;^3.1.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-touch&quot;</span>: <span class="string">&quot;^1.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span>: <span class="string">&quot;^3.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vux&quot;</span>: <span class="string">&quot;^2.9.4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="string">&quot;~4.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-router&quot;</span>: <span class="string">&quot;~4.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span>: <span class="string">&quot;~4.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span>: <span class="string">&quot;~4.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^3.11.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass&quot;</span>: <span class="string">&quot;^1.26.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span>: <span class="string">&quot;^8.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把原来的src目录移到新项目中，配置 vue.config.js 让支持多页面和其他webpack配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.jsvue</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  assetsDir: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">  pages: &#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">      <span class="comment">// page 的入口</span></span><br><span class="line">      entry: <span class="string">&quot;src/modules/test/test.js&quot;</span>,</span><br><span class="line">      <span class="comment">// 模板来源</span></span><br><span class="line">      template: <span class="string">&quot;src/modules/test/test.html&quot;</span>,</span><br><span class="line">      <span class="comment">// 在 dist/index.html 的输出</span></span><br><span class="line">      filename: <span class="string">&quot;modules/test.html&quot;</span></span><br><span class="line">      <span class="comment">// 当使用 title 选项时，</span></span><br><span class="line">      <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">      <span class="comment">// title: &quot;Index Page&quot;,</span></span><br><span class="line">      <span class="comment">// 在这个页面中包含的块，默认情况下会包含</span></span><br><span class="line">      <span class="comment">// 提取出来的通用 chunk 和 vendor chunk。</span></span><br><span class="line">      <span class="comment">// chunks: [&quot;chunk-vendors&quot;, &quot;chunk-common&quot;, &quot;index&quot;]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    apply: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/apply/apply.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/apply/apply.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/apply.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;auth-page&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/auth-page/auth-page.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/auth-page/auth-page.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/auth-page.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;car-book&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/car-book/carBook.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/car-book/carBook.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/carBook.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;care-about&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/care-about/care-about.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/care-about/care-about.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/care-about.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;configure-share-save&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/configure-share-save/configureShareSave.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/configure-share-save/configureShareSave.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/configureShareSave.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;driver-register&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/driver-register/register.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/driver-register/register.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/register.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;fetch-and-deliver&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/fetch-and-deliver/fetchAndDeliver.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/fetch-and-deliver/fetchAndDeliver.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/fetchAndDeliver.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    finance: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/finance/finance.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/finance/finance.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/finance.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;from-heart&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/from-heart/fromHeart.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/from-heart/fromHeart.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/fromHeart.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;lincoln-moments&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/lincoln-moments/moments.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/lincoln-moments/moments.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/moments.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;map-select-address&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/map-select-address/mapSelectAddress.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/map-select-address/mapSelectAddress.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/mapSelectAddress.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;motor-show&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/motor-show/motorShow.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/motor-show/motorShow.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/motorShow.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;my-reservation&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/my-reservation/myreservation.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/my-reservation/myreservation.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/myreservation.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    myorder: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/myorder/myorder.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/myorder/myorder.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/myorder.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;reservation-service&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/reservation-service/reservationService.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/reservation-service/reservationService.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/reservationService.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sales-director&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/sales-director/director.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/sales-director/director.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/director.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;send-vehicle-notice&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/send-vehicle-notice/SendVehicleNotice.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/send-vehicle-notice/SendVehicleNotice.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/SendVehicleNotice.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    trydrivercar: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/trydrivercar/trydrivercar.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/trydrivercar/trydrivercar.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/trydrivercar.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;wholesale-table&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/wholesale-table/wholesaleTable.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/wholesale-table/wholesaleTable.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/wholesaleTable.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;your-efriend&quot;</span>: &#123;</span><br><span class="line">      entry: <span class="string">&quot;src/modules/your-efriend/yourEfriend.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;src/modules/your-efriend/yourEfriend.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;modules/yourEfriend.html&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当使用只有入口的字符串格式时，</span></span><br><span class="line">    <span class="comment">// 模板会被推导为 `public/subpage.html`</span></span><br><span class="line">    <span class="comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span></span><br><span class="line">    <span class="comment">// 输出文件名会被推导为 `subpage.html`。</span></span><br><span class="line">    <span class="comment">// subpage: &#x27;src/subpage/main.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">8000</span>,</span><br><span class="line">    <span class="comment">// autoOpenBrowser: false,</span></span><br><span class="line">    <span class="comment">// assetsSubDirectory: &quot;static&quot;,</span></span><br><span class="line">    <span class="comment">// assetsPublicPath: &quot;/&quot;,</span></span><br><span class="line">    <span class="comment">// cssSourceMap: false,</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/weixin&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;https://api.weixin.qq.com&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;/weixin&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/qy&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;https://lincoln-mp-test.yonyouauto.com&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;/qy&quot;</span>: <span class="string">&quot;/qy&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/wx&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;https://lincoln-mp-test.yonyouauto.com&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">&quot;/wx&quot;</span>: <span class="string">&quot;/wx&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  runtimeCompiler: <span class="literal">true</span>,</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;configureWebpack config&quot;, config);</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// require(&quot;vux-loader&quot;).merge(config, &#123;</span></span><br><span class="line">    <span class="comment">//   options: &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//   plugins: [&quot;vux-ui&quot;]</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行项目，报错</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587279738272.png"></p><p>原因是 vue有两种形式的代码 compiler（模板）模式和runtime模式（运行时），原项目中使用vue是这种形式为compiler模式的，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router: router,</span><br><span class="line">  store: store,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解决办法，修改vue.config.js 配置文件 增加 runtimeCompiler 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtimeCompiler: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>文档是这么说的</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587280088080.png"></p><p>继续运行 报错</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587280916469.png" alt="1587280916469"></p><p>原因是原理项目css样式使用的是 lang=”sass”，需改写成 lang=”scss”,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;sass&quot;&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>想到 部分页面还是用了less，一并安装依赖。</p><p>继续运行 报错</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587281331076.png" alt="1587281331076"></p><p>Scss 颜色计算报错，不知为啥，项目中这样的写法就几处，直接改成计算后的结果。继续。</p><p>继续运行报错 </p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587280284720.png"></p><p>想到代码里使用window对象怎么可能报错，找了半天，是我在配置多页面的时候，模板来源写作了一个。是自己挖的坑。</p><p>继续运行又报错，静态资源都找不到</p><p>原因是原来项目静态资源都在static目录，于是把静态资源都放到了现在项目的 public目录下。</p><p>继续运行，继续报错，这次是 vue-awesome-swipe 依赖的样式找不到文件，</p><p>原因是升级了依赖，部分依赖变化较大，对这和依赖进行降级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue-awesome-swiper css引入</span><br><span class="line">&#x2F;&#x2F;  &quot;vue-awesome-swiper&quot;: &quot;^4.1.0&quot;, &#x3D;&gt; 3.1.0</span><br></pre></td></tr></table></figure><p>继续运行，部分页面可以打开，部分页面报错</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587281801904.png" alt="1587281801904"></p><p>原因是原项目使用了vux部分组件，新项目再没有使用 vux-loader，添加 vux-loader，修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vux-loader -D</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">  require(&quot;vux-loader&quot;).merge(config, &#123;</span><br><span class="line">    options: &#123;&#125;,</span><br><span class="line">    plugins: [&quot;vux-ui&quot;]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>继续运行 依然报错</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587282285929.png" alt="1587282285929"></p><p>原因是 vux-loader 和 vue-cli 4 兼容问题，vux 无法兼容 vue-cli4创建的项目</p><p>官方github介绍</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/04/1587282802593.png" alt="1587282802593"></p><p>至今未适配 vue-cli3 ，现在我用的是vue-cli4搭建的项目。</p><p>看项目中使用 vux 的组件的有10几处，想着之后有空把这几处用其他组件代替，彻底移除 vux 之后继续。</p><p>待续…</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux现常用的网络加速脚本</title>
      <link href="2020/04/16/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8A%A0%E9%80%9F%E8%84%9A%E6%9C%AC/"/>
      <url>2020/04/16/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8A%A0%E9%80%9F%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="原版BBR-魔改BBR-BBR-Plus-锐速-Lotserver-四合一脚本-一键安装"><a href="#原版BBR-魔改BBR-BBR-Plus-锐速-Lotserver-四合一脚本-一键安装" class="headerlink" title="原版BBR/魔改BBR/BBR Plus/锐速(Lotserver)四合一脚本/一键安装"></a>原版BBR/魔改BBR/BBR Plus/锐速(Lotserver)四合一脚本/一键安装</h3><p>项目Github地址：<a href="https://github.com/cx9208/Linux-NetSpeed">点击访问</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>终端获取设备外网ip</title>
      <link href="2020/04/16/mac%E6%8A%80%E5%B7%A7/%E7%BB%88%E7%AB%AF%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%A4%96%E7%BD%91ip/"/>
      <url>2020/04/16/mac%E6%8A%80%E5%B7%A7/%E7%BB%88%E7%AB%AF%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%A4%96%E7%BD%91ip/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>运用curl获取自己的外网IP</p><p>curl icanhazip.com</p><p>icanhazip.com   是一个神奇的网址,访问时会返回主机的外网访问ip,类似的网址还有如下:</p><p>ip.3322.net</p><p>myip.dnsomatic.com</p><p>ip.appspot.com</p><p>curl + 网址       返回值即自己外网的ip</p><p>可以根据自己需求加以利用</p>]]></content>
      
      
      <categories>
          
          <category> mac技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git 和 终端设置代理，提高下载速度</title>
      <link href="2020/04/07/git%E6%8A%80%E5%B7%A7/git%E5%92%8C%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%EF%BC%8C%E6%8F%90%E9%AB%98%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
      <url>2020/04/07/git%E6%8A%80%E5%B7%A7/git%E5%92%8C%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%EF%BC%8C%E6%8F%90%E9%AB%98%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在获取github上面的代码的时候，发现有时候很慢，这时候就需要使用代理。因此只要设置git代理即可。</p><h4 id="配置git代理"><a href="#配置git代理" class="headerlink" title="配置git代理"></a>配置git代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置 注意都要设置 这几个是不同的</span></span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27; </span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">取消</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h4 id="配置终端代理"><a href="#配置终端代理" class="headerlink" title="配置终端代理"></a>配置终端代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置http访问的</span></span><br><span class="line">export http_proxy=socks5://127.0.0.1:1080 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置https</span></span><br><span class="line">export https_proxy=socks5://127.0.0.1:1080 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 懒人方法 配置http和https访</span></span><br><span class="line">export all_proxy=socks5://127.0.0.1:1080 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 取消代理</span></span><br><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br><span class="line">unset all_proxy</span><br></pre></td></tr></table></figure><p>关闭terminal重启之后需要重新输入。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>trojan客户端安装(移动端)</title>
      <link href="2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85(%E7%A7%BB%E5%8A%A8%E7%AB%AF)/"/>
      <url>2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85(%E7%A7%BB%E5%8A%A8%E7%AB%AF)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="移动端安装"><a href="#移动端安装" class="headerlink" title="移动端安装"></a>移动端安装</h1><h2 id="iOS-Shadowrocket小火箭在线安装"><a href="#iOS-Shadowrocket小火箭在线安装" class="headerlink" title="iOS Shadowrocket小火箭在线安装"></a>iOS Shadowrocket小火箭在线安装</h2><ul><li>共享Shadowrocket小火箭账号，请大家有条件情况下支持正版！</li><li>Shadowrocket小火箭 在线安装地址 <a href="https://lueyingpro.github.io/shadowrocket/index.html">https://lueyingpro.github.io/shadowrocket/index.html</a></li><li>无法在线安装的下载网盘的文件用爱思助手安装到手机</li><li>网盘地址：<a href="https://www.lanzous.com/b00t97mbe">https://www.lanzous.com/b00t97mbe</a> 密码:atwx</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首次安装打开后需用下面账号登录</span><br><span class="line">账号：qe773618@icloud.com</span><br><span class="line">密码：sstz.meA1</span><br><span class="line">如打开闪退，可登录App Store 下载最新版本</span><br><span class="line">请勿用此账号登录 iCloud  会变砖</span><br><span class="line">成功授权后请到立即手机设置里退出这个 App Store 账号</span><br></pre></td></tr></table></figure><img src="https://gitee.com/zz16/upic/raw/master/2020/02/1580880849930.jpg" style="width:300px;" /><h3 id="Android-Trojan官方App"><a href="#Android-Trojan官方App" class="headerlink" title="Android Trojan官方App"></a>Android Trojan官方App</h3><ul><li><p>GIthub地址：<a href="https://github.com/trojan-gfw/igniter/releases">https://github.com/trojan-gfw/igniter/releases</a></p></li><li><p>网盘地址：<a href="https://www.lanzous.com/b00t97mbe">https://www.lanzous.com/b00t97mbe</a> 密码:atwx</p></li></ul><img src="https://gitee.com/zz16/upic/raw/master/2020/02/1580881355099.jpg" style="width:300px;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">点击「START」，即可开启Trojan</span><br><span class="line">如果开启后无法翻墙的话，请先重启您的手机，有时候会因权限问题需要重启一次</span><br><span class="line">Trojan安卓客户端目前还存在着兼容性问题，部分机型可能无法使用。请暂时换用iOS、Windows、MacOS的Trojan服务翻墙。请等待增加安卓端稳定的Trojan服务支持！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>trojan客户端安装（PC）</title>
      <link href="2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85(PC)/"/>
      <url>2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85(PC)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PC端使用trojan有2步，一是需要在本地计算机启动代理转发服务器，二是安装代理客户端。</p><h2 id="本地计算机安装代理转发服务器"><a href="#本地计算机安装代理转发服务器" class="headerlink" title="本地计算机安装代理转发服务器"></a>本地计算机安装代理转发服务器</h2><p>这个是本地计算机启动的trojan服务，用于和远程服务端的trojan服务通信，这个服务也可启动在内网任意服务器上，如已安装，这步可以跳过。</p><p>下载最新trojan安装包到客户端，当前最新版本是1.14.1</p><p>github地址：<a href="https://github.com/trojan-gfw/trojan/releases">https://github.com/trojan-gfw/trojan/releases</a></p><p>网盘地址：<a href="https://www.lanzous.com/b00t97mbe">https://www.lanzous.com/b00t97mbe</a> 密码:atwx</p><p>win系统下载  trojan-1.14.1-win.zip</p><p>mac系统下载   trojan-1.14.1-macos.zip</p><p>下载成功之后解压缩，修改配置，</p><p>examples 文件夹下是配置示例，打开 client.json-example，复制里面的配置到config.json 里面。</p><h6 id="客户端只用修改-remote-addr-和-password-就可以了，cert可选。"><a href="#客户端只用修改-remote-addr-和-password-就可以了，cert可选。" class="headerlink" title="客户端只用修改 remote_addr 和 password 就可以了，cert可选。"></a>客户端只用修改 remote_addr 和 password 就可以了，cert可选。</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;run_type&quot;</span>: <span class="string">&quot;client&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;xxx.xxx.com&quot;</span>, <span class="comment">// 服务端域名</span></span><br><span class="line">    <span class="attr">&quot;remote_port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pass&quot;</span> <span class="comment">// 密码</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;log_level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;verify&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;verify_hostname&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;cert&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">//此项可不填 域名证书路径（下载域名证书放客户端）</span></span><br><span class="line">        <span class="attr">&quot;cipher&quot;</span>: <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cipher_tls13&quot;</span>: <span class="string">&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sni&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;alpn&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;h2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;reuse_session&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;session_ticket&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;curves&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tcp&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;no_delay&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;keep_alive&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;reuse_port&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open_qlen&quot;</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动代理"><a href="#启动代理" class="headerlink" title="启动代理"></a>启动代理</h4><p>Win系统先安装目录里的 VC_redist.x64.exe ，运行 trojan.exe。</p><p>Mac系统 运行 start.command。或者终端运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前台运行</span></span><br><span class="line">./trojan -c config.json</span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">nohup ./trojan -c config.json &gt; client.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>客户端代理服务启动，窗口关闭就是停止代理功能，或者命令行关闭进程。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行关闭进程</span></span><br><span class="line">killall trojan</span><br></pre></td></tr></table></figure><p>现在发现浏览器访问外网并没有通过代理。</p><p>因为客户端代理服务启动了，但并没有去使用这个服务去访问外网。</p><p>还要进一步安装对应的软件去使用代理。</p><p>可以安装客户端软件，也可以安装 Google 浏览器插件去使用。如果只安装浏览器插件，那么只有这个浏览器打开的网页可以使用代理。如果安装客户端软件那么客户端所有软件打开的网页都会通过代理访问。</p><p>根据实际需求安装对应的软件吧。</p><h2 id="谷歌Chrome浏览器插件"><a href="#谷歌Chrome浏览器插件" class="headerlink" title="谷歌Chrome浏览器插件"></a>谷歌Chrome浏览器插件</h2><p>已经放到顶部网盘链接里面了。文件名 SwitchyOmega_Chromium，</p><p>不要解压 直接拖放这个插件到 Chrome 扩展程序页面。</p><p>协议选择 SOCKS5，填写代理服务ip和端口，应用选项，最后使用刚刚配置的代理。</p><p>这个代理服务器就是上面本地计算机运行的trojan服务，局域网内任意一台计算机启动了trojan服务，填写对应的ip即可。</p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/02/1580916809909.png"></p><p><img src="https://gitee.com/zz16/upic/raw/master/2020/02/1580916940663.png"></p><h2 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h2><h2 id="Mac客户端"><a href="#Mac客户端" class="headerlink" title="Mac客户端"></a>Mac客户端</h2>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>trojan服务端的安装</title>
      <link href="2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>trojan github地址：<a href="https://github.com/trojan-gfw/trojan">https://github.com/trojan-gfw/trojan</a></p><p>trojan 文档地址：<a href="https://trojan-gfw.github.io/trojan/">https://trojan-gfw.github.io/trojan/</a></p><p>trojan整体思路大概就是将流量模仿为最常见的https，以达到诱骗GFW的目的，详细的介绍请直接查看官方文档，官方文档写的也很详细，看不懂英文没关系，直接chrome浏览器翻译就好。</p><p>我的服务器环境：</p><ul><li><p>centos7</p></li><li><p>trojan1.14.1</p></li><li><p>有ssl证书的域名并成功添加dns解析</p></li></ul><h5 id="下载最新安装包到服务器上"><a href="#下载最新安装包到服务器上" class="headerlink" title="下载最新安装包到服务器上"></a>下载最新安装包到服务器上</h5><p>下载地址：<a href="https://github.com/trojan-gfw/trojan/releases">https://github.com/trojan-gfw/trojan/releases</a></p><p>我选择的是  trojan-1.14.1-linux-amd64.tar.xz</p><p>解压缩放到任意目录里，examples 文件夹下是配置示例，服务端选择 server.json-example，复制里面的配置到config.json 里面。config.json 文件名也可修改。为了区分服务端和客户端我的改成了server.json。</p><p>大部分直接默认即可，只需要修改密码和ssl证书，mysql也可选择配置。</p><p>配置文件解释 以官方文档：<a href="https://trojan-gfw.github.io/trojan/config">https://trojan-gfw.github.io/trojan/config</a> 为准。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;run_type&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;remote_port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pwd1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pwd2&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;log_level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cert&quot;</span>: <span class="string">&quot;/etc/letsencrypt/certificate.crt&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;/etc/letsencrypt/private.key&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key_password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cipher&quot;</span>: <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cipher_tls13&quot;</span>: <span class="string">&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;prefer_server_cipher&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;alpn&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;reuse_session&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;session_ticket&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;session_timeout&quot;</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">&quot;plain_http_response&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;curves&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dhparam&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tcp&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefer_ipv4&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;no_delay&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;keep_alive&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;reuse_port&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open_qlen&quot;</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;mysql&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;server_addr&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;server_port&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="mysql配置的解释"><a href="#mysql配置的解释" class="headerlink" title="mysql配置的解释"></a>mysql配置的解释</h6><p>需要注意的是Trojan只会读写<code>password</code>，<code>quota</code>，<code>download</code>，和<code>upload</code>字段。为了便于管理，还存在其他领域。出于效率和安全原因，存储在表中的密码必须由SHA224进行哈希处理。</p><p>收到Trojan请求后，<strong>如果服务器未能将密码与配置文件中设置的任何密码匹配</strong>，它将查询数据库中的用户。如果成功，Trojan将检查是否<code>download + upload &lt; quota</code>；如果是这样，则授予连接。<strong>负值<code>quota</code>表示无限配额。</strong>一个连接关闭后，Trojan将递增<code>download</code>和<code>upload</code>该用户通过用户已经使用的数据量的字段。</p><p>的单元<code>quota</code>，<code>download</code>以及<code>upload</code>字段是字节。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录直接启动</span></span><br><span class="line">./trojan -c server.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动 日志保存在 server.log 里</span></span><br><span class="line">nohup ./trojan -c server.json &gt; server.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务 查找 443 端口占用进程并杀掉</span></span><br><span class="line">lsof -i tcp:443</span><br><span class="line">kill 进程ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止进程</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>trojan-docker服务端的安装</title>
      <link href="2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan-docker%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>2020/02/05/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/trojan-docker%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>github地址：<a href="https://github.com/trojan-gfw/trojan">https://github.com/trojan-gfw/trojan</a></p><p>docker hub 地址：<a href="https://hub.docker.com/r/trojangfw/trojan">https://hub.docker.com/r/trojangfw/trojan</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull trojangfw/trojan</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker run -dt --name trojan --restart=always -v /home/trojan:/config -v /home/trojan/ssl:/etc/letsencrypt -p 443:443 trojangfw/trojan</span><br><span class="line"><span class="comment"># 查看运行日志</span></span><br><span class="line">docker logs -f trojan</span><br></pre></td></tr></table></figure><h6 id="trojan-配置"><a href="#trojan-配置" class="headerlink" title="trojan 配置"></a>trojan 配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目录：&#x2F;home&#x2F;trojan</span><br><span class="line">配置文件路径：&#x2F;home&#x2F;trojan&#x2F;config.json</span><br><span class="line">ssl证书路径：&#x2F;home&#x2F;trojan&#x2F;ssl&#x2F;</span><br></pre></td></tr></table></figure><h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>配置文件解释 以官方文档：<a href="https://trojan-gfw.github.io/trojan/config">https://trojan-gfw.github.io/trojan/config</a> 为准。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;run_type&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;remote_port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pwd1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pwd2&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;log_level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cert&quot;</span>: <span class="string">&quot;/etc/letsencrypt/certificate.crt&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;/etc/letsencrypt/private.key&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key_password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cipher&quot;</span>: <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cipher_tls13&quot;</span>: <span class="string">&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;prefer_server_cipher&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;alpn&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;reuse_session&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;session_ticket&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;session_timeout&quot;</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">&quot;plain_http_response&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;curves&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dhparam&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tcp&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefer_ipv4&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;no_delay&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;keep_alive&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;reuse_port&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open_qlen&quot;</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;mysql&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;server_addr&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;server_port&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是Trojan只会读/写<code>password</code>，<code>quota</code>，<code>download</code>，和<code>upload</code>领域。为了便于管理，还存在其他领域。出于效率和安全原因，存储在表中的密码必须由SHA224进行哈希处理。</p><p>收到Trojan请求后，<strong>如果服务器未能将密码与配置文件中设置的任何密码匹配</strong>，它将查询数据库中的用户。如果成功，Trojan将检查是否<code>download + upload &lt; quota</code>；如果是这样，则授予连接。<strong>负值<code>quota</code>表示无限配额。</strong>一个连接关闭后，Trojan将递增<code>download</code>和<code>upload</code>该用户通过用户已经使用的数据量的字段。</p><p>的单元<code>quota</code>，<code>download</code>以及<code>upload</code>字段是字节。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOSApp签名</title>
      <link href="2020/01/28/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/iOSApp%E8%87%AA%E7%AD%BE%E5%90%8D/"/>
      <url>2020/01/28/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/iOSApp%E8%87%AA%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>iOS App 签名工具：</p><p>要配合Xcode使用</p><p>github地址： <a href="https://github.com/DanTheMan827/ios-app-signer">iOS App Signer</a></p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>破解版（含汉化文件）</title>
      <link href="2020/01/24/Mac%E8%BD%AF%E4%BB%B6/Navicat%20Premium%2012.1.23%20for%20Mac%20%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%88%E5%90%AB%E6%B1%89%E5%8C%96%E6%96%87%E4%BB%B6/"/>
      <url>2020/01/24/Mac%E8%BD%AF%E4%BB%B6/Navicat%20Premium%2012.1.23%20for%20Mac%20%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%88%E5%90%AB%E6%B1%89%E5%8C%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Navicat-Premium-12-1-23-for-Mac-破解版（含汉化文件）"><a href="#Navicat-Premium-12-1-23-for-Mac-破解版（含汉化文件）" class="headerlink" title="Navicat Premium 12.1.23 for Mac 破解版（含汉化文件）"></a>Navicat Premium 12.1.23 for Mac 破解版（含汉化文件）</h2><p>百度下载地址：<a href="https://pan.baidu.com/s/1KQElSnMHvD67TDtJ5es6rA">https://pan.baidu.com/s/1KQElSnMHvD67TDtJ5es6rA </a> </p><p>密码:e9ts</p><p>运行时会提示“已损坏”、“无法验证开发者”等问题，下面详细说下解决方法。</p><p>\1. 首先确保系统安全设置已经改为任何来源。</p><p>\2. 打开任何来源后，到应用程序目录中尝试运行软件，如果仍提示损坏，请在应用图标上，鼠标右键，在弹出菜单中点打开。</p><p>\3. 如果前面两步仍有问题，请打开终端，在终端中粘贴下面命令：<br>sudo xattr -r -d com.apple.quarantine ,然后输入个空格，再将应用程序目录中的软件拖拽到命令后面，按回车后输入密码执行，比如Sketch的命令是 sudo xattr -r -d com.apple.quarantine /Applications/Sketch.app/</p><p>以上就是macOS Catalina 10.15 第三方软件文件提示已损坏解决办法的三个方法。</p>]]></content>
      
      
      <categories>
          
          <category> mac软件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell学习</title>
      <link href="2020/01/19/%E6%9C%8D%E5%8A%A1%E7%AB%AF/shell%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/01/19/%E6%9C%8D%E5%8A%A1%E7%AB%AF/shell%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h1><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">&quot;runoob.com&quot;</span></span><br></pre></td></tr></table></figure><p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。</p><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">&quot;qinjx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。</p><p>已定义的变量，可以被重新定义</p><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><p>下面的例子尝试更改只读变量，结果报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myUrl=<span class="string">&quot;http://www.google.com&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> myUrl</span><br></pre></td></tr></table></figure><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>使用 unset 命令可以删除变量。语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> variable_name</span><br></pre></td></tr></table></figure><p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><p><strong>实例</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">myUrl=<span class="string">&quot;http://www.runoob.com&quot;</span></span><br><span class="line"><span class="built_in">unset</span> myUrl</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$myUrl</span></span><br></pre></td></tr></table></figure><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：</p><ul><li><strong>1) 局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><strong>2) 环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><strong>3) shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul><h1 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h1><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&#x27;this is a string&#x27;</span></span><br></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">&#x27;runoob&#x27;</span></span><br><span class="line">str=<span class="string">&quot;Hello, I know you are \&quot;<span class="variable">$your_name</span>\&quot;! \n&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$str</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, I know you are <span class="string">&quot;runoob&quot;</span>! </span><br></pre></td></tr></table></figure><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">&quot;hello, &quot;</span><span class="variable">$your_name</span><span class="string">&quot; !&quot;</span></span><br><span class="line">greeting_1=<span class="string">&quot;hello, <span class="variable">$&#123;your_name&#125;</span> !&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span>  <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">&#x27;hello, &#x27;</span><span class="variable">$your_name</span><span class="string">&#x27; !&#x27;</span></span><br><span class="line">greeting_3=<span class="string">&#x27;hello, $&#123;your_name&#125; !&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span>  <span class="variable">$greeting_3</span></span><br></pre></td></tr></table></figure><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br></pre></td></tr></table></figure><h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">&quot;runoob is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：第一个字符的索引值为 <strong>0</strong>。</p><h3 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h3><p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">&quot;runoob is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">&quot;<span class="variable">$string</span>&quot;</span> io`  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 以上脚本中 <strong>`</strong> 是反引号，而不是单引号 **’**，不要看错了哦。</p><h2 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a>Shell 注释</h2><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释，像这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="comment"># author：注释</span></span><br><span class="line"><span class="comment"># site：www.baidu.com</span></span><br><span class="line"><span class="comment"># slogan：学的不仅是技术，更是梦想！</span></span><br><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment">##### 用户配置区 开始 #####</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这里可以添加脚本描述信息</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##### 用户配置区 结束  #####</span></span><br></pre></td></tr></table></figure><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p><p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释还可以使用以下格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>EOF 也可以使用其他符号:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h1 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h1><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例我们向脚本传递三个参数，并分别输出，其中 <strong>$0</strong> 为执行的文件名：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>;</span><br></pre></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html">set命令</a>功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数个数为：<span class="variable">$#</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;传递的参数作为一个字符串显示：$*&quot;</span>;</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">第一个参数为：1</span><br><span class="line">参数个数为：3</span><br><span class="line">传递的参数作为一个字符串显示：1 2 3</span><br></pre></td></tr></table></figure><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数。</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$* 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$@ 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">-- $* 演示 ---</span><br><span class="line">1 2 3</span><br><span class="line">-- <span class="variable">$@</span> 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h1 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h1><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name&#x3D;(value0 value1 value2 value3)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;数组名[下标]&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span></span><br></pre></td></tr></table></figure><p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h1><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加(<strong>注意使用的是反引号 ` 而不是单引号 ‘</strong>)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val=**`expr 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两数之和为 : <span class="variable">$val</span>&quot;</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两数之和为 : 4</span><br></pre></td></tr></table></figure><p>两点注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <strong><code> </code></strong> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td align="left">/</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td align="left">=</td><td align="left">赋值</td><td align="left">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td align="left">==</td><td align="left">相等。用于比较两个数字，相同则返回 true。</td><td align="left">[ $a == $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">不相等。用于比较两个数字，不相同则返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 **[ $a == $b ]**。</p><p>算术运算符实例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a + b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a - b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a * b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> / <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b / a : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> % <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b % a : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a + b : 30</span><br><span class="line">a - b : -10</span><br><span class="line">a * b : 200</span><br><span class="line">b / a : 2</span><br><span class="line">b % a : 0</span><br><span class="line">a 不等于 b</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ul><li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li><li>if…then…fi 是条件语句，后续将会讲解。</li><li>在 MAC 中 shell 的 expr 语法是：*<em>$((表达式))**，此处表达式中的 “</em>“ 不需要转义符号 “&quot; 。</li></ul></blockquote><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>关系运算符实例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a + b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a - b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a * b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> / <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b / a : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> % <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b % a : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10 -eq 20: a 不等于 b</span><br><span class="line">10 -ne 20: a 不等于 b</span><br><span class="line">10 -gt 20: a 不大于 b</span><br><span class="line">10 -lt 20: a 小于 b</span><br><span class="line">10 -ge 20: a 小于 b</span><br><span class="line">10 -le 20: a 小于或等于 b</span><br></pre></td></tr></table></figure><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><p>布尔运算符实例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> == <span class="variable">$b</span>: a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 5 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 != 20 : a 不等于 b</span><br><span class="line">10 小于 100 且 20 大于 15 : 返回 <span class="literal">true</span></span><br><span class="line">10 小于 100 或 20 大于 100 : 返回 <span class="literal">true</span></span><br><span class="line">10 小于 5 或 20 大于 100 : 返回 <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>逻辑运算符实例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">返回 false</span><br><span class="line">返回 true</span><br></pre></td></tr></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a = $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">检测两个字符串是否相等，不相等返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否为0，不为0返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>字符串运算符实例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line">b=<span class="string">&quot;efg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span> : a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span>: a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度为 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度不为 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$a</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度不为 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度为 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串不为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串为空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abc = efg: a 不等于 b</span><br><span class="line">abc != efg : a 不等于 b</span><br><span class="line">-z abc : 字符串长度不为 0</span><br><span class="line">-n abc : 字符串长度不为 0</span><br><span class="line">abc : 字符串不为空</span><br></pre></td></tr></table></figure><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td><td align="left">[ -b $file ] 返回 false。</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td align="left">[ -c $file ] 返回 false。</td></tr><tr><td align="left">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true。</td><td align="left">[ -d $file ] 返回 false。</td></tr><tr><td align="left">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td align="left">[ -f $file ] 返回 true。</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td align="left">[ -g $file ] 返回 false。</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td align="left">[ -k $file ] 返回 false。</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true。</td><td align="left">[ -p $file ] 返回 false。</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td align="left">[ -u $file ] 返回 false。</td></tr><tr><td align="left">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true。</td><td align="left">[ -r $file ] 返回 true。</td></tr><tr><td align="left">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true。</td><td align="left">[ -w $file ] 返回 true。</td></tr><tr><td align="left">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true。</td><td align="left">[ -x $file ] 返回 true。</td></tr><tr><td align="left">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td align="left">[ -s $file ] 返回 true。</td></tr><tr><td align="left">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td align="left">[ -e $file ] 返回 true。</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>变量 file 表示文件 <strong>/var/www/runoob/test.sh</strong>，它的大小为 100 字节，具有 <strong>rwx</strong> 权限。下面的代码，将检测该文件的各种属性：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">file=<span class="string">&quot;/var/www/runoob/test.sh&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可读&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可读&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可写&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可写&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可执行&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可执行&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为普通文件&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为特殊文件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件是个目录&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不是个目录&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件可读</span><br><span class="line">文件可写</span><br><span class="line">文件可执行</span><br><span class="line">文件为普通文件</span><br><span class="line">文件不是个目录</span><br><span class="line">文件不为空</span><br></pre></td></tr></table></figure><h2 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a>Shell echo命令</h2><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> string</span><br></pre></td></tr></table></figure><p>您可以使用echo实现更复杂的输出格式控制。</p><h3 id="1-显示普通字符串"><a href="#1-显示普通字符串" class="headerlink" title="1.显示普通字符串:"></a>1.显示普通字符串:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure><p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="2-显示转义字符"><a href="#2-显示转义字符" class="headerlink" title="2.显示转义字符"></a>2.显示转义字符</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;It is a test\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>结果将是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure><p>同样，双引号也可以省略</p><h3 id="3-显示变量"><a href="#3-显示变量" class="headerlink" title="3.显示变量"></a>3.显示变量</h3><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> It is a test&quot;</span></span><br></pre></td></tr></table></figure><p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># sh test.sh</span></span><br><span class="line">OK                     <span class="comment">#标准输入</span></span><br><span class="line">OK It is a <span class="built_in">test</span>        <span class="comment">#输出</span></span><br></pre></td></tr></table></figure><h3 id="4-显示换行"><a href="#4-显示换行" class="headerlink" title="4.显示换行"></a>4.显示换行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \n&quot;</span> <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OK!</span><br><span class="line"></span><br><span class="line">It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="5-显示不换行"><a href="#5-显示不换行" class="headerlink" title="5.显示不换行"></a>5.显示不换行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OK! It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="6-显示结果定向至文件"><a href="#6-显示结果定向至文件" class="headerlink" title="6.显示结果定向至文件"></a>6.显示结果定向至文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span> &gt; myfile</span><br></pre></td></tr></table></figure><h3 id="7-原样输出字符串，不进行转义或取变量-用单引号"><a href="#7-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="7.原样输出字符串，不进行转义或取变量(用单引号)"></a>7.原样输出字符串，不进行转义或取变量(用单引号)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>\&quot;</span><br></pre></td></tr></table></figure><h3 id="8-显示命令执行结果"><a href="#8-显示命令执行结果" class="headerlink" title="8.显示命令执行结果"></a>8.显示命令执行结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 这里使用的是反引号 <strong>`</strong>, 而不是单引号 **’**。</p><p>结果将显示当前日期</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thu Jul 24 10:08:46 CST 2014</span><br></pre></td></tr></table></figure><h1 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a>Shell printf 命令</h1><p>上一章节我们学习了 Shell 的 echo 命令，本章节我们来学习 Shell 的另一个输出命令 printf。</p><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。</p><p>printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。</p><p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \n。</p><p>printf 命令的语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>  format-string  [arguments...]</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>format-string:</strong> 为格式控制字符串</li><li><strong>arguments:</strong> 为参数列表。</li></ul><p>实例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Hello, Shell&quot;</span></span><br><span class="line">Hello, Shell</span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;Hello, Shell\n&quot;</span></span><br><span class="line">Hello, Shell</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>接下来,我来用一个脚本来体现printf的强大功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4s\n&quot;</span> 姓名 性别 体重kg  </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭靖 男 66.1234 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 杨过 男 48.6543 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭芙 女 47.9876 </span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名     性别   体重kg</span><br><span class="line">郭靖     男      66.12</span><br><span class="line">杨过     男      48.65</span><br><span class="line">郭芙     女      47.99</span><br></pre></td></tr></table></figure><p>%s %c %d %f都是格式替代符</p><p>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p><p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p><p>更多实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># format-string为双引号</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d %s\n&quot;</span> 1 <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号与双引号效果一样 </span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%d %s\n&#x27;</span> 1 <span class="string">&quot;abc&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有引号也可以输出</span></span><br><span class="line"><span class="built_in">printf</span> %s abcdef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></span><br><span class="line"><span class="built_in">printf</span> %s abc def</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%s\n&quot;</span> abc def</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%s %s %s\n&quot;</span> a b c d e f g h i j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%s and %d \n&quot;</span> </span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 abc</span><br><span class="line">1 abc</span><br><span class="line">abcdefabcdefabc</span><br><span class="line">def</span><br><span class="line">a b c</span><br><span class="line">d e f</span><br><span class="line">g h i</span><br><span class="line">j  </span><br><span class="line"> and 0</span><br></pre></td></tr></table></figure><hr><h2 id="printf的转义序列"><a href="#printf的转义序列" class="headerlink" title="printf的转义序列"></a>printf的转义序列</h2><table><thead><tr><th align="left">序列</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\a</td><td align="left">警告字符，通常为ASCII的BEL字符</td></tr><tr><td align="left">\b</td><td align="left">后退</td></tr><tr><td align="left">\c</td><td align="left">抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td align="left">\f</td><td align="left">换页（formfeed）</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\r</td><td align="left">回车（Carriage return）</td></tr><tr><td align="left">\t</td><td align="left">水平制表符</td></tr><tr><td align="left">\v</td><td align="left">垂直制表符</td></tr><tr><td align="left">\</td><td align="left">一个字面上的反斜杠字符</td></tr><tr><td align="left">\ddd</td><td align="left">表示1到3位数八进制值的字符。仅在格式字符串中有效</td></tr><tr><td align="left">\0ddd</td><td align="left">表示1到3位的八进制值字符</td></tr></tbody></table><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;a string, no processing:&lt;%s&gt;\n&quot;</span> <span class="string">&quot;A\nB&quot;</span></span><br><span class="line">a string, no processing:&lt;A\nB&gt;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;a string, no processing:&lt;%b&gt;\n&quot;</span> <span class="string">&quot;A\nB&quot;</span></span><br><span class="line">a string, no processing:&lt;A</span><br><span class="line">B&gt;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;www.runoob.com \a&quot;</span></span><br><span class="line">www.runoob.com $                  <span class="comment">#不换行</span></span><br></pre></td></tr></table></figure><h1 id="Shell-test-命令"><a href="#Shell-test-命令" class="headerlink" title="Shell test 命令"></a>Shell test 命令</h1><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><hr><h2 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h2><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">等于则为真</td></tr><tr><td align="left">-ne</td><td align="left">不等于则为真</td></tr><tr><td align="left">-gt</td><td align="left">大于则为真</td></tr><tr><td align="left">-ge</td><td align="left">大于等于则为真</td></tr><tr><td align="left">-lt</td><td align="left">小于则为真</td></tr><tr><td align="left">-le</td><td align="left">小于等于则为真</td></tr></tbody></table><p>实例演示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数相等！&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数不相等！&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个数相等！</span><br></pre></td></tr></table></figure><p>代码中的 [] 执行基本的算数运算，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=5</span><br><span class="line">b=6</span><br><span class="line"></span><br><span class="line">result=$[a+b] <span class="comment"># 注意等号两边不能有空格</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;result 为： <span class="variable">$result</span>&quot;</span></span><br></pre></td></tr></table></figure><p>结果为:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result 为： 11</span><br></pre></td></tr></table></figure><hr><h2 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h2><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于则为真</td></tr><tr><td align="left">!=</td><td align="left">不相等则为真</td></tr><tr><td align="left">-z 字符串</td><td align="left">字符串的长度为零则为真</td></tr><tr><td align="left">-n 字符串</td><td align="left">字符串的长度不为零则为真</td></tr></tbody></table><p>实例演示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">&quot;ru1noob&quot;</span></span><br><span class="line">num2=<span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$num1</span> = <span class="variable">$num2</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串相等!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串不相等!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个字符串不相等!</span><br></pre></td></tr></table></figure><hr><h2 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h2><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-e 文件名</td><td align="left">如果文件存在则为真</td></tr><tr><td align="left">-r 文件名</td><td align="left">如果文件存在且可读则为真</td></tr><tr><td align="left">-w 文件名</td><td align="left">如果文件存在且可写则为真</td></tr><tr><td align="left">-x 文件名</td><td align="left">如果文件存在且可执行则为真</td></tr><tr><td align="left">-s 文件名</td><td align="left">如果文件存在且至少有一个字符则为真</td></tr><tr><td align="left">-d 文件名</td><td align="left">如果文件存在且为目录则为真</td></tr><tr><td align="left">-f 文件名</td><td align="left">如果文件存在且为普通文件则为真</td></tr><tr><td align="left">-c 文件名</td><td align="left">如果文件存在且为字符型特殊文件则为真</td></tr><tr><td align="left">-b 文件名</td><td align="left">如果文件存在且为块特殊文件则为真</td></tr></tbody></table><p>实例演示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件已存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件不存在!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件已存在!</span><br></pre></td></tr></table></figure><p>另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：”!”最高，”-a”次之，”-o”最低。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./notFile -o -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;至少有一个文件存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个文件都不存在&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">至少有一个文件存在!</span><br></pre></td></tr></table></figure><h1 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a>Shell 流程控制</h1><p>和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">&quot;q&quot;</span>])) &#123;</span><br><span class="line">    search(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    // 不做任何事情</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><hr><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if 语句语法格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>写成一行（适用于终端命令提示符）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ $(ps -ef | grep -c <span class="string">&quot;ssh&quot;</span>) -gt 1 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;true&quot;</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的。</p><h3 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h3><p>if else 语法格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h3><p>if else-if else 语法格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line"><span class="keyword">elif</span> condition2 </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>以下实例判断两个变量是否相等：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 大于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 小于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;没有符合的条件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a 小于 b</span><br></pre></td></tr></table></figure><p>if else语句经常与test命令结合使用，如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1=$[2*3]</span><br><span class="line">num2=$[1+5]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数字相等!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数字不相等!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个数字相等!</span><br></pre></td></tr></table></figure><hr><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>与其他编程语言类似，Shell支持for循环。</p><p>for循环一般格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>写成一行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> command1; command2… <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p><p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p><p>例如，顺序输出当前列表中的数字：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value is: <span class="variable">$loop</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The value is: 1</span><br><span class="line">The value is: 2</span><br><span class="line">The value is: 3</span><br><span class="line">The value is: 4</span><br><span class="line">The value is: 5</span><br></pre></td></tr></table></figure><p>顺序输出字符串中的字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for str in &#39;This is a string&#39;</span><br><span class="line">do</span><br><span class="line">    echo $str</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a string</span><br></pre></td></tr></table></figure><hr><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">int=1</span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;int++&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行脚本，输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅：<a href="https://www.runoob.com/linux/linux-comm-let.html">Bash let 命令</a></p><p>。</p><p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<Ctrl-D>结束循环。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;按下 &lt;CTRL-D&gt; 退出&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&#x27;输入你最喜欢的网站名: &#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> FILM</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;是的！<span class="variable">$FILM</span> 是一个好网站&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行脚本，输出类似下面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按下 &lt;CTRL-D&gt; 退出</span><br><span class="line">输入你最喜欢的网站名:菜鸟教程</span><br><span class="line">是的！菜鸟教程 是一个好网站</span><br></pre></td></tr></table></figure><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><p>无限循环语法格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( ; ; ))</span><br></pre></td></tr></table></figure><hr><h2 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h2><p>until 循环执行一系列命令直至条件为 true 时停止。</p><p>until 循环与 while 循环在处理方式上刚好相反。</p><p>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p><p>until 语法格式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p><p>以下实例我们使用 until 命令来输出 0 ~ 9 的数字：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=0</span><br><span class="line"></span><br><span class="line">until [ ! <span class="variable">$a</span> -lt 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">   a=`expr <span class="variable">$a</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p>输出结果为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><hr><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><p>下面的脚本提示输入1到4，与每一种模式进行匹配：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;你输入的数字为:&#x27;</span></span><br><span class="line"><span class="built_in">read</span> aNum</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">    1)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 1&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    2)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 2&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    3)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 3&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    4)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 4&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  <span class="built_in">echo</span> <span class="string">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>输入不同的内容，会有不同的结果，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入 1 到 4 之间的数字:</span><br><span class="line">你输入的数字为:</span><br><span class="line">3</span><br><span class="line">你选择了 3</span><br></pre></td></tr></table></figure><hr><h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><h3 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字:&quot;</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">        1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入 1 到 5 之间的数字:3</span><br><span class="line">你输入的数字为 3!</span><br><span class="line">输入 1 到 5 之间的数字:7</span><br><span class="line">你输入的数字不是 1 到 5 之间的! 游戏结束</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><p>对上面的例子进行修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">        1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的!&quot;</span></span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;游戏结束&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 <strong>echo “游戏结束”</strong> 永远不会被执行。</p><hr><h2 id="case-…-esac"><a href="#case-…-esac" class="headerlink" title="case … esac"></a>case … esac</h2><p><strong>case … esac</strong> 与其他语言中的 switch … case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。</p><p>case … esac 语法格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>case 后为取值，值可以为变量或常数。</p><p>值后为关键字 in，接下来是匹配的各种模式，每一模式最后必须以右括号结束，模式支持正则表达式。</p><h2 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/sh</em></p><p>site=”runoob”</p><p><strong>case</strong> “$site” <strong>in</strong><br>  “runoob”<strong>)</strong> <strong>echo</strong> “菜鸟教程”<br>  <strong>;;</strong><br>  “google”<strong>)</strong> <strong>echo</strong> “Google 搜索”<br>  <strong>;;</strong><br>  “taobao”<strong>)</strong> <strong>echo</strong> “淘宝网”<br>  <strong>;;</strong><br><strong>esac</strong></p><p>输出结果为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">菜鸟教程</span><br></pre></td></tr></table></figure><h1 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h1><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>shell中函数的定义格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</li></ul><p>下面的例子定义了一个函数并进行调用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">demoFun</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;这是我的第一个 shell 函数!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数开始执行-----&quot;</span></span><br><span class="line">demoFun</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数执行完毕-----&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----函数开始执行-----</span><br><span class="line">这是我的第一个 shell 函数!</span><br><span class="line">-----函数执行完毕-----</span><br></pre></td></tr></table></figure><p>下面定义一个带有return语句的函数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;这个函数会对输入的两个数字进行相加运算...&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入第一个数字: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入第二个数字: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !&quot;</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入的两个数字之和为 $? !&quot;</span></span><br></pre></td></tr></table></figure><p>输出类似下面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这个函数会对输入的两个数字进行相加运算...</span><br><span class="line">输入第一个数字: </span><br><span class="line">1</span><br><span class="line">输入第二个数字: </span><br><span class="line">2</span><br><span class="line">两个数字分别为 1 和 2 !</span><br><span class="line">输入的两个数字之和为 3 !</span><br></pre></td></tr></table></figure><p>函数返回值在调用该函数后通过 $? 来获得。</p><p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p><hr><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p><p>带参数的函数示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个参数为 1 !</span><br><span class="line">第二个参数为 2 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十个参数为 34 !</span><br><span class="line">第十一个参数为 73 !</span><br><span class="line">参数总数有 11 个!</span><br><span class="line">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span><br></pre></td></tr></table></figure><p>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</p><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本或函数的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h1 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a>Shell 输入/输出重定向</h1><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p><p>重定向命令列表如下：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">command &gt; file</td><td align="left">将输出重定向到 file。</td></tr><tr><td align="left">command &lt; file</td><td align="left">将输入重定向到 file。</td></tr><tr><td align="left">command &gt;&gt; file</td><td align="left">将输出以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt; file</td><td align="left">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td align="left">n &gt;&gt; file</td><td align="left">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt;&amp; m</td><td align="left">将输出文件 m 和 n 合并。</td></tr><tr><td align="left">n &lt;&amp; m</td><td align="left">将输入文件 m 和 n 合并。</td></tr><tr><td align="left">&lt;&lt; tag</td><td align="left">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><blockquote><p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><hr><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &gt; file1</span><br></pre></td></tr></table></figure><p>上面这个命令执行command1然后将输出的内容存入file1。</p><p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ who &gt; users</span><br></pre></td></tr></table></figure><p>执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。</p><p>你可以使用 cat 命令查看文件内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat users</span><br><span class="line">_mbsetupuser console  Oct 31 17:35 </span><br><span class="line">tianqixin    console  Oct 31 17:35 </span><br><span class="line">tianqixin    ttys000  Dec  1 11:33 </span><br></pre></td></tr></table></figure><p>输出重定向会覆盖文件内容，请看下面的例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;菜鸟教程：www.runoob.com&quot;</span> &gt; users</span><br><span class="line">$ cat users</span><br><span class="line">菜鸟教程：www.runoob.com</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;菜鸟教程：www.runoob.com&quot;</span> &gt;&gt; users</span><br><span class="line">$ cat users</span><br><span class="line">菜鸟教程：www.runoob.com</span><br><span class="line">菜鸟教程：www.runoob.com</span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &lt; file1</span><br></pre></td></tr></table></figure><p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p><p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>接着以上实例，我们需要统计 users 文件的行数,执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc -l users</span><br><span class="line">       2 users</span><br></pre></td></tr></table></figure><p>也可以将输入重定向到 users 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  wc -l &lt; users</span><br><span class="line">       2 </span><br></pre></td></tr></table></figure><p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &lt; infile &gt; outfile</span><br></pre></td></tr></table></figure><p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p><h3 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p><p>如果希望 stderr 重定向到 file，可以这样写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> 2 &gt; file</span><br></pre></td></tr></table></figure><p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> 2 &gt;&gt; file</span><br></pre></td></tr></table></figure><p><strong>2</strong> 表示标准错误文件(stderr)。</p><p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; file 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">command</span> &gt;&gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &lt; file1 &gt;file2</span><br></pre></td></tr></table></figure><p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p><hr><h2 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h2><p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</p><p>它的基本的形式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt;&lt; <span class="string">delimiter</span></span><br><span class="line"><span class="string">    document</span></span><br><span class="line"><span class="string">delimiter</span></span><br></pre></td></tr></table></figure><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p><blockquote><p>注意：</p><ul><li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li><li>开始的delimiter前后的空格会被忽略掉。</li></ul></blockquote><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>在命令行中通过 wc -l 命令计算 Here Document 的行数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wc -l &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">    欢迎来到</span></span><br><span class="line"><span class="string">    菜鸟教程</span></span><br><span class="line"><span class="string">    www.runoob.com</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">3          <span class="comment"># 输出结果为 3 行</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>我们也可以将 Here Document 用在脚本中，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">欢迎来到</span></span><br><span class="line"><span class="string">菜鸟教程</span></span><br><span class="line"><span class="string">www.runoob.com</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>执行以上脚本，输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">欢迎来到</span><br><span class="line">菜鸟教程</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure><hr><h2 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件"></a>/dev/null 文件</h2><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; /dev/null</span><br></pre></td></tr></table></figure><p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p><p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><h1 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a>Shell 文件包含</h1><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</p><p>Shell 文件包含的语法格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. filename   <span class="comment"># 注意点号(.)和文件名中间有一空格</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>创建两个 shell 脚本文件。</p><p>test1.sh 代码如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://www.runoob.com&quot;</span></span><br></pre></td></tr></table></figure><p>test2.sh 代码如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 . 号来引用test1.sh 文件</span></span><br><span class="line">. ./test1.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用以下包含文件代码</span></span><br><span class="line"><span class="comment"># source ./test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;菜鸟教程官网地址：<span class="variable">$url</span>&quot;</span></span><br></pre></td></tr></table></figure><p>接下来，我们为 test2.sh 添加可执行权限并执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test2.sh </span><br><span class="line">$ ./test2.sh </span><br><span class="line">菜鸟教程官网地址：http://www.runoob.com</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong>被包含的文件 test1.sh 不需要可执行权限。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shadowsocks客户端下载</title>
      <link href="2020/01/17/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8B%E8%BD%BD/"/>
      <url>2020/01/17/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><a href="http://vpn.zhoujie16.cn/SSR/Shadowsocks-4.1.9.2.zip">http://vpn.zhoujie16.cn/SSR/Shadowsocks-4.1.9.2.zip</a></p><h3 id="Mac-OS-X"><a href="#Mac-OS-X" class="headerlink" title="Mac OS X"></a>Mac OS X</h3><p><a href="http://vpn.zhoujie16.cn/SSR/ShadowsocksX-NG.1.9.4.zip">http://vpn.zhoujie16.cn/SSR/ShadowsocksX-NG.1.9.4.zip</a></p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p><a href="http://vpn.zhoujie16.cn/SSR/Shadowsocks-4.8.7.apk">http://vpn.zhoujie16.cn/SSR/Shadowsocks-4.8.7.apk</a></p><h3 id="iOS（需境外-App-Store-ID）"><a href="#iOS（需境外-App-Store-ID）" class="headerlink" title="iOS（需境外 App Store ID）"></a>iOS（需境外 App Store ID）</h3><p>下载一下任意一种即可</p><img src="http://vpn.zhoujie16.cn/SSR/assets/ios_1.jpg" style="zoom:40%;" /><img src="http://vpn.zhoujie16.cn/SSR/assets/ios_2.jpg" style="zoom:40%;" /><img src="http://vpn.zhoujie16.cn/SSR/assets/ios_3.jpg" style="zoom:40%;" />]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iptables 统计 端口 流量</title>
      <link href="2020/01/16/%E6%9C%8D%E5%8A%A1%E7%AB%AF/iptables-%E7%BB%9F%E8%AE%A1-%E7%AB%AF%E5%8F%A3-%E6%B5%81%E9%87%8F/"/>
      <url>2020/01/16/%E6%9C%8D%E5%8A%A1%E7%AB%AF/iptables-%E7%BB%9F%E8%AE%A1-%E7%AB%AF%E5%8F%A3-%E6%B5%81%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="添加统计端口"><a href="#添加统计端口" class="headerlink" title="添加统计端口"></a>添加统计端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 8080</span><br><span class="line">iptables -I OUTPUT -p tcp --sport 8080</span><br></pre></td></tr></table></figure><h3 id="移除统计端口"><a href="#移除统计端口" class="headerlink" title="移除统计端口"></a>移除统计端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -D INPUT -p tcp --dport 8080</span><br><span class="line">iptables -D OUTPUT -p tcp --sport 8080</span><br></pre></td></tr></table></figure><h3 id="移除规则"><a href="#移除规则" class="headerlink" title="移除规则"></a>移除规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1、先列出规则号</span><br><span class="line">iptables -nvL INPUT --line-numbers</span><br><span class="line">iptables -nvL OUTPUT --line-numbers</span><br><span class="line"> </span><br><span class="line"># 2、删除第n号规则</span><br><span class="line">iptables -D INPUT 1</span><br><span class="line">iptables -D OUTPUT 3</span><br></pre></td></tr></table></figure><h3 id="保存iptables，否则重启服务器就没了"><a href="#保存iptables，否则重启服务器就没了" class="headerlink" title="保存iptables，否则重启服务器就没了"></a>保存iptables，否则重启服务器就没了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure><h3 id="查看统计数据"><a href="#查看统计数据" class="headerlink" title="查看统计数据"></a>查看统计数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看某个端口的</span><br><span class="line">iptables -nv -L OUTPUT | grep 8080</span><br><span class="line">iptables -nv -L INPUT | grep 8080</span><br><span class="line"></span><br><span class="line"># 查看全部流出</span><br><span class="line">iptables -n -v -t filter -L OUTPUT</span><br><span class="line"></span><br><span class="line"># 查看全部流入</span><br><span class="line">iptables -n -v -t filter -L INPUT</span><br><span class="line"></span><br><span class="line"># 查看所有</span><br><span class="line">iptables -L -v -n -x</span><br></pre></td></tr></table></figure><h3 id="统计数据写入文件"><a href="#统计数据写入文件" class="headerlink" title="统计数据写入文件"></a>统计数据写入文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 这是一个利用iptables进行端口流量统计的脚本</span></span><br><span class="line"><span class="comment"># 首先请保证已经在iptables规则中加入了要监控的端口</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 需要统计的端口</span></span><br><span class="line">PORTS=(all 700)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印分割线</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;************分割线************&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印日期</span></span><br><span class="line">time=`date`</span><br><span class="line">timeStamp=`date +%s`    </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span> <span class="variable">$&#123;timeStamp&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计iptables的INPUT链</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;------------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;INPUT TOTAL:&quot;</span></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> <span class="variable">$&#123;PORTS[@]&#125;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    iptables -nvx -L INPUT | grep <span class="variable">$PORT</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计iptables的OUTPUT链</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;------------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;OUTPUT TOTAL:&quot;</span></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> <span class="variable">$&#123;PORTS[@]&#125;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    iptables -nvx -L OUTPUT | grep <span class="variable">$PORT</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出换行</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="comment"># 重置数据</span></span><br><span class="line"><span class="comment">#iptables -Z INPUT</span></span><br><span class="line"><span class="comment">#iptables -Z OUTPUT</span></span><br><span class="line"><span class="comment">#mv /home/ss_vpn/total.txt /home/ss_vpn/total_logs/$(date -d &quot;today&quot; +&quot;%Y-%m-%d_%H:%M:%S&quot;).txt</span></span><br></pre></td></tr></table></figure><h3 id="重置所有端口的统计数据"><a href="#重置所有端口的统计数据" class="headerlink" title="重置所有端口的统计数据"></a>重置所有端口的统计数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -Z INPUT</span><br><span class="line">iptables -Z OUTPUT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装小飞机 shadowsocks 翻墙服务端 CentOS</title>
      <link href="2020/01/15/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E5%AE%89%E8%A3%85%E5%B0%8F%E9%A3%9E%E6%9C%BA%20shadowsocks%20%E7%BF%BB%E5%A2%99%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>2020/01/15/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E5%AE%89%E8%A3%85%E5%B0%8F%E9%A3%9E%E6%9C%BA%20shadowsocks%20%E7%BF%BB%E5%A2%99%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装小飞机-shadowsocks-翻墙服务端-CentOS"><a href="#安装小飞机-shadowsocks-翻墙服务端-CentOS" class="headerlink" title="安装小飞机 shadowsocks 翻墙服务端 CentOS"></a>安装小飞机 shadowsocks 翻墙服务端 CentOS</h2><p>官网链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;shadowsocks.org&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 py 版本</span></span><br><span class="line">python --version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装shdowsocks</span></span><br><span class="line">pip install shadowsocks</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个配置文件</span> </span><br><span class="line">touch /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;port_password&quot;: &#123;</span><br><span class="line">  &quot;6234&quot;: &quot;jianmianli1&quot;,</span><br><span class="line">  &quot;6235&quot;: &quot;jianmianli2&quot;,</span><br><span class="line">  &quot;6236&quot;: &quot;jianmianli3&quot;,</span><br><span class="line">  &quot;6237&quot;: &quot;jianmianli4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;: 600,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 停止</span><br><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d stop</span><br><span class="line"># 启动</span><br><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 Redis</title>
      <link href="2020/01/14/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Docker-%E5%AE%89%E8%A3%85-Redis/"/>
      <url>2020/01/14/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Docker-%E5%AE%89%E8%A3%85-Redis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>目标：使用Docker安装Redis</p><h6 id="拉取官方最新的Redis镜像"><a href="#拉取官方最新的Redis镜像" class="headerlink" title="拉取官方最新的Redis镜像"></a>拉取官方最新的Redis镜像</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h6 id="运行Redis容器"><a href="#运行Redis容器" class="headerlink" title="运行Redis容器"></a>运行Redis容器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name myredis --restart&#x3D;always -d redis</span><br><span class="line">docker run -p 6379:6379 --name myredis -d redis</span><br></pre></td></tr></table></figure><p><code>docker run</code>命令解析</p><ul><li><code>--name myredis</code> 对Redis容器进行命名</li><li><code>-p 6379:6379</code> 将Redis容器中的6379端口映射到宿主机的6379端口</li><li><code>-v /share/redis/data:/data</code> 将宿主机共享目录中的redis的data目录挂载到Redis容器中的data目录</li><li><code>-d redis</code> 以后台守护进程方式运行Redis</li><li><code>redis-server</code></li><li><code>--appendonly yes</code> 在Redis容器启动redis-server服务器并打开Redis持久化配置</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew安装与卸载</title>
      <link href="2019/12/16/mac%E6%8A%80%E5%B7%A7/Homebrew%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>2019/12/16/mac%E6%8A%80%E5%B7%A7/Homebrew%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Homebrew卸载、安装与更改清华镜像"><a href="#Homebrew卸载、安装与更改清华镜像" class="headerlink" title="Homebrew卸载、安装与更改清华镜像"></a>Homebrew卸载、安装与更改清华镜像</h1><h3 id="关于Homebrew"><a href="#关于Homebrew" class="headerlink" title="关于Homebrew"></a>关于Homebrew</h3><p><strong>macOS（或 Linux）缺失的软件包的管理器</strong></p><p>Homebrew官网：<a href="https://brew.sh/index_zh-cn">https://brew.sh</a></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>如果可以通过运行下面的代码完成安装，请跳过安装的步骤。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="comment">//raw.githubusercontent.com/Homebrew/install/master/install</span></span><br></pre></td></tr></table></figure><p>由于官方安装会出现连不上的问题，因此我们需要把安装指令修改一下，运行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="comment">//raw.githubusercontent.com/Homebrew/install/master/install &gt;&gt; brew_instal</span></span><br></pre></td></tr></table></figure><p>会在终端所在目录下生成一个brew_install的脚本，对它进行编辑，把<code>BREW_REPO</code>和<code>CORE_TAP_REPO</code>（若存在）修改为国内清华镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BREW_REPO = <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span>.freeze</span><br><span class="line">CORE_TAP_REPO = <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span>.freeze</span><br></pre></td></tr></table></figure><p>运行<code>brew_install</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby .&#x2F;brew_install</span><br></pre></td></tr></table></figure><p>如果出现下面对代码，可以不用等待，直接 ctrl+c 进行下一步操作，放心，国内的网是下载不下来的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Tapping homebrew/core</span><br><span class="line">Cloning <span class="keyword">into</span> <span class="string">&#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core&#x27;</span>...</span><br></pre></td></tr></table></figure><p>这就要我们手动创建目录，从清华大学开源镜像 clone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps</span><br><span class="line">mkdir homebrew</span><br><span class="line">cd homebrew </span><br><span class="line">git clone git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-core.git</span><br><span class="line">git clone git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-cask.git</span><br></pre></td></tr></table></figure><p>把<code>homebrew</code>切换为清华镜像 </p><p>参考</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>最后使用<code>brew update</code>应该可以显示homebrew已经成功安装。</p>]]></content>
      
      
      <categories>
          
          <category> mac技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jsbase64</title>
      <link href="2019/08/23/%E5%89%8D%E7%AB%AF/jsbase64/"/>
      <url>2019/08/23/%E5%89%8D%E7%AB%AF/jsbase64/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64Encode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parseStr = CryptoJS.enc.Utf8.parse(str);</span><br><span class="line">  <span class="keyword">const</span> base64 = CryptoJS.enc.Base64.stringify(parseStr);</span><br><span class="line">  <span class="keyword">return</span> base64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64Decode</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> words = CryptoJS.enc.Base64.parse(str);</span><br><span class="line">  <span class="keyword">const</span> parseStr = words.toString(CryptoJS.enc.Utf8);</span><br><span class="line">  <span class="keyword">return</span> parseStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  base64Encode,</span><br><span class="line">  base64Decode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四天 4-4 路由 vuex状态管理</title>
      <link href="2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/4.vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/4.vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vuex 是一个专门为 vue.js 设计的集中式状态管理架构。</p><p>状态？我把它理解为在 data 中的属性需要共享给其他 vue 组件使用的部分，就叫做状态。</p><p>简单的说就是 data 中需要共用的属性。</p><p>比如：我们有几个页面要显示用户名称和用户等级。如果我们不把这些属性设置为状态，那每个页面遇到后，都会到服务器进行查找计算，返回后再显示，或者通过组件传值一层层传递数据，这显然是不合理的。在中大型项目中会有很多共用的数据，所以 vuex 就产生了。</p><h4 id="使用-vuex"><a href="#使用-vuex" class="headerlink" title="使用 vuex"></a>使用 vuex</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. store.js 配置数据仓库实例</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// 状态 vue data</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 变化</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">countAdd</span>(<span class="params">state, data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;vuex 收到通知&quot;</span>, data);</span><br><span class="line">      state.count++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.main.js 引入 并 使用</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="state-访问状态对象"><a href="#state-访问状态对象" class="headerlink" title="state 访问状态对象"></a>state 访问状态对象</h4><p>访问状态对象，它就是我们 Vue 程序中的共享值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过computed的计算属性直接赋值</span></span><br><span class="line">computed:&#123;</span><br><span class="line">  <span class="function"><span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutations-修改状态"><a href="#Mutations-修改状态" class="headerlink" title="Mutations 修改状态"></a>Mutations 修改状态</h4><p>Vuex 提供了<code>commit</code>方法来修改状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># vuex 添加 修改数据的事件方法</span><br><span class="line"><span class="comment">// 变化</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  <span class="comment">// vuex 定义修改数据的方法</span></span><br><span class="line">  <span class="function"><span class="title">countAdd</span>(<span class="params">state,data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;vuex 收到通知&#x27;</span>, data)</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 组件 $store.commit(&#x27;事件&#x27;,&#123;参数&#125;)</span><br><span class="line">methods:&#123;</span><br><span class="line">  <span class="comment">//按钮事件</span></span><br><span class="line">  <span class="function"><span class="title">countAdd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//可行  不推荐 不可追踪数据变化</span></span><br><span class="line">    <span class="comment">// this.$store.state.count++</span></span><br><span class="line">    <span class="comment">//可行 推荐 可追踪数据变化 数据变化统一交给vuex管理</span></span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;countAdd&#x27;</span>,<span class="string">&#x27;点击了add按钮&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四天 4-3 路由 vue-router</title>
      <link href="2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/3.vue-router%E8%B7%AF%E7%94%B1/"/>
      <url>2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/3.vue-router%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>传统的路由是用一些超链接来实现页面切换和跳转</p><p>而vue-router在单页面应用中，则是组件之间的切换，而不是页面之间的跳转</p><p>其本质就是：建立并管理url和对应组件之间的映射关系</p><h3 id="使用-vue-router"><a href="#使用-vue-router" class="headerlink" title="使用 vue-router"></a>使用 vue-router</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.router.js 配置路由实例 router.js文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      <span class="comment">// route level code-splitting</span></span><br><span class="line">      <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">      <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/other&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;other&#x27;</span>,</span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/Other.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.main.js 使用</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 3.组件内部使用路由 在vue组件内配置router-link和router-view</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;!-- &lt;router-link :to&#x3D;&quot;&#123;name:&#39;other&#39;,params:&#123;key:&#39;other&#39;&#125;&#125;&quot;&gt;Other&lt;&#x2F;router-link&gt; --&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;goOther&quot;&gt;Other&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt; </span><br><span class="line">export default &#123;</span><br><span class="line">   methods: &#123;</span><br><span class="line">     goOther()&#123;</span><br><span class="line">       this.$router.push(&#123;</span><br><span class="line">         name:&#39;other&#39;,</span><br><span class="line">         params:&#123;</span><br><span class="line">           jsKey:&#39;Other&#39;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此,一个基本的vue-router已经完成.这里只是简单示范,了解其实现步骤.<br>总结一下编写vue路由时,记住要做这三类事:<br>1,准备工作: 在main.js中引入router.js挂载到Vue实例中.<br>2,配置路由实例(重点): 在router.js中引入Vue,vue-router,配置路由实例.<br>3,组件内配置: 就是配置router-link和router-view.</p><h3 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h3><h6 id="params传参"><a href="#params传参" class="headerlink" title="params传参"></a>params传参</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 传参</span><br><span class="line"><span class="comment">// 1. router-link 携带参数</span></span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;name:&#x27;other&#x27;,params:&#123;key:&#x27;other&#x27;&#125;&#125;&quot;</span>&gt;Other&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.js api 携带参数</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  name:<span class="string">&#x27;other&#x27;</span>,</span><br><span class="line">  params:&#123;</span><br><span class="line">    jsKey:<span class="string">&#x27;Other&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"># 取值</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="built_in">this</span>.$route.params</span><br><span class="line">  <span class="built_in">console</span>.log(params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四天 4-2 调试工具 vue-devtools</title>
      <link href="2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/2.vue-devtools%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/2.vue-devtools%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="安装浏览器拓展插件"><a href="#安装浏览器拓展插件" class="headerlink" title="安装浏览器拓展插件"></a>安装浏览器拓展插件</h5><p>devtools 是基于 chrome 浏览器的一款调试 vue.js 应用的开发者浏览器扩展，可以在浏览器开发者工具下调试代码。</p><p>GitHub 主页：<a href="https://github.com/vuejs/vue-devtools">https://github.com/vuejs/vue-devtools</a></p><p>Chrome 商店地址（需翻墙）：<a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN">https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN</a></p>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四天 4-1 生命周期</title>
      <link href="2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/1.%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2019/08/09/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC4%E5%A4%A9/1.%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、什么是生命周期"><a href="#一、什么是生命周期" class="headerlink" title="一、什么是生命周期"></a>一、什么是生命周期</h3><p>生命周期指的是一个对象的生老病死。</p><ul><li>1、动物的生命周期：从初生到死亡。</li><li>2、产品的生命周期：从开始到淘汰。</li></ul><p>Vue 的生命周期指的是 Vue 组件的生命周期，从组件创建到销毁。</p><h3 id="二、Vue-的生命周期"><a href="#二、Vue-的生命周期" class="headerlink" title="二、Vue 的生命周期"></a>二、Vue 的生命周期</h3><p>先来看官方的 Vue 生命周期的图</p><p><img src="http://pic1.zhoujie16.cn/20190803232541.png" alt="img"></p><p>这幅图非常详细的介绍了 Vue 的生命周期，刚开始看，可能有点懵，没关系，随着慢慢的深入，回过头来再看这幅图，就会豁然开朗</p><h4 id="总的来说-Vue-的生命周期包括四个状态"><a href="#总的来说-Vue-的生命周期包括四个状态" class="headerlink" title="总的来说 Vue 的生命周期包括四个状态"></a>总的来说 Vue 的生命周期包括四个状态</h4><p>1、creating 状态–vue 实例被创建的过程 </p><p>2、mounting 状态–挂到到真实的 DOM 节点 </p><p>3、updating 状态–如果 data 中的数据改变就会触发对应组件的重新渲染 </p><p>4、destroying 状态–实例销毁</p><h4 id="Vue-生命周期方法和介绍"><a href="#Vue-生命周期方法和介绍" class="headerlink" title="Vue 生命周期方法和介绍"></a>Vue 生命周期方法和介绍</h4><p>上面个四个状态对应 8 个方法</p><table><thead><tr><th align="left">方法名</th><th align="left">状态</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">creating 状态</td><td align="left">实例创建之前调用</td></tr><tr><td align="left">created</td><td align="left">creating 状态</td><td align="left">实例创建成功，此时 data 中的数据显示出来了</td></tr><tr><td align="left">beforeMount</td><td align="left">mounting 状态</td><td align="left">数据中的 data 在模版中先占一个位置</td></tr><tr><td align="left">mounted</td><td align="left">mounting 状态</td><td align="left">模版中的 data 数据直接显示出来了</td></tr><tr><td align="left">beforeUpdate</td><td align="left">updating 状态</td><td align="left">当 data 数据发生变化调用，发生在虚拟 DOM 重新渲染和打补丁之前</td></tr><tr><td align="left">updated</td><td align="left">updating 状态</td><td align="left">数据更改导致的虚拟 DOM 重新渲染和打补丁</td></tr><tr><td align="left">beforeDestroy</td><td align="left">destroying 状态</td><td align="left">在 vue 实例销毁之前调用，此时实例任然可用</td></tr><tr><td align="left">destroyed</td><td align="left">destroying 状态</td><td align="left">在 vue 实例销毁之后调用，vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</td></tr></tbody></table><h3 id="三、实例验证（上代码）"><a href="#三、实例验证（上代码）" class="headerlink" title="三、实例验证（上代码）"></a>三、实例验证（上代码）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;Hello World&quot;,</span><br><span class="line">      timer: null</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate: function() &#123;</span><br><span class="line">    console.log(&quot;1-beforeCreate 创建之前&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    console.log(&quot;2-created 创建完成&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount: function() &#123;</span><br><span class="line">    console.log(&quot;3-beforeMount 挂载之前&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: function() &#123;</span><br><span class="line">    console.log(&quot;4-mounted 已经挂载&quot;);</span><br><span class="line">    this.timer &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;setInterval&quot;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate: function() &#123;</span><br><span class="line">    console.log(&quot;5-beforeUpdate 数据更新前&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated: function() &#123;</span><br><span class="line">    console.log(&quot;6-updated 数据更新后&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy: function() &#123;</span><br><span class="line">    console.log(&quot;7-beforeDestroy 销毁之前&quot;);</span><br><span class="line">    clearInterval(this.timer);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed: function() &#123;</span><br><span class="line">    console.log(&quot;8-destroyed 销毁之后&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="四、了解生命周期的作用"><a href="#四、了解生命周期的作用" class="headerlink" title="四、了解生命周期的作用"></a>四、了解生命周期的作用</h3><p>那么这些生命周期有什么用呢？我们以在不同的生命周期方法中做不同的操作处理，比如：</p><p>**PS:**一般情况下我们在 <code>beforecreate</code>方法中可以加 Loading 事件，在 <code>created</code>方法中结束 Loading，并且还可以在此方法中做一些初始化操作，在 <code>mounted</code>方法中进行发起异步服务端请求。当然，如果你想页面没有加载完成就请求数据那么在 <code>created</code>方法请求数据也没有什么问题，可以在 <code>beforeDestroy</code>方法中弹出确认删除，<code>destroyed</code>中清除相关数据达到资源的有效利用</p>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三天 3-1 vue-cli的使用</title>
      <link href="2019/08/08/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC3%E5%A4%A9/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2019/08/08/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC3%E5%A4%A9/vue-cli%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们之前学习的代码都是写在一个html文件中的，如果我们的大型项目的代码向这样写的话，肯定是不可维护的。</span><br><span class="line">所以在真实的项目开发中，我们会借助 webpack 打包工具，帮助我们构建大型项目的开发目录。在开发完成之后，我们会进行打包的操作，帮助我们把代码生成一个线上可运行的代码。</span><br><span class="line">如果让每一个开发人员自己配置webpack开发环境，对一个开发者来说，是一个不小的挑战。vue官方也考录到了这个因素，所以vue官方提供了一个脚手架工具，他的名字就叫vue-cli。通过这个脚手架我们可以构建一个标准的vue工程化的项目。</span><br><span class="line">同时，这个工具自带了webpack的各种配置，用这个工具可以迅速上手工程化项目的开发。使用它也不会有任何的技术门槛。可以快速的直接进入开发环节之中。</span><br></pre></td></tr></table></figure><h3 id="认识-vue-cli"><a href="#认识-vue-cli" class="headerlink" title="认识 vue-cli"></a>认识 vue-cli</h3><p>我们这一节会学习到</p><ul><li>快速创建工程的两种方法</li><li>工程化项目的目录</li></ul><h4 id="安装-vue-cli-工具"><a href="#安装-vue-cli-工具" class="headerlink" title="安装 vue-cli 工具"></a>安装 vue-cli 工具</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h4 id="创建-vue-项目"><a href="#创建-vue-项目" class="headerlink" title="创建 vue 项目"></a>创建 vue 项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个vue项目 (文件名：小写字母加短横线)</span><br><span class="line">vue create hello-vue</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 会有2个选项  default:默认  Manually:手动选择</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了给大家演示 选择 Manually 手动创建</span></span><br><span class="line">Vue CLI v3.10.0</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">  default (babel, eslint)</span><br><span class="line">❯ Manually select features</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回车</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会有很多选项  空格切换是否选择</span></span><br><span class="line">? Check the features needed for your project:</span><br><span class="line"> ◉ Babel#es6转es5</span><br><span class="line"> ◯ TypeScript</span><br><span class="line"> ◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◯ Router#路由管理</span><br><span class="line"> ◯ Vuex#数据管理</span><br><span class="line"> ◯ CSS Pre-processors# css预处理</span><br><span class="line"> ◯ Linter / Formatter# 代码格式校验</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回车</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Router配置 问我们是否使用历史</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 敲Y 回车</span></span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in</span><br><span class="line"> production) (Y/n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择了 CSS Pre-processors 类型</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选SCSS或LESS 回车</span></span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by</span><br><span class="line"> default): (Use arrow keys)</span><br><span class="line">❯ Sass/SCSS (with dart-sass)</span><br><span class="line">  Sass/SCSS (with node-sass)</span><br><span class="line">  Less</span><br><span class="line">  Stylus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择 Linter / Formatter 规则</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们选 Standard 标准的配置</span></span><br><span class="line">? Pick a linter / formatter config:</span><br><span class="line">  ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">❯ ESLint + Standard config</span><br><span class="line">  ESLint + Prettier</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择 Linter / Formatter 校验时机， 保存时 还是更新时 对代码进行检查</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们选保存时</span></span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt;</span><br><span class="line">to invert selection)</span><br><span class="line">❯◉ Lint on save</span><br><span class="line"> ◯ Lint and fix on commit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你更喜欢将Babel、PostCSS、ESLint等配置放在哪里</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选第一个 专用配置文件</span></span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow</span><br><span class="line">keys)</span><br><span class="line">❯ In dedicated config files</span><br><span class="line">  In package.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 询问是否将当前设置保存为 未来项目使用的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 敲N 回车</span></span><br><span class="line">? Save this as a preset for future projects? (y/N)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 包管理器使用 yarn 还是 npm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选 yarn</span></span><br><span class="line">? Pick the package manager to use when installing dependencies: (Use arrow keys)</span><br><span class="line">❯ Use Yarn</span><br><span class="line">  Use NPM</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择完成  接下来交给 vue-cli 完成</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 完成后 运行项目</span></span><br><span class="line">yarn serve</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行成功</span></span><br><span class="line">App running at:</span><br><span class="line">- Local:   http://localhost:8081/</span><br><span class="line">- Network: http://192.168.1.101:8081/</span><br><span class="line"></span><br><span class="line">Note that the development build is not optimized.</span><br><span class="line">To create a production build, run yarn build.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开 http://localhost:8081</span></span><br></pre></td></tr></table></figure><h4 id="图形界面创建-Vue-项目"><a href="#图形界面创建-Vue-项目" class="headerlink" title="图形界面创建 Vue 项目"></a>图形界面创建 Vue 项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 终端输入</span></span><br><span class="line">vue ui</span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功</span></span><br><span class="line">🚀  Starting GUI...</span><br><span class="line">🌠  Ready on http://localhost:8000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们打开这个页面</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">页面下方，我们可以看到当前目录的位置</span><br><span class="line">点击create创建项目 点击在此创建新的项目</span><br><span class="line">选择项目名称和包管理工具</span><br><span class="line">其他的用默认配置项</span><br><span class="line">点击下一步 流程和命令行工具类似</span><br><span class="line">选择手动配置  看一下这个工具给大家添加了哪些配置</span><br><span class="line">选择完成后 点击创建</span><br><span class="line">这个创建和我们用命令行创建的项目实际上是一样的</span><br></pre></td></tr></table></figure><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>public 公共资源</p><p>src 源文件</p><p>node_modules 前端开发依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们看一下项目的入口在哪里</span><br><span class="line">public&#x2F;index 文件 里面有个 #id&#x3D;app 的div</span><br><span class="line">main.js 里把整个vue对象 挂载到app上来</span><br></pre></td></tr></table></figure><p>views 页面的视图</p><p>components 组件</p><p>package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个文件，就是对项目解释说明的文件</span><br><span class="line">scripts 运行时所需要的脚本命令  npm 和 yarn 可使用的命令</span><br><span class="line">dependencies  打包时用到的依赖</span><br><span class="line">devDependencies 开发时用到的依赖</span><br></pre></td></tr></table></figure><h3 id="vue-配置文件"><a href="#vue-配置文件" class="headerlink" title="vue 配置文件"></a>vue 配置文件</h3><p>项目根目录 创建 <code>vue.config.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 修改端口号</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: 9099</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二天 2-4 npm介绍</title>
      <link href="2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/4.node%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/4.node%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>nodejs已经集成了npm，安装了node就有了npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。</span><br></pre></td></tr></table></figure><h3 id="npm能干什么"><a href="#npm能干什么" class="headerlink" title="npm能干什么"></a>npm能干什么</h3><ul><li>从NPM服务器下载别人编写的第三方包到本地使用</li><li>从NPM服务器下载并安装别人编写的命令行程序到本地使用</li><li>将自己编写的包或命令行程序上传到NPM服务器供别人使用</li></ul><h3 id="npm切换镜像源"><a href="#npm切换镜像源" class="headerlink" title="npm切换镜像源"></a>npm切换镜像源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置镜像地址 为国内的淘宝镜像</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置后可通过下面方式来验证是否成功</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 还原镜像地址</span></span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><h2 id="yarn介绍"><a href="#yarn介绍" class="headerlink" title="yarn介绍"></a>yarn介绍</h2><p>Yarn 是 Facebook, Google, Exponent 和 Tilde 开发的一款新的 JavaScript 包管理工具。</p><p>官方文档：它的目的是解决这些团队使用 npm 面临的少数问题，即：</p><p>安装的时候无法保证速度/一致性<br>安全问题，因为 npm 安装时允许运行代码</p><p>Yarn 同样是一个从 npm 注册源获取模块的新的 CLI 客户端。注册的方式不会有任何变化 —— 你同样可以正常获取与发布包。</p><h3 id="Yarn的优点？"><a href="#Yarn的优点？" class="headerlink" title="Yarn的优点？"></a>Yarn的优点？</h3><ul><li><strong>速度快</strong>。速度快主要来自以下两个方面：</li></ul><ol><li>并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm 是按照队列执行每个 package，也就是说必须要等到当前 package 安装完成之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。</li><li>离线模式：如果之前已经安装过一个软件包，用Yarn再次安装时之间从缓存中获取，就不用像npm那样再从网络下载了。</li></ol><ul><li>安装<strong>版本统一</strong>：为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）yarn.lock 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。npm 其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 npm shrinkwrap 命令。这个命令将会生成一个锁定文件，在执行 npm install 的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm 和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过 shrinkwrap 命令生成 npm-shrinkwrap.json 文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。</li><li><strong>更简洁的输出</strong>：npm 的输出信息比较冗长。在执行 npm install <package> 的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn 简洁太多：默认情况下，结合了 emoji直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。</li><li><strong>多注册来源处理：</strong>所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。</li><li><strong>更好的语义化</strong>： yarn改变了一些npm命令的名称，比如 yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总之：yarn 和 npm 的功能是完全一样的，yarn 比 npm 好用</span><br></pre></td></tr></table></figure><h3 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h3><p>参照文档 <a href="https://www.yarnpkg.com/zh-Hans/docs/install#mac-stable">安装yarn</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">npm install yarn -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装成功后输入 yarn -v 会显示正确的版本号</span></span><br><span class="line">yarn -v</span><br></pre></td></tr></table></figure><h3 id="yarn-切换镜像源"><a href="#yarn-切换镜像源" class="headerlink" title="yarn 切换镜像源"></a>yarn 切换镜像源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看一下当前源</span></span><br><span class="line">yarn config get registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换为淘宝源</span></span><br><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 还原默认地址</span></span><br><span class="line">yarn config set registry https://registry.yarnpkg.com</span><br></pre></td></tr></table></figure><h3 id="yarn常用命令"><a href="#yarn常用命令" class="headerlink" title="yarn常用命令"></a>yarn常用命令</h3><p><strong>添加依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加依赖包</span></span><br><span class="line">yarn add [package]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加依赖包 指定版本</span></span><br><span class="line">yarn add [package]@[version]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加依赖包 全局</span></span><br><span class="line">yarn global add [package]</span><br></pre></td></tr></table></figure><p><strong>将依赖项添加到不同依赖项类别</strong></p><p>添加到 <code>devDependencies</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add [package] --dev</span><br></pre></td></tr></table></figure><p><strong>升级依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br></pre></td></tr></table></figure><p><strong>移除依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure><p><strong>安装项目的全部依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn 或者 yarn install</span><br></pre></td></tr></table></figure><h2 id="yarn-与-npm-命令比较"><a href="#yarn-与-npm-命令比较" class="headerlink" title="yarn 与 npm 命令比较"></a>yarn 与 npm 命令比较</h2><table><thead><tr><th align="left">npm</th><th align="left">Yarn</th></tr></thead><tbody><tr><td align="left"><code>npm install</code></td><td align="left"><code>yarn install</code></td></tr><tr><td align="left"><code>npm install [package]</code></td><td align="left"><code>yarn add [package]</code></td></tr><tr><td align="left"><code>npm install [package] --save-dev</code></td><td align="left"><code>yarn add [package] --dev</code></td></tr><tr><td align="left"><code>npm install [package] --global</code></td><td align="left"><code>yarn global add [package]</code></td></tr><tr><td align="left"><code>npm update --global</code></td><td align="left"><code>yarn global upgrade</code></td></tr><tr><td align="left"><code>npm uninstall [package]</code></td><td align="left"><code>yarn remove [package]</code></td></tr><tr><td align="left"><code>npm cache clean</code></td><td align="left"><code>yarn cache clean [package]</code></td></tr><tr><td align="left"><code>rm -rf node_modules &amp;&amp; npm install</code></td><td align="left"><code>yarn upgrade</code></td></tr></tbody></table><h3 id="安装vue脚手架"><a href="#安装vue脚手架" class="headerlink" title="安装vue脚手架"></a>安装vue脚手架</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以使用下列任一命令安装这个新的包</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>安装之后，你就可以在命令行中访问 <code>vue</code> 命令。你可以通过简单运行 <code>vue</code>，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二天 2-3 nvm的使用</title>
      <link href="2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/3.nvm/"/>
      <url>2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/3.nvm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="nvm是什么"><a href="#nvm是什么" class="headerlink" title="nvm是什么"></a>nvm是什么</h3><p>nvm (Node Version Manager) 是Nodejs版本管理器，可对不同的node版本快速进行切换。</p><h3 id="为什么要用NVM？"><a href="#为什么要用NVM？" class="headerlink" title="为什么要用NVM？"></a>为什么要用NVM？</h3><p>基于node的工具和项目越来越多，但是每个项目使用的node版本可能不一致，就会出现一些奇怪的问题。比如：自己电脑安装的是最新版的node,接手的项目使用的是低版本的node。那么我只有切换到低版本的node再进行操作才不会报错。而NVM就是用来帮助我们快速切换node版本的。他可以方便的在同一台设备上进行多个node版本之间切换，而这个正是nvm的价值所在。</p><h3 id="windows系统下安装NVM"><a href="#windows系统下安装NVM" class="headerlink" title="windows系统下安装NVM"></a>windows系统下安装NVM</h3><p>nvm-windows 最新下载地址：<br><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>下载 nvm-setup.zip 文件</p><p>请注意： 在安装nvm for windows之前，你需要卸载任何现有版本的node.js。并且需要删除现有的nodejs安装目录（例如：”C:\Program Files\nodejs’，你还需要删除现有的npm安装位置（例如“C:\Users\admin\AppData\Roaming\npm”），以便正确使用nvm安装位置。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装exe文件，之后，按照提示完成安装即可，安装完成后可以检测一下是否安装成功<br>在命令行输入<code>nvm</code>，如果出现nvm版本号和一系列帮助指令，则说明nvm安装成功；</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示可下载版本的列表</span></span><br><span class="line">nvm list available</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的node</span></span><br><span class="line">nvm install &lt;version&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看目前已经安装的版本</span></span><br><span class="line">nvm list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到使用指定的nodejs版本</span></span><br><span class="line">nvm use [version]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载指定版本的nodejs</span></span><br><span class="line">nvm uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二天 2-2 vue中ES6常用语法</title>
      <link href="2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/2.ES6%E5%9F%BA%E7%A1%80/"/>
      <url>2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/2.ES6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>上面代码中，计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">function func() &#123;</span><br><span class="line">  let a &#x3D; 10;</span><br><span class="line">  var a &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">function func() &#123;</span><br><span class="line">  let a &#x3D; 10;</span><br><span class="line">  let a &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const PI &#x3D; 3.1415;</span><br><span class="line">PI &#x2F;&#x2F; 3.1415</span><br><span class="line"></span><br><span class="line">PI &#x3D; 3;</span><br><span class="line">&#x2F;&#x2F; TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const foo;</span><br><span class="line">&#x2F;&#x2F; SyntaxError: Missing initializer in const declaration</span><br></pre></td></tr></table></figure><h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><p>以前，为变量赋值，只能直接指定值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; 1;</span><br><span class="line">let b &#x3D; 2;</span><br><span class="line">let c &#x3D; 3;</span><br></pre></td></tr></table></figure><p>ES6 允许写成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let [a, b, c] &#x3D; [1, 2, 3];</span><br></pre></td></tr></table></figure><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p><p>如果解构不成功，变量的值就等于<code>undefined</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [foo] &#x3D; [];</span><br><span class="line">let [bar, foo] &#x3D; [1];</span><br></pre></td></tr></table></figure><p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code></p><p>解构赋值允许指定默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let [foo &#x3D; true] &#x3D; [];</span><br><span class="line">foo &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">let [x, y &#x3D; &#39;b&#39;] &#x3D; [&#39;a&#39;]; &#x2F;&#x2F; x&#x3D;&#39;a&#39;, y&#x3D;&#39;b&#39;</span><br><span class="line">let [x, y &#x3D; &#39;b&#39;] &#x3D; [&#39;a&#39;, undefined]; &#x2F;&#x2F; x&#x3D;&#39;a&#39;, y&#x3D;&#39;b&#39;</span><br></pre></td></tr></table></figure><h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><p>解构不仅可以用于数组，还可以用于对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let &#123; foo, bar &#125; &#x3D; &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;;</span><br><span class="line">foo &#x2F;&#x2F; &quot;aaa&quot;</span><br><span class="line">bar &#x2F;&#x2F; &quot;bbb&quot;</span><br></pre></td></tr></table></figure><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><p>如果解构失败，变量的值等于<code>undefined</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &#123; baz &#125; &#x3D; &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;;</span><br><span class="line">baz &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><p>对象的解构也可以指定默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var &#123;x &#x3D; 3&#125; &#x3D; &#123;&#125;;</span><br><span class="line">x &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">var &#123;x, y &#x3D; 5&#125; &#x3D; &#123;x: 1&#125;;</span><br><span class="line">x &#x2F;&#x2F; 1</span><br><span class="line">y &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure><h3 id="字符串拓展"><a href="#字符串拓展" class="headerlink" title="字符串拓展"></a>字符串拓展</h3><p>传统的 JavaScript 语言，输出模板通常是这样写的（下面使用了 jQuery 的方法）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;#result&#39;).append(</span><br><span class="line">  &#39;There are &lt;b&gt;&#39; + basket.count + &#39;&lt;&#x2F;b&gt; &#39; +</span><br><span class="line">  &#39;items in your basket, &#39; +</span><br><span class="line">  &#39;&lt;em&gt;&#39; + basket.onSale +</span><br><span class="line">  &#39;&lt;&#x2F;em&gt; are on sale!&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;#result&#39;).append(&#96;</span><br><span class="line">  There are &lt;b&gt;$&#123;basket.count&#125;&lt;&#x2F;b&gt; items</span><br><span class="line">   in your basket, &lt;em&gt;$&#123;basket.onSale&#125;&lt;&#x2F;em&gt;</span><br><span class="line">  are on sale!</span><br><span class="line">&#96;);</span><br></pre></td></tr></table></figure><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><h3 id="函数的拓展"><a href="#函数的拓展" class="headerlink" title="函数的拓展"></a>函数的拓展</h3><p>传统的 JavaScript 语言，不能直接为函数的参数指定默认值，只能采用变通的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function log(x, y) &#123;</span><br><span class="line">  y &#x3D; y || &#39;World&#39;;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function log(x, y &#x3D; &#39;World&#39;) &#123;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。</p><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; (v) &#x3D;&gt; &#123;</span><br><span class="line">console.log(v)</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">var f &#x3D; function (v) &#123;</span><br><span class="line">  console.log(v);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; () &#x3D;&gt; 5;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">var f &#x3D; function () &#123; return 5 &#125;;</span><br><span class="line"></span><br><span class="line">var sum &#x3D; (num1, num2) &#x3D;&gt; num1 + num2;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">var sum &#x3D; function(num1, num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function foo(&#123;x, y &#x3D; 5&#125;) &#123;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) &#x2F;&#x2F; undefined 5</span><br><span class="line">foo(&#123;x: 1&#125;) &#x2F;&#x2F; 1 5</span><br><span class="line">foo(&#123;x: 1, y: 2&#125;) &#x2F;&#x2F; 1 2</span><br><span class="line">foo() &#x2F;&#x2F; TypeError: Cannot read property &#39;x&#39; of undefined</span><br></pre></td></tr></table></figure><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符（spread）是三个点（<code>...</code>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(...[1, 2, 3])</span><br><span class="line">&#x2F;&#x2F; 1 2 3</span><br><span class="line"></span><br><span class="line">console.log(1, ...[2, 3, 4], 5)</span><br><span class="line">&#x2F;&#x2F; 1 2 3 4 5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 数组的拼接</span><br><span class="line">let arr1 &#x3D; [1,2,3]</span><br><span class="line">let arr2 &#x3D; [4,5,6]</span><br><span class="line">let arr3 &#x3D; [...arr1, ...arr2]</span><br><span class="line">console.log(arr3)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二天 2-1 计算属性与侦听器</title>
      <link href="2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/1.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BE%A6%E5%90%AC%E5%99%A8/"/>
      <url>2019/08/07/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC2%E5%A4%A9/1.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BE%A6%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="计算属性与侦听器"><a href="#计算属性与侦听器" class="headerlink" title="计算属性与侦听器"></a>计算属性与侦听器</h2><ul><li>计算属性： computed</li><li>侦听器：watch</li><li>使用场景介绍</li></ul><p>watch 只能监听一个变量发生变化</p><p>computed 可以监听很多个变量，这些变量一定要在vue实例里面。</p>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一天 1-4 组件</title>
      <link href="2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/4.%E7%BB%84%E4%BB%B6%E5%85%A5%E9%97%A8/"/>
      <url>2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/4.%E7%BB%84%E4%BB%B6%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>前言：component 组件是Vue学习的重点、重点、重点，重要的事情说三遍。所以你必须学好Vue component。其实组件就是制作自定义的标签，这些标签在HTML中是没有的。</p><p>一个组件由 template、data、computed、methods等选项组成。需要注意：</p><ul><li>template 的 DOM 结构必须有根元素</li><li>data 必须是函数，数据通过 return 返回出去</li></ul><h4 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h4><p>全局化就是在构造器的外部用Vue.component来注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;root&quot;&gt;</span><br><span class="line">  &lt;my-component&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F;全局注册组件</span><br><span class="line">  var myComponent &#x3D; &#123;</span><br><span class="line">    template: &#39;&lt;div&gt; &#123;&#123; msg &#125;&#125; &lt;&#x2F;div&gt;&#39;,</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#39;我是组件&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Vue.component(&#39;my-component&#39;, myComponent)</span><br><span class="line"></span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#root&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#39;hello vue&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h4><p>局部注册组件局部注册组件和全局注册组件是向对应的，局部注册的组件只能在组件注册的作用域里进行使用，其他作用域使用无效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;root&quot;&gt;</span><br><span class="line">  &lt;test-component&gt;&lt;&#x2F;test-component&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var testComponent &#x3D; &#123;</span><br><span class="line">    template:&#39;&lt;div&gt; &#123;&#123; msg &#125;&#125; &lt;&#x2F;div&gt;&#39;,</span><br><span class="line">    data:function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#39;我是局部组件&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#root&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#39;hello vue&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      &#39;test-component&#39;: testComponent</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传值：props-属性"><a href="#组件传值：props-属性" class="headerlink" title="组件传值：props 属性"></a>组件传值：props 属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;root&quot;&gt;</span><br><span class="line">  &lt;my-component :msg&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var myComponent &#x3D; &#123;</span><br><span class="line">    template: &#39;&lt;div&gt; &#123;&#123; msg &#125;&#125; &lt;&#x2F;div&gt;&#39;,</span><br><span class="line">    props: [&#39;msg&#39;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.component(&#39;my-component&#39;, myComponent)</span><br><span class="line">  </span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#root&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#39;hello vue&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="向组件传递数据"><a href="#向组件传递数据" class="headerlink" title="向组件传递数据"></a>向组件传递数据</h3><p>组件不仅要把模板的内容进行复用，更重要的是组件间进行通信。</p><p>父组件用<code>props</code>向子组件传递数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;root&quot;&gt;</span><br><span class="line">  &lt;my-component :msg&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var myComponent &#x3D; &#123;</span><br><span class="line">    template: &#39;&lt;div&gt; &#123;&#123; msg &#125;&#125; &lt;&#x2F;div&gt;&#39;,</span><br><span class="line">    props: [&#39;msg&#39;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.component(&#39;my-component&#39;, myComponent)</span><br><span class="line">  </span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#root&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#39;hello vue&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一天 1-3 指令</title>
      <link href="2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/3.Vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/3.Vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li>解释：指令 (Directives) 是带有 <code>v-</code> 前缀的特殊属性</li><li>作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li>v-if  v-else</li><li>v-show</li><li>v-for</li><li>v-text  v-html</li><li>v-on</li><li>v-model</li><li>v-bind</li></ul><h3 id="v-if-v-else-v-show-指令"><a href="#v-if-v-else-v-show-指令" class="headerlink" title="v-if v-else v-show 指令"></a>v-if v-else v-show 指令</h3><ul><li>作用：用来判断是否加载html的DOM</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;isLogin&quot;&gt;你好，Vue&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><ul><li>作用：用来判断是否显示html的DOM</li><li>解释：调整css中display属性，DOM已经加载，只是CSS控制没有显示出来</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show&#x3D;&quot;isLogin&quot;&gt;你好，Vue&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-和-v-show的区别："><a href="#v-if-和-v-show的区别：" class="headerlink" title="v-if  和 v-show的区别："></a>v-if  和 v-show的区别：</h3><ul><li>v-if： 动态的向DOM树内添加或者删除DOM元素，可以减轻页面渲染压力，在需要时加载，有更高的切换消耗。</li><li>v-show：调整css dispaly属性控制显隐，可以使客户端操作更加流畅，有更高的初始渲染消耗。</li><li>如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</li></ul><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ul><li>作用：基于源数据多次渲染元素或模板块</li><li>说明：v-for指令是循环渲染一组data中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且item是数组元素迭代的别名。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 基础用法 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">      &#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  var app&#x3D;new Vue(&#123;</span><br><span class="line">    el:&#39;#app&#39;,</span><br><span class="line">    data:&#123;</span><br><span class="line">      items:[20,23,18,65,32,19,54,56,41]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 对象循环输出 --&gt;</span><br><span class="line">&lt;!-- item 为当前项，index 为索引 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li v-for&#x3D;&quot;(item, index) in students&quot; :key&#x3D;&quot;item.name&quot;&gt;</span><br><span class="line">       &#123;&#123;item.name&#125;&#125; - &#123;&#123;item.age&#125;&#125;</span><br><span class="line">   &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  var app&#x3D;new Vue(&#123;</span><br><span class="line">    el:&#39;#app&#39;,</span><br><span class="line">    data:&#123;</span><br><span class="line">      students:[</span><br><span class="line">        &#123;name:&#39;jspang&#39;,age:32&#125;,</span><br><span class="line">        &#123;name:&#39;Panda&#39;,age:30&#125;,</span><br><span class="line">        &#123;name:&#39;PanPaN&#39;,age:21&#125;,</span><br><span class="line">        &#123;name:&#39;King&#39;,age:45&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for-的-key属性"><a href="#v-for-的-key属性" class="headerlink" title="v-for 的 key属性"></a>v-for 的 key属性</h3><ul><li>推荐：使用 <code>v-for</code> 的时候提供 <code>key</code> 属性，以获得性能提升。</li><li>说明：使用 key，VUE会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li><li>官方解释：当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。</li></ul><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。理想的 key 值是每项都有的且唯一的 id。</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>作用：绑定事件</li><li>语法：<code>v-on:click=&quot;say&quot;</code> or <code>v-on:click=&quot;say(&#39;参数&#39;, $event)&quot;</code></li><li>说明：v-on 就是监听事件，可以用v-on指令监听DOM事件来触发一些javascript代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click&#x3D;&quot;doSomething&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click&#x3D;&quot;doSomething&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!-- 方法传参 --&gt;</span><br><span class="line">&lt;a @click&#x3D;&quot;doSomething(&#39;123&#39;)&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 2 创建 Vue 的实例对象</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      &#x2F;&#x2F; methods属性用来给vue实例提供方法（事件）</span><br><span class="line">      methods: &#123;</span><br><span class="line">        doSomething: function(str) &#123;</span><br><span class="line">          &#x2F;&#x2F;接受参数，并输出</span><br><span class="line">          console.log(str);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li><code>.stop</code> 阻止冒泡，调用 event.stopPropagation()</li><li><code>.prevent</code> 阻止默认事件，调用 event.preventDefault()</li><li><code>.capture</code> 添加事件侦听器时使用事件<code>捕获</code>模式</li><li><code>.self</code> 只当事件在该元素本身（比如不是子元素）触发时触发回调</li><li><code>.once</code> 事件只触发一次</li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li>作用：在表单元素上创建双向数据绑定</li><li>说明：监听用户的输入事件以更新数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 一个最简单的双向数据绑定代码 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;原始文本信息：&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;h3&gt;文本框&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">  el:&#39;#app&#39;,</span><br><span class="line">  data:&#123;</span><br><span class="line">       message:&#39;hello Vue!&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>.lazy：取代 input事件 监听 change 事件。</li><li>.number：输入字符串转为数字。</li><li>.trim：输入去掉首尾空格。</li></ul><h2 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a>v-bind 指令</h2><ul><li>说明：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</li><li>语法：<code>v-bind:title=&quot;msg&quot;</code></li><li>简写：<code>:title=&quot;msg&quot;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href&#x3D;&quot;url&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 2 创建 Vue 的实例对象</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  &#x2F;&#x2F; el 用来指定vue挂载到页面中的元素，值是：选择器</span><br><span class="line">  &#x2F;&#x2F; 理解：用来指定vue管理的HTML区域</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  &#x2F;&#x2F; 数据对象，用来给视图中提供数据的</span><br><span class="line">  data: &#123;</span><br><span class="line">      url: &#39;http:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="绑定CSS样式-class-style"><a href="#绑定CSS样式-class-style" class="headerlink" title="绑定CSS样式 class style"></a>绑定CSS样式 class style</h3><ul><li>说明：这两个都是HTML元素的属性，使用<code>v-bind</code>，只需要通过表达式计算出字符串结果即可</li><li>表达式的类型：字符串、数组、对象</li></ul><p>在工作中我们经常使用v-bind来绑定css样式：</p><p>在绑定CSS样式是，绑定的值必须在vue中的data属性中进行声明。</p><p> 1、直接绑定class样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;className&quot;&gt;1、绑定classA&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>2、绑定classA并进行判断，在isOK为true时显示样式，在isOk为false时不显示样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;&#123;classA:isOk&#125;&quot;&gt;2、绑定class中的判断&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>3、绑定class中的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;[classA,classB]&quot;&gt;3、绑定class中的数组&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>4、绑定class中使用三元表达式判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;isOk?classA:classB&quot;&gt;4、绑定class中的三元表达式判断&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>5、绑定style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style&#x3D;&quot;&#123;color:red,fontSize:font&#125;&quot;&gt;5、绑定style&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>6、用对象绑定style样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style&#x3D;&quot;styleObject&quot;&gt;6、用对象绑定style样式&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> var app &#x3D; new Vue(&#123;</span><br><span class="line">   el:&#39;#app&#39;,</span><br><span class="line">   data:&#123;</span><br><span class="line">    styleObject:&#123;</span><br><span class="line">      fontSize:&#39;24px&#39;,</span><br><span class="line">      color:&#39;green&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他指令（很少用）"><a href="#其他指令（很少用）" class="headerlink" title="其他指令（很少用）"></a>其他指令（很少用）</h2><h3 id="提升用户体验：v-cloak"><a href="#提升用户体验：v-cloak" class="headerlink" title="提升用户体验：v-cloak"></a>提升用户体验：v-cloak</h3><ul><li>在vue渲染完指定的整个DOM后才进行显示。它必须和CSS样式一起使用。</li><li>防止刷新页面，网速慢的情况下出现等数据格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-cloak&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  </span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="提升性能：v-pre"><a href="#提升性能：v-pre" class="headerlink" title="提升性能：v-pre"></a>提升性能：v-pre</h3><ul><li>说明：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><h3 id="提升性能：v-once"><a href="#提升性能：v-once" class="headerlink" title="提升性能：v-once"></a>提升性能：v-once</h3><ul><li>说明：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-once&gt;This will never change: &#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一天 1-2 vue介绍</title>
      <link href="2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/2.%E4%BB%80%E4%B9%88%E6%98%AFVue/"/>
      <url>2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/2.%E4%BB%80%E4%B9%88%E6%98%AFVue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-VUE"><a href="#什么是-VUE" class="headerlink" title="什么是 VUE"></a>什么是 VUE</h2><p>是一套用于构建用户界面的渐进式框架。</p><p>框架：1.帮助你  2.限制你</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.帮助你来做一些事情，不用自己从零开始，直接封装好的功能，直接拿来用</span><br><span class="line">2.约束、规范、统一</span><br></pre></td></tr></table></figure><h4 id="vue和传统的开发模式有什么不一样"><a href="#vue和传统的开发模式有什么不一样" class="headerlink" title="vue和传统的开发模式有什么不一样"></a>vue和传统的开发模式有什么不一样</h4><p>传统开发方式：jquery   程序逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) 等待加载</span><br><span class="line">$(<span class="string">&#x27;#btn1&#x27;</span>)把我要的东西选出来</span><br><span class="line">click()加事件</span><br><span class="line">css()  加样式</span><br></pre></td></tr></table></figure><p>添加数据：<br>     事件 -&gt; 选取 -&gt; 校验 -&gt; ajax -&gt; 等待 -&gt; 选取 -&gt; 创建 -&gt; 插入</p><p>现在开发方式：vue    数据逻辑</p><p>数据为中心 —— 视图层框架</p><p>事件 -&gt; 修改数据 -&gt; ?  剩下的就没了，剩下的vue帮我们操作，操作的结果会呈现在我们面前，</p><p>这个呈现的过程是我们不用关心的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这就是vue很高效的原因之一，很多公司都在用，十分流行，</span><br><span class="line">不用再去为那些细枝末节的问题，去折腾，因为一个人的精力总是有限的，如果说你就天天总去关注，我这id对不对，我要选谁，我要把结果插入到哪个标签，把这些事儿全都自己来折腾的话，你会发现最后程序最后出bug的基本都在那些地方，而且到了这个业务逻辑这一块其实你就没有精力了。</span><br><span class="line">所以，总结来说，vue如果想用好的话你就记住这一句话：永远盯住数据。</span><br></pre></td></tr></table></figure><p>vue：永远盯住数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不论做什么，我们都要从数据下手，我要完成一个任务，需要变哪些数据，考虑数据怎么变，谁来变这个数据。</span><br></pre></td></tr></table></figure><h3 id="使用VUE-怎么写一个Vue"><a href="#使用VUE-怎么写一个Vue" class="headerlink" title="使用VUE 怎么写一个Vue"></a>使用VUE 怎么写一个Vue</h3><p>1.元素——容器、根</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建一个div</span><br></pre></td></tr></table></figure><p>2.创建vue实例<br>  new Vue({<br>    el, data, methods<br>  }) </p><p>.vue核心思想——一切都是数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">引入vue</span><br><span class="line">给他一个根元素</span><br><span class="line">new 一个Vue</span><br><span class="line">操作数据</span><br><span class="line"></span><br><span class="line">data 属性</span><br><span class="line">&#123;&#123; &#125;&#125;  插值表达式  打date里的这个值放这里</span><br><span class="line">methods 写方法</span><br><span class="line">咱们现在的例子很简单，没什么东西，实际项目中，大同小异，用的就是这些思想和方法。</span><br></pre></td></tr></table></figure><p>4.事件<br>  onclick<br>  @click</p><p>指令：<br>1.v-bind<br>2.v-model</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue用的好不好，就看这个指令的使用情况了</span><br></pre></td></tr></table></figure><p>v-model——双向绑定</p><p>单向绑定： 数据  -&gt; 视图<br>双向绑定： 数据 &lt;-&gt; 视图   v-model</p><hr><p>v-bind——单向      数据  -&gt; 视图</p><p>v-model——双向     数据 &lt;-&gt; 视图</p><hr><p>vue.js：数据驱动——核心</p><hr>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一天 1-1 课程介绍</title>
      <link href="2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/1.%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92/"/>
      <url>2019/08/06/vue/%E5%85%AC%E5%8F%B8vue%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD/%E7%AC%AC1%E5%A4%A9/1.%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h3><ul><li>小而美</li><li>丰富的生态（模块、插件、开发团队、开发资料）</li><li>广泛的应用（移动端、PC 端）</li></ul><h3 id="学习-Vue-与要什么基础"><a href="#学习-Vue-与要什么基础" class="headerlink" title="学习 Vue 与要什么基础"></a>学习 Vue 与要什么基础</h3><ul><li>HTML、CSS、JS 基础</li></ul><h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><ul><li><p>什么是 Vue</p><p>hello Vue 应用</p></li><li><p>双向数据绑定与单向数据绑定</p></li><li><p>计算属性和侦听器</p></li><li><p>常用指令讲解</p><p>属性绑定、事件绑定、条件渲染、列表渲染等</p></li><li><p>组件基本使用</p></li><li><p>实现一个案例</p></li></ul><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><ul><li><p>ES6 基础</p></li><li><p>Vue 脚手架</p><p>开发环境安装（IDE,Node,调试环境）、webpack、vue-cli 工具、创建组件化模块化 Vue</p></li><li><p>组件详解</p><p>组件通信，生命周期</p></li></ul><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><ul><li>Vue-router 路由管理</li><li>Vuex 状态管理</li></ul><h3 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h3><ul><li>Element-ui 的使用</li><li>熟悉公司框架</li></ul><h3 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h3><ul><li><p>公司框架的使用</p></li><li><p>拓展知识</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 公司vue技术培训 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>创建React Native应用程序</title>
      <link href="2019/07/26/react/%E5%88%9B%E5%BB%BAReactNative%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>2019/07/26/react/%E5%88%9B%E5%BB%BAReactNative%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2个脚手架工具</p><ul><li><h3 id="Expo-CLI"><a href="#Expo-CLI" class="headerlink" title="Expo CLI"></a>Expo CLI</h3><p>它们允许您在不安装和配置Xcode或Android Studio的情况下启动项目。Expo CLI在您的本地计算机上设置开发环境，您可以在几分钟内开始编写React Native应用程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Node 10 或更高版本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装教脚手架</span></span><br><span class="line">npm install -g expo-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化项目</span></span><br><span class="line">expo init AwesomeProject</span><br><span class="line"></span><br><span class="line">cd AwesomeProject</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个开发服务器</span></span><br><span class="line">npm start # you can also use: expo start</span><br></pre></td></tr></table></figure><p>在iOS或Android手机上安装<a href="https://expo.io/">Expo</a>客户端应用程序，并连接到与计算机相同的无线网络。在Android上，使用Expo应用程序扫描终端的QR码以打开您的项目。在iOS上，按照屏幕上的说明获取链接。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>因为在使用Expo创建项目时不构建任何本机代码，所以除了React Native API和Expo客户端应用程序中可用的组件之外，不可能包含自定义本机模块。</p><p>如果您知道最终需要包含自己的本机代码，那么Expo仍然是一个很好的入门方式。在这种情况下，您最终只需要“ <a href="https://docs.expo.io/versions/latest/expokit/eject">弹出</a> ”以创建自己的本机构建。如果确实弹出，则需要“React Native CLI快速入门”说明继续处理项目。</p><p>Expo CLI将您的项目配置为使用Expo客户端应用程序支持的最新React Native版本。在React Native版本发布稳定后大约一周，Expo客户端应用程序通常会获得对给定React Native版本的支持。您可以查看<a href="https://docs.expo.io/versions/latest/sdk/#sdk-version">此文档</a>以了解支持的版本。</p><p>如果您将React Native集成到现有项目中，则需要跳过Expo CLI并直接设置本机构建环境。选择“React Native CLI Quickstart”，以获取有关为React Native配置本机构建环境的说明。</p></li><li><h3 id="React-Native-CLI"><a href="#React-Native-CLI" class="headerlink" title="React Native CLI"></a>React Native CLI</h3><p>它需要Xcode或Android Studio才能开始。如果您已经安装了这些工具之一，那么您应该能够在几分钟内启动并运行。如果未安装它们，您应该花费大约一个小时来安装和配置它们。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MacOS 命令 ；Node 8.3或更高版本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖项</span></span><br><span class="line">brew install node</span><br><span class="line">brew install watchman</span><br><span class="line">brew tap AdoptOpenJDK/openjdk</span><br><span class="line">brew cask install adoptopenjdk8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装教脚手架</span></span><br><span class="line">npm install -g react-native-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化项目</span></span><br><span class="line">react-native init AwesomeProject</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果要使用特定的React Native版本启动新项目，可以使用以下--version参数</span></span><br><span class="line">react-native init AwesomeProject --version X.XX.X</span><br><span class="line">react-native init AwesomeProject --version react-native@next</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行react-native run-ios</span></span><br><span class="line">cd AwesomeProject</span><br><span class="line">react-native run-ios</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行react-native run-ios 指定设备</span></span><br><span class="line">react-native run-ios --simulator &quot;iPhone 7 Plus&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub结合PicGo自建图床</title>
      <link href="2019/07/25/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%88%A9%E7%94%A8GitHub%E7%BB%93%E5%90%88PicGo%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>2019/07/25/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/%E5%88%A9%E7%94%A8GitHub%E7%BB%93%E5%90%88PicGo%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前都用微博图床，然而微博图床从2019年4月开始实行了防盗链😂，不建议继续使用。</p><p>改用 PicGo 和 Github Pages 自建图床，在绑定自己的域名。稳定迁移也方便。缺点就是网速慢了点。</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo主页</a></p><p><a href="https://github.com/Molunerfinn/PicGo">PicGo GitHub主页</a></p><p><a href="https://github.com/PicGo/Awesome-PicGo">PicGo插件</a></p><p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/">PicGo-Core主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>github访问慢和clone慢解决方案</title>
      <link href="2019/07/25/git%E6%8A%80%E5%B7%A7/github%E8%AE%BF%E9%97%AE%E6%85%A2%E5%92%8Cclone%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2019/07/25/git%E6%8A%80%E5%B7%A7/github%E8%AE%BF%E9%97%AE%E6%85%A2%E5%92%8Cclone%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经常要clone github中的一些项目，无奈如果不爬梯子的话速度实在是龟速，经常1k/s，于是搜了下解决方法，改HOSTS大法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yonyouautodeMacBook-Pro:~ yonyouauto$ nslookup github.com</span><br><span class="line">Server:210.22.70.3</span><br><span class="line">Address:210.22.70.3#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:github.com</span><br><span class="line">Address: 13.229.188.59</span><br></pre></td></tr></table></figure><p>上面可以看出当前dns给我们分配的Github的IP是 13.229.188.59，这个IP我们访问很慢。其实github应该还有很多其他ip的，如果从其他城市访问github.com就可能得到不一样的ip。因而，我们需要模拟其他地点的访问以拿到github.com的其他ip。这个通过  <a href="http://tool.chinaz.com/dns/">DNS查询</a>  工具可做到, 该工具在各地都有服务器，可以实现各地请求这个域名，然后显示返回的ip。</p><p><img src="http://pic1.zhoujie16.cn/eZDHHO.png" alt="eZDHHO.png"></p><p>通过修改HOST文件  更改GitHub域名指向的IP</p><p>我选择的是台湾中华电信的 IP，速度明显快了很多。</p><p>Mac OS 的 HOST 文件在  /private/etc/hosts  目录，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>入坑yarn</title>
      <link href="2019/07/17/%E5%89%8D%E7%AB%AF/%E5%85%A5%E5%9D%91yarn/"/>
      <url>2019/07/17/%E5%89%8D%E7%AB%AF/%E5%85%A5%E5%9D%91yarn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近研究Taro，用npm安装taro环境那是一个巨慢啊，公司还有一个老的vue项目，npm安装依赖很难成功，有时安装成功了也运行报错，要反复删掉重装直到运行成功，今天运行项目就折腾了一上午，最终用yarn一次解决，那个蛋疼啊。</p><p>看taro文档也支持yarn安装，之前也听说过有yarn这个东西，yarn出现很久了但是从来没有用过，当时想学yarn有毛用，当今npm扫天下。现在yarn经常出现在眼球中，总之学习下不吃亏。</p><p>当然大神都是全学的，像我等个渣渣就经常纠结是用npm还是yarn、是学习vue还是学习react、是用sass还是用less，是用webpack还是rollup。😂。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Yarn 是 Facebook, Google, Exponent 和 Tilde 开发的一款新的 JavaScript 包管理工具。就像我们可以从官方文档了解那样，它的目的是解决这些团队使用 npm 面临的少数问题，即：</p><p>安装的时候无法保证速度/一致性<br>安全问题，因为 npm 安装时允许运行代码</p><p>Yarn 同样是一个从 npm 注册源获取模块的新的 CLI 客户端。注册的方式不会有任何变化 —— 你同样可以正常获取与发布包。</p><h2 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h2><p>参照文档 <a href="https://www.yarnpkg.com/zh-Hans/docs/install#mac-stable">安装yarn</a></p><p>因为我安装了 nvm，应该排除安装 Node.js 以便使用 nvm 的 Node.js 版本，用如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yarn --without-node</span><br></pre></td></tr></table></figure><p>运行命令来测试 Yarn 是否安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn --version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.17.3</span></span><br></pre></td></tr></table></figure><h2 id="yarn常用命令"><a href="#yarn常用命令" class="headerlink" title="yarn常用命令"></a>yarn常用命令</h2><p><strong>初始化新项目</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure><p><strong>添加依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure><p><strong>将依赖项添加到不同依赖项类别</strong></p><p>分别添加到 <code>devDependencies</code>、<code>peerDependencies</code> 和 <code>optionalDependencies</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add [package] --dev</span><br><span class="line">yarn add [package] --peer</span><br><span class="line">yarn add [package] --optional</span><br></pre></td></tr></table></figure><p><strong>升级依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure><p><strong>移除依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure><p><strong>安装项目的全部依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><h2 id="从-npm-迁移"><a href="#从-npm-迁移" class="headerlink" title="从 npm 迁移"></a>从 npm 迁移</h2><p>对多数用户来说，从npm迁移的过程应该非常简单。Yarn和npm使用相同的<code>package.json</code>格式，而且Yarn可以从npm安装依赖包。</p><p>如果你打算在现有项目中尝试Yarn，只需执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p>Yarn将通过自己的解析算法来重新组织<code>node_modules</code> 目录，这个算法和<a href="https://nodejs.org/api/modules.html#modules_all_together">node.js 模块解析算法</a>是兼容的。</p><h2 id="yarn-与-npm-命令比较"><a href="#yarn-与-npm-命令比较" class="headerlink" title="yarn 与 npm 命令比较"></a>yarn 与 npm 命令比较</h2><table><thead><tr><th align="left">npm (v5)</th><th align="left">Yarn</th></tr></thead><tbody><tr><td align="left"><code>npm install</code></td><td align="left"><code>yarn install</code></td></tr><tr><td align="left"><strong>(不适用)</strong></td><td align="left"><code>yarn install --flat</code></td></tr><tr><td align="left"><strong>(不适用)</strong></td><td align="left"><code>yarn install --har</code></td></tr><tr><td align="left"><code>npm install --no-package-lock</code></td><td align="left"><code>yarn install --no-lockfile</code></td></tr><tr><td align="left"><strong>(不适用)</strong></td><td align="left"><code>yarn install --pure-lockfile</code></td></tr><tr><td align="left"><code>npm install [package]</code></td><td align="left"><code>yarn add [package]</code></td></tr><tr><td align="left"><code>npm install [package] --save-dev</code></td><td align="left"><code>yarn add [package] --dev</code></td></tr><tr><td align="left"><strong>(不适用)</strong></td><td align="left"><code>yarn add [package] --peer</code></td></tr><tr><td align="left"><code>npm install [package] --save-optional</code></td><td align="left"><code>yarn add [package] --optional</code></td></tr><tr><td align="left"><code>npm install [package] --save-exact</code></td><td align="left"><code>yarn add [package] --exact</code></td></tr><tr><td align="left"><strong>(不适用)</strong></td><td align="left"><code>yarn add [package] --tilde</code></td></tr><tr><td align="left"><code>npm install [package] --global</code></td><td align="left"><code>yarn global add [package]</code></td></tr><tr><td align="left"><code>npm update --global</code></td><td align="left"><code>yarn global upgrade</code></td></tr><tr><td align="left"><code>npm rebuild</code></td><td align="left"><code>yarn install --force</code></td></tr><tr><td align="left"><code>npm uninstall [package]</code></td><td align="left"><code>yarn remove [package]</code></td></tr><tr><td align="left"><code>npm cache clean</code></td><td align="left"><code>yarn cache clean [package]</code></td></tr><tr><td align="left"><code>rm -rf node_modules &amp;&amp; npm install</code></td><td align="left"><code>yarn upgrade</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装和使用nginx</title>
      <link href="2019/07/16/mac%E6%8A%80%E5%B7%A7/Mac%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8nginx/"/>
      <url>2019/07/16/mac%E6%8A%80%E5%B7%A7/Mac%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Nginx和环境准备"><a href="#Nginx和环境准备" class="headerlink" title="Nginx和环境准备"></a>Nginx和环境准备</h2><p>Nginx是一款轻量级的HTTP服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的IO性能，时常用于服务端的反向代理和负载均衡。</p><p><strong>Nginx的优点</strong></p><ul><li>支持海量高并发：采用IO多路复用epoll。官方测试Nginx能够支持5万并发链接，实际生产环境中可以支撑2-4万并发连接数。</li><li>内存消耗少：在主流的服务器中Nginx目前是内存消耗最小的了，比如我们用Nginx+PHP，在3万并发链接下，开启10个Nginx进程消耗150M内存。</li><li>免费使用可以商业化：Nginx为开源软件，采用的是2-clause BSD-like协议，可以免费使用，并且可以用于商业。</li><li>配置文件简单：网络和程序配置通俗易懂，即使非专业运维也能看懂。</li></ul><h3 id="Mac安装nginx"><a href="#Mac安装nginx" class="headerlink" title="Mac安装nginx"></a>Mac安装nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>终端运行并按提示操作。如下内容，则安装成功。</p><p>安装目录和配置文件目录都已经显示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">yonyouautodeMacBook-Pro:~ yonyouauto$ brew install nginx</span><br><span class="line">==&gt; Installing dependencies for nginx: pcre</span><br><span class="line">==&gt; Installing nginx dependency: pcre</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/pcre-8.43.mojave.bottle.tar.gz</span><br><span class="line">==&gt; Downloading from https://akamai.bintray.com/08/08e7414a7641d1e184c936537ff67f72f52649374d2308b89</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Pouring pcre-8.43.mojave.bottle.tar.gz</span><br><span class="line">🍺  /usr/local/Cellar/pcre/8.43: 204 files, 5.5MB</span><br><span class="line">==&gt; Installing nginx</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/nginx-1.17.1.mojave.bottle.tar.gz</span><br><span class="line">==&gt; Downloading from https://akamai.bintray.com/a1/a1114fd86181db06ebb31c5f3fb5e666fafb3d10e0e65ed0f</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Pouring nginx-1.17.1.mojave.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Docroot is: /usr/local/var/www</span><br><span class="line"></span><br><span class="line">The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files in /usr/local/etc/nginx/servers/.</span><br><span class="line"></span><br><span class="line">To have launchd start nginx now and restart at login:</span><br><span class="line">  brew services start nginx</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  nginx</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/nginx/1.17.1: 25 files, 2MB</span><br><span class="line">==&gt; Caveats</span><br><span class="line">==&gt; nginx</span><br><span class="line">Docroot is: /usr/local/var/www</span><br><span class="line"></span><br><span class="line">The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files in /usr/local/etc/nginx/servers/.</span><br><span class="line"></span><br><span class="line">To have launchd start nginx now and restart at login:</span><br><span class="line">  brew services start nginx</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  nginx</span><br><span class="line">yonyouautodeMacBook-Pro:~ yonyouauto$ </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装和使用homebrew</title>
      <link href="2019/07/16/mac%E6%8A%80%E5%B7%A7/Mac%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8homebrew/"/>
      <url>2019/07/16/mac%E6%8A%80%E5%B7%A7/Mac%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8homebrew/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="https://brew.sh/">Homebrew</a></h1><p><strong>macOS 缺失的软件包的管理器</strong></p><p>Homebrew 是一款 macOS 平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。包管理工具可以让你安装和更新程序变得更方便，目前在 OS X 系统中最受欢迎的包管理工具就是 Homebrew。</p><h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><p>进入 <a href="https://brew.sh/index_zh-cn">Homebrew官方网站</a> 复制安装命令粘贴至终端</p><h2 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h2><p>参考清华的镜像 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学开源软件镜像站</a></p><p>同样复制安装命令粘贴至终端</p>]]></content>
      
      
      <categories>
          
          <category> mac技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端跨平台开发的深度解析</title>
      <link href="2019/07/01/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
      <url>2019/07/01/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="移动端跨平台开发的深度解析"><a href="#移动端跨平台开发的深度解析" class="headerlink" title="移动端跨平台开发的深度解析"></a>移动端跨平台开发的深度解析</h1><p> <em>跨平台一直是老生常谈的话题，cordova、ionic、react-native、weex、kotlin-native、flutter等跨平台框架的百花齐放，颇有一股推倒原生开发者的势头。（事实上更多是共存发展）看完本篇，相信你会对于当下跨平台移动开发的现状、实现原理、框架的选择等有更深入的理解</em>。</p><blockquote><p><strong>全篇内容较多，需耐心食用！</strong> (///▽///)</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p> <em>为什么我们需要跨平台开发？</em> 本质上，跨平台开发是为了增加代码复用，减少开发者对多个平台差异适配的工作量，降低开发成本，提高业务专注的同时，提供比web更好的体验。嗯～通俗了说就是：<em>省钱、偷懒</em>。</p><p> 本篇主要以react-native、weex、flutter，结合资讯展望，深入聊聊当前跨平台移动开发的实现原理、现状与未来。至于为什么只讲它们，因为对比ionic、phoneGap，它们更于 “naive” (˶‾᷄ ⁻̫ ‾᷅˵)。</p><blockquote><p>超完整跨平台开源项目</p></blockquote><table><thead><tr><th>类型</th><th>链接</th></tr></thead><tbody><tr><td>react-native</td><td><a href="https://link.juejin.im/?target=https://github.com/CarGuo/GSYGithubApp">github.com/CarGuo/GSYG…</a></td></tr><tr><td>weex</td><td><a href="https://link.juejin.im/?target=https://github.com/CarGuo/GSYGithubAppWeex">github.com/CarGuo/GSYG…</a></td></tr><tr><td>Flutter</td><td><a href="https://link.juejin.im/?target=https://github.com/CarGuo/GSYGithubAppFlutter">github.com/CarGuo/GSYG…</a></td></tr></tbody></table><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kelo81mqj30xc0j9jso.jpg" alt="百花齐放"></p><p> </p><h2 id="二、原理与特性"><a href="#二、原理与特性" class="headerlink" title="二、原理与特性"></a>二、原理与特性</h2><p>目前移动端跨平台开发中，大致归纳为以下几种情况：</p><ul><li><code>react native</code>、<code>weex</code>均使用JavaScript作为编程语言，目前JavaScript在跨平台开发中，可谓占据半壁江山，大有“一统天下”的趋势。</li><li><code>kotlin-native</code>开始支持 iOS 和 Web 开发，（kotlin已经成为android的一级语言）也想尝试“一统天下”。</li><li><code>flutter</code>是Google跨平台移动UI框架，Dart作为谷歌的亲儿子，毫无疑问Dart成为flutter的编程语言，如下图，作为巨头新生儿，在flutter官网也可以看出，flutter同样“心怀天下”。</li></ul><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kem0dx8aj30go0830tf.jpg" alt="flutter 官网野心勃勃"></p><p> </p><h3 id="1、React-Native"><a href="#1、React-Native" class="headerlink" title="1、React Native"></a>1、React Native</h3><blockquote><p>Facebook 出品，JavaScript语言，JSCore引擎，React设计模式，原生渲染</p></blockquote><h4 id="1-1、理念架构"><a href="#1-1、理念架构" class="headerlink" title="1.1、理念架构"></a>1.1、理念架构</h4><p> <code>“Learn once, write anywhere”</code> ，代表着 Facebook对 react native 的定义：学习 react ，同时掌握 <code>web</code> 与 <code>app</code> 两种开发技能。 react native 用了 react 的设计模式，但UI渲染、动画效果、网络请求等均由原生端实现。开发者编写的js代码，通过 react native 的中间层转化为原生控件和操作，比<code>ionic</code>等跨平台应用，大大提高了的用户体验。</p><p> <strong>总结起来其实就是利用 JS 来调用 Native 端的组件，从而实现相应的功能。</strong></p><p> 如下图所示，react native 的跨平台是实现主要由三层构成，其中 C++ 实现的动态连结库(.so)，作为中间适配层桥接，实现了js端与原生端的双向通信交互。这里最主要是封装了 <code>JavaScriptCore</code> 执行js的解析，而 react native 运行在JavaScriptCore中，所以不存在浏览器兼容的问题。</p><p> 其中在IOS上直接使用内置的<code>javascriptcore</code>， 在Android 则使用webkit.org官方开源的<code>jsc.so</code>。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kembuy5bj30p30l7n0c.jpg" alt="图片来源网络"></p><h4 id="1-2、实现原理"><a href="#1-2、实现原理" class="headerlink" title="1.2、实现原理"></a>1.2、实现原理</h4><p> 和前端开发不同，react native 所有的标签都不是真实控件，JS代码中所写控件的作用，类似 Map 中的 key 值。JS端通过这个 key 组合的 Dom ，最后Native端会解析这个 Dom ，得到对应的Native控件渲染，如 Android 中<code>&lt;view&gt;</code> 标签对应 <code>ViewGroup</code> 控件。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kembuy5bj30p30l7n0c.jpg" alt="图片来源网络"></p><p> 在 react native 中，JS端是运行在独立的线程中（称为JS Thread ）。JS Thread 作为单线程逻辑，不可能处理耗时的操作。那么如 <code>fetch</code> 、<code>图片加载</code> 、 <code>数据持久化</code> 等操作，在 Android 中实际对应的是 <code>okhttp</code> 、<code>Fresco</code> 、<code>SharedPreferences</code>等。而跨线程通信，也意味着 Js Thread 和原生之间交互与通讯是异步的。</p><p> 可以看出，跨平台的关键在于C++层，开发人员大部分时候，只专注于JS 端的代码实现。 在原生端提供的各种 Native Module 模块（如网络请求，ViewGroup控件），和 JS 端提供的各种 JS Module（如JS EventEmiter模块），都会在C++实现的so中保存起来，双方的通讯通过C++中的保存的映射，最终实现两端的交互。通信的数据和指令，在中间层会被转为String字符串传输，双向的调用流程如下图。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kemvvam1j30sw074dgt.jpg" alt="图片来源网络，js调用native"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kenn72z7j30k8073wf5.jpg" alt="图片来源网络，native调用js"></p><h4 id="1-3、打包加载"><a href="#1-3、打包加载" class="headerlink" title="1.3、打包加载"></a>1.3、打包加载</h4><p> 最终，JS代码会被打包成一个 bundle 文件，自动添加到 App 的资源目录下。react native 的打包脚本目录为<code>/node_modules/react-native/local-cli</code>，打包最后会通过 <code>metro</code> 模块压缩 bundle 文件。而bundle文件只会打包js代码，自然不会包含图片等静态资源，所以打包后的静态资源，其实是被拷贝到对应的平台资源文件夹中。</p><p> 其中图片等存在资源的映射规则，比如放在 react native 项目根目录下的 <code>img/pic/logo.png</code>的资源，编译时，会被重命名后，根据大小 merged 到对应的是drawable目录下，修改名称为<code>img_pic_logo.png</code>。</p><p> 打包Android和IOS，肯定需要相应的平台项目存在，在 <code>react-native init</code> 时创建的项目，就已经包含了 android 和 ios 的模版工程，打包完的工程会加载bundle文件，然后启动项目，如下图。这里就不展（tou）开（lan）了，有兴趣的可以看：<a href="https://link.juejin.im/?target=http://www.sohu.com/a/117911688_505885">React Native For Android 架构初探</a>。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kenyspq1j30sg0lcmzq.jpg" alt="图片来源QQ空间移动开发团队，完成启动流程图"></p><p>   </p><h3 id="2、WEEX"><a href="#2、WEEX" class="headerlink" title="2、WEEX"></a>2、WEEX</h3><blockquote><p>Alibaba 出品，JavaScript语言，JS V8引擎，Vue设计模式，原生渲染</p></blockquote><h4 id="2-1、理念架构"><a href="#2-1、理念架构" class="headerlink" title="2.1、理念架构"></a>2.1、理念架构</h4><p> <code>“Write once, run everywhere”</code>, weex的定义就像是：<strong>写个 vue 前端，顺便帮你编译成性能还不错的 apk 和 ipa</strong>（当然，现实有时很骨感）。基于 Vue 设计模式，支持 web、android、ios 三端，原生端同样通过中间层转化，将控件和操作转化为原生逻辑来提高用户体验。</p><p> 在 weex 中，主要包括三大部分：<strong>JS Bridge</strong>、<strong>Render</strong>、<strong>Dom</strong>，分别对应<code>WXBridgeManager</code>、<code>WXRenderManager</code>、<code>WXDomManager</code>，三部分通过<code>WXSDKManager</code>统一管理。其中 <strong>JS Bridge</strong> 和 <strong>Dom</strong> 都运行在独立的 HandlerThread 中，而 Render 运行在 UI 线程。</p><p> <strong>JS Bridge</strong> 主要用来和 JS 端实现进行双向通信，比如把 JS 端的 dom 结构传递给 <strong>Dom</strong> 线程。<strong>Dom</strong> 主要是用于负责 dom 的解析、映射、添加等等的操作，最后通知UI线程更新。而 <strong>Render</strong> 负责在UI线程中对 dom 实现渲染。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4keod2tiwj30jg0pkjt9.jpg" alt="图片来自网络"></p><h4 id="2-2、实现原理"><a href="#2-2、实现原理" class="headerlink" title="2.2、实现原理"></a>2.2、实现原理</h4><p> 和 react native一样，weex 所有的标签也不是真实控件，JS 代码中所生成存的 dom，最后都是由 Native 端解析，再得到对应的Native控件渲染，如 Android 中 <code>&lt;text&gt;</code> 标签对应 <code>WXTextView</code>控件。</p><p> weex 中文件默认为 .vue ，而 vue 文件是被无法直接运行的，所以 vue 会被编译成 .js 格式的文件，Weex SDK会负责加载渲染这个js文件。Weex可以做到跨三端的原理在于：<strong>在开发过程中，代码模式、编译过程、模板组件、数据绑定、生命周期等上层语法是一致的</strong>。不同的是在 <code>JS Framework</code> 层的最后，web 平台和 Native 平台，对 Virtual DOM 执行的解析方法是有区别的。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4keop6klyj30m80badg8.jpg" alt="img"></p><p> 实际上，在 Native 中对 bundle 文件的加载大致经历以下阶段：</p><ul><li>weex 接收到 js 文件以后，JS Framework 根据文件为 Vue 模式，会调用<code>weex-vue-framework</code> 中提供的 <code>createInstance</code>方法创建实例。*(也可能是Rax模式)*</li><li><code>createInstance</code> 中会执行 Js Entry 代码里 <code>new Vue()</code> 创建一个组件，通过其 render 函数创建出 Virtual DOM 节点。</li><li>由JS V8 引擎上解析 Virtual DOM ，得到 Json 数据发送至 Dom 线，这里输出 Json 也是方便跨端的数据传输。</li><li>Dom 线程解析 Json 数据，得到对应的 <code>WxDomObject</code>，然后创建对应的<code>WxComponent</code> 提交 Render 。</li><li>Render在原生端最终处理处理渲染任务，并回调里JS方法。</li></ul><p> 得益于上层的统一性，只是通过 <code>weex-vue-framework</code> 判断是由<code>Vue.js</code> 生成真实的 Dom ，还是通过 Native Api 渲染组件，weex 一定程度上上，用JS 实现了 <code>vue</code> 一统天下的效果。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4keoyl5g2j30hs0bsmy7.jpg" alt="图片来源网络"></p><p>  weex 在原生渲染 Render 时，在接收到渲染指令后，会逐步将数据渲染成原生组件。Render 通过解析渲染数据的描述，然后分发给不同的模块。</p><p>  比如 控件渲染属于 <code>dom</code> 模块中，页面跳转属于<code>navigator</code>模块等。模块的渲染过程并非一个执行完，再执行另一个的流程，而是类似流式的过程。如上一个 <code>&lt;text&gt;</code> 的组件还没渲染好，下一个 <code>&lt;div&gt;</code> 的渲染又发了过来。这样当一个组件的嵌套组件很多时，或者可以看到这个大组件内的UI，一个一个渲染出来的过程。</p><p> weex 比起react native，主要是在JS V8的引擎上，多了 <em>JS Framework</em> 承当了重要的职责，使得上层具备统一性，可以支持跨三个平台。总的来说它主要负责是：<strong>管理Weex的生命周期</strong>；<strong>解析JS Bundle，转为Virtual DOM，再通过所在平台不同的API方法，构建页面</strong>；<strong>进行双向的数据交互和响应</strong>。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kep84wwwj30yg09hwew.jpg" alt="img"></p><h4 id="2-3、打包"><a href="#2-3、打包" class="headerlink" title="2.3、打包"></a>2.3、打包</h4><p> weex 作为 react-native 之后出现的跨平台实现方案，自然可以站在前人的肩膀上优化问题，比如：<em>Bundle文件过大问题</em>。</p><p> Bundle文件的大小，很大程度上影响了框架的性能，而 weex 选择将 <code>JS Framework</code> 集成到 WeexSDK 中，一定程度减少了JS Bundle的体积，使得 bundle 里面只保留业务代码。</p><p> 打包时，weex 是通过 webpack 打包出 bundle 文件的。bundle 文件的打包和 <code>entry.js</code> 文件的配置数量有关，默认情况下之后一个 entry 文件，自然也就只有一个bundle文件。</p><p> 在 weex 项目的 <code>webpack.common.conf.js</code> 中可以看到，其实打包也是区分了 <code>webConfig</code> 和 <code>weexConfig</code> 的不同打包方式。如下图，其中weexEntry 就是 weex 打包配置的地方，可以看到本来已经有 <code>index</code> 和 <code>entry.js</code> 存在了。如果有需要，可配置上你需要的打包页面，具体这里就不详细展开了。有兴趣可看：<a href="https://link.juejin.im/?target=https://www.jianshu.com/p/ae1d7a2b0a8a">Weex原理之带你去蹲坑</a> 。</p><p><img src="http://pic1.zhoujie16.cn/20190725172608.png" alt="img"></p><p>   </p><h3 id="3、Flutter"><a href="#3、Flutter" class="headerlink" title="3、Flutter"></a>3、Flutter</h3><blockquote><p>Google 出品，Dart语言，Flutter Engine引擎，响应式设计模式，原生渲染</p></blockquote><p> Flutter 是谷歌2018年发布的跨平台移动UI框架。相较于本人已经在项目中使用过 react native 和 Weex，Flutter目前仅仅是简单运行过Demo，毕竟还是beta 阶段，这里更多的聊一下它的实现机制和效果。</p><p> 与 react native 和 weex 的通过 Javascript 开发不同，Flutter 的编程语言是Drat，（谷歌亲儿子，据说是因为 Drat 项目组就在 Flutter 隔壁而被选上(◐‿◑)﻿）所以执行时并不需要 Javascript 引擎，但实际效果最终也通过原生渲染。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kepny32rj30mh0d63zq.jpg" alt="图片来源网络"></p><p> 如上图，Flutter 主要分为 <code>Framework</code> 和 <code>Engine</code>，我们基于Framework 开发App，运行在 Engine 上。Engine 是 Flutter 的独立虚拟机，由它适配和提供跨平台支持，目前猜测 Flutter 应用程序在 Android 上，是直接运行 Engine 上 所以在是不需要Dalvik虚拟机。（这是比kotlin更彻底，抛弃JVM的纠缠？）</p><p> 如下图，得益于 Engine 层，Flutter 甚至不使用移动平台的原生控件， 而是使用自己 Engine 来绘制 Widget （Flutter的显示单元），而 Dart 代码都是通过 AOT 编译为平台的原生代码，所以 Flutter 可以 直接与平台通信，不需要JS引擎的桥接。同时 Flutter 唯一要求系统提供的是 canvas，以实现UI的绘制。咦？这么想来，支持web端也没问题吧！</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4kepvt069j30hg08gt9d.jpg" alt="图片来源网络"></p><p> 在Flutter中，大多数东西都是widget，而Widget是不可变的，仅支持一帧，并且在每一帧上不会直接更新，要更新而必须使用Widget的状态。无状态和有状态 widget 的核心特性是相同的，每一帧它们都会重新构建，有一个State对象，它可以跨帧存储状态数据并恢复它。</p><p> Flutter 上 Android 自带了 Skia，Skia是一个 2D的绘图引擎库，跨平台，所以可以被嵌入到 Flutter的 iOS SDK中，也使得 Flutter Android SDK要比 iOS SDK小很多。</p><h2 id="三、对比"><a href="#三、对比" class="headerlink" title="三、对比"></a>三、对比</h2><p> 这算是互相伤害的环节了吧。(///▽///)</p><table><thead><tr><th>类型</th><th>React Native</th><th>Weex</th><th>Flutter</th></tr></thead><tbody><tr><td>平台实现</td><td>JavaScript</td><td>JavaScript</td><td>无桥接，原生编码</td></tr><tr><td>引擎</td><td>JSCore</td><td>JS V8</td><td>Flutter engine</td></tr><tr><td>核心语言</td><td>React</td><td>Vue</td><td>Dart</td></tr><tr><td>Apk大小 (Release)</td><td>7.6M</td><td>10.6M</td><td>8.1M</td></tr><tr><td>bundle文件大小</td><td>默认单一、较大</td><td>较小、多页面可多文件</td><td>不需要</td></tr><tr><td>上手难度</td><td>稍高？</td><td>容易</td><td>一般</td></tr><tr><td>框架程度</td><td>较重</td><td>较轻</td><td>重</td></tr><tr><td>特点(不局限)</td><td>适合开发整体App</td><td>适合单页面</td><td>适合开发整体App</td></tr><tr><td>社区</td><td>丰富，Facebook重点维护</td><td>有点残念，托管apache</td><td>刚刚出道小鲜肉，拥护者众多</td></tr><tr><td>支持</td><td>Android、IOS</td><td>Android、IOS、Web</td><td>Android、IOS（并不止？）</td></tr></tbody></table><h4 id="1、大小"><a href="#1、大小" class="headerlink" title="1、大小"></a>1、大小</h4><p> 上面Apk大小是通过 <code>react-native init</code>、<code>weex create</code> 和 flutter 创建出的工程后，直接不添加任何代码，打包出来的 release 签名 apk 大小。从下图可以看出，其中大比例都是在so库。</p><p><img src="http://pic1.zhoujie16.cn/20190725172717.png" alt="img"></p><h4 id="2、社群"><a href="#2、社群" class="headerlink" title="2、社群"></a>2、社群</h4><p> react native 作为 Facebook 主力开源项目之一，至今已有各类丰富的第三方库，甚至如 <code>realm</code>、<code>lottie</code> 等开源项目也有 react native 相关的版本，社群实际无需质疑。当然，因为并完全正统开发平台，第三库的健壮性和兼容性有时候总是良莠不齐。</p><p> weex 其实有种生错在国内的感觉。其实 weex 的设计和理念都很优秀，性能也不错，但是对比 react native 的第三方支持，就显得有点后妈养的。2016年开源至今，社区和各类文档都显得有点疲弱，作为跨平台开发人员，大多时候肯定不会希望，需要频繁的自己增加原生功能支持，因为这样的工作一多，反而会与跨平台开发的理念背道而驰，带来开发成本被维护难度增加。</p><p> Flutter目前还处理beta阶段，但是谷歌的号召力一直很可观，这一点无需质疑。</p><h4 id="3、性能"><a href="#3、性能" class="headerlink" title="3、性能"></a>3、性能</h4><p> 理论上 flutter 的性能应该是最好的，但是目前实际体验中，却并没有感受出来太大的差距，和 react native（0.5.0之后）、weex 在性能上个人体验差异不是很大。当然，这里并没有实测渲染的毫秒时间和帧率数据。</p><h4 id="4、其他区别"><a href="#4、其他区别" class="headerlink" title="4、其他区别"></a>4、其他区别</h4><ul><li>Weex的多页面实现问题</li></ul><blockquote><p> weex 在 native 端是不支持 <code>&lt;keep-alive&gt;</code> 的，这一点和 react-native 不同在与，如果在 native 需要实现页面跳转，使用 vue-router 将会惨不忍睹：返回后页面不做特别处理时，是会空白一片。参考官方Demo <a href="https://link.juejin.im/?target=https://github.com/apache/incubator-weex/tree/master/android/playground">playground</a>，native 端 的采用 <code>weex.requireModule(&#39;navigator&#39;)</code> 跳转 Activity 是才正确实现。</p></blockquote><blockquote><p> 同时，weex中 navigator 跳转的设计，也导致了多页面的页面间通讯的差异。weex在多页面下的数据通讯，是通过url实现的，比如<code>file://assets/dist/SecondPage.js?params=0</code>，而vuex和vue-router在跨页面是无法共用的；而 react native 在跨 Actvity 使用时，因为是同一个bundle文件，只要 manager 相同，那么 router 和 store 时可以照样使用的，数据通信方式也和当个 Actvity 没区别。</p></blockquote><ul><li>项目模板</li></ul><blockquote><p>  weex 和 react native 模板代码模式也不同。weex 的模板是从 cordova 模式修改过来的，根据platform需求，用命令添加固定模块，而在 .gitignore 对 <code>platforms</code> 文件夹是忽略跟踪。 react native 在项目创建时模版就存在了，特别是添加第三方插件原生端支持时，会直接修改模板代码，git代码中也会添加跟踪修改。</p></blockquote><h2 id="四、未来趋势"><a href="#四、未来趋势" class="headerlink" title="四、未来趋势"></a>四、未来趋势</h2><p>  我们选择框架的时候，很多时候会关注框架的成熟度和生命力不是么(◐‿◑)﻿。</p><h3 id="1、React-Native-1"><a href="#1、React-Native-1" class="headerlink" title="1、React Native"></a>1、React Native</h3><p>  <a href="https://link.juejin.im/?target=https://www.colabug.com/3238051.html">“Airbnb 宣布放弃使用 React Native，回归使用原生技术”</a> : Airbnb 作为 react native 平台上最大的支持者之一，其开源的<code>lottie</code> 同样是支持原生和 react native。</p><p> Airbnb 在宣布放弃的文中，也对 react native 的表示了很大量的肯定，而使得他们放弃的理由，其实主要还是集中于项目庞大之后的维护困难，第三方库的良莠不齐，兼容上需要耗费更多的精力导致放弃。</p><p>ps：<em>（ Lottie库Airbnb出的是一个能够帮助解析AE导出的包含动画信息的json文件。这很好的解决了一个矛盾，设计师可以更专注的设计出各种炫酷的动画效果，而开发只需要将其加入支持即可。）</em></p><p>  <a href="https://link.juejin.im/?target=https://www.oschina.net/news/97129/state-of-react-native-2018">Facebook 正在重构 React Native，将重写大量底层。</a>在经历了开源协议风波后，可以看出 Facebook 对于 react native 还是很看重的， 这些底层重构优化的地方，主要集中于：</p><blockquote><p> 首先，改变线程模型。UI 更新不再需要在三个不同的线程上执行，而是可以在任意线程上同步调用 JavaScript 进行优先更新，同时将低优先级工作推出主线程，以便保持对 UI 的响应。  其次，将异步渲染功能引入 React Native 中，允许执行多个渲染并简化异步数据处理。  最后，简化桥接，让它更快、更轻量。原生和 JavaScript 之间的直接调用效率更高，并且可以更轻松地构建调试工具，如跨语言堆栈跟踪。</p></blockquote><h3 id="2、Weex"><a href="#2、Weex" class="headerlink" title="2、Weex"></a>2、Weex</h3><p>  <a href="https://link.juejin.im/?target=https://blog.csdn.net/alitech2017/article/details/80133769">没有死！阿里公开Weex技术架构，还开源了一大波组件。</a> 2018年初的新闻可以看出，weex 的遭遇有点类似曾经的 <code>Duddo</code>（Dubbo因为内部竞争被阿里一度放弃维护），这波诈尸后 <code>weex</code> 被托管到了Apache，而github的 <a href="https://link.juejin.im/?target=https://github.com/weexteam">weexteam</a> 如今也还保持着更新，希望后续能有多好的发展，拭目以待吧。</p><h3 id="3、Flutter-1"><a href="#3、Flutter-1" class="headerlink" title="3、Flutter"></a>3、Flutter</h3><p> Flutter 是 Google 跨平台移动UI框架，Dart作为谷歌的亲儿子在 Flutter 中使用，并且谷歌新操作系统 Fuchsia 支持 Dart，使用 Flutter 作为操作UI框架。这些集合到一起难免让你怀疑 Android 是否要被谷歌抛弃的想法。</p><p> 或者如今先 Android 等平台上推广 Flutter 与 Dart，就是为了以后跟好的过渡到新系统上，毕竟开发者是操作系统的生命源泉之一。而 Java 与 JVM 或者可以被谷歌完全抛开。当然，目前看起来 Flutter 貌似还缺少一些语法糖，嵌套下来的代码有点不忍直视，或者到正式版之后，我们更能感受出它的美丽吧。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p> 内容有点长，其实很多点并没有细致的展开说明，但是通过本文，对于移动端跨平台的现状与未来，希望可能给你带来一点帮助。</p><h4 id="超完整跨平台开源项目"><a href="#超完整跨平台开源项目" class="headerlink" title="超完整跨平台开源项目"></a>超完整跨平台开源项目</h4><table><thead><tr><th>类型</th><th>链接</th></tr></thead><tbody><tr><td>react-native</td><td><a href="https://link.juejin.im/?target=https://github.com/CarGuo/GSYGithubApp">github.com/CarGuo/GSYG…</a></td></tr><tr><td>weex</td><td><a href="https://link.juejin.im/?target=https://github.com/CarGuo/GSYGithubAppWeex">github.com/CarGuo/GSYG…</a></td></tr><tr><td>Flutter</td><td><a href="https://link.juejin.im/?target=https://github.com/CarGuo/GSYGithubAppFlutter">github.com/CarGuo/GSYG…</a></td></tr><tr><td>Kotlin</td><td><a href="https://link.juejin.im/?target=https://github.com/CarGuo/GSYGithubAppKotlin">github.com/CarGuo/GSYG…</a></td></tr></tbody></table><p>本文转自：<a href="https://juejin.im/post/5b395eb96fb9a00e556123ef">掘金@<strong>恋猫de小郭</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提升编程水平的相关网站</title>
      <link href="2019/07/01/%E5%89%8D%E7%AB%AF/%E6%8F%90%E5%8D%87%E7%BC%96%E7%A8%8B%E6%B0%B4%E5%B9%B3%E7%9A%84%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/"/>
      <url>2019/07/01/%E5%89%8D%E7%AB%AF/%E6%8F%90%E5%8D%87%E7%BC%96%E7%A8%8B%E6%B0%B4%E5%B9%B3%E7%9A%84%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>0. Google</strong></p><p><strong><a href="https://google.com/">https://google.com</a></strong></p><p>这个不用多说了吧。</p><p><strong>1.GitHub</strong> </p><p><strong>开发者最最最重要的网站：<a href="https://github.com/">https://github.com</a></strong></p><p>这个不用多说了吧，代码托管网站，上面有很多资源，想要什么轮子，上去搜就好了。并且呢，上面有很多优秀的程序员，你可以在这里交到很多好朋友喔。</p><p><strong>2. 掘金</strong> </p><p><strong>帮助开发者成长的技术社区：<a href="https://juejin.im/">https://juejin.im</a></strong></p><p>现在国内优质的开发者交流学习社区，可以去看大佬们写的文章，也可以自己分享学习心的，与更多开发者交流。认识更多的小伙伴儿，提升个人影响力。</p><p><strong>3. 算法学习 LintCode</strong></p><p><strong><a href="https://www.lintcode.com/">https://www.lintcode.com/</a></strong></p><p>算法学习网站，上去每天刷两道算法题，走遍天下都不怕。</p><p><strong>4. 算法学习 LeetCode</strong></p><p><strong><a href="https://leetcode.com/">https://leetcode.com/</a></strong></p><p>也是算法题网站，同上。</p><p><strong>5. 算法学习 LeetCode 中文站</strong></p><p><strong><a href="https://lingkou.com/">https://lingkou.com/</a></strong></p><p>这个是上面算法题网站的中文站点，英文不好的可以刷这个，英文好的推荐去刷英文网站的题目，还能提升英语能力。</p><p><strong>6. 牛客网</strong> </p><p><strong>面经和刷面试题：<a href="https://www.nowcoder.com/">https://www.nowcoder.com</a></strong></p><p>各个公司的面试题和面经分享，找工作前认真刷一刷，一定会有很大收获！拿到心仪的 offer！</p><p><strong>7. Web 开发练习题</strong></p><p><strong><a href="https://www.freecodecamp.org/">https://www.freecodecamp.org/</a></strong></p><p>这是国外发起的一个 Web 开发学习的网站，从简单到深入，一步一步带你学习 Web 开发。就像一本练习册，并且当你完成相应的内容后，会得到相应的资格认证。</p><p><strong>8. 百度前端技术学院</strong></p><p><strong>前端开发项目库：<a href="http://ife.baidu.com/">http://ife.baidu.com</a></strong></p><p>学前端的看这里，百度官方推出的前端开发学习技术学院，题目从简单到困难，如果你把里面的题都做会了，找个 BAT 的前端工作不成问题的。</p><p><strong>9. Stack Overflow</strong> </p><p><strong>解决 bug 的社区：<a href="https://stackoverflow.com/">https://stackoverflow.com/</a></strong></p><p>开发过程中遇到什么 bug，上去搜一下，只要搜索的方式对，百分之 99 的问题都能搜到答案。在这里能够与很多有经验的开发者交流，如果你是有经验的开发者，还可以来这儿帮助别人解决问题，提升个人影响力。</p><p><strong>10. 程序员客栈</strong></p><p><strong><a href="https://www.proginn.com/">https://www.proginn.com/</a></strong></p><p>程序员客栈是领先的程序员自由工作平台，如果你是有经验有资质的开发者，都可以来上面注册成为开发者，业余的时候做点项目，赚点零花钱。当然，如果你想成为一名自由工作者，程序员客栈也是可以满足的。只要你有技术，不怕赚不到钱。</p><p><strong>11. v2ex</strong></p><p><strong><a href="https://www.v2ex.com/">https://www.v2ex.com/</a></strong></p><p>V2EX 是一个关于分享和探索的地方，上面有很多各大公司的员工，程序员。你想要的应有尽有。</p><p><strong>12. CSDN</strong></p><p><strong><a href="https://www.csdn.net/">https://www.csdn.net/</a></strong></p><p>老牌专业 IT 技术社区，有很多厉害的开发者，当然也有很多小白。在上面可以写文章，分享看法，也可以阅读学习别人分享的内容。现在广告太多，内容太说，不建议看。</p><p>想要成为一名厉害的，有影响力的程序员，一般平时要多分享自己的学习记录和感悟，让更多人认识你。同时你也多看看别人的分享，了解一下别人正在做什么，别人是怎样学习的，是怎样解决问题的，多主动与大家沟通交流，多交一些相关方向的朋友。</p><p><strong>13.InfoQ</strong></p><p><strong><a href="https://www.infoq.cn/">https://www.infoq.cn/</a></strong></p><p>InfoQ基本上就是日刷，可以看下同行都在做啥，不至于闭门造车。</p><p>InfoQ提供新闻、文章、视频演讲和采访等资讯服务。</p><p>InfoQ有各种语言版本，最重要的是有中文版的，内容相当有深度，非常有益于把握最新的技术动态。</p><p><strong>14.HackerRank</strong></p><p><strong><a href="https://www.hackerrank.com/">https://www.hackerrank.com/</a></strong></p><p>HackerRank包含编程题和项目开发挑战。</p><p>有些编程题目难度非常高，不过喜欢挑战的程序员玩HackerRank会快感十足，它经常可以让你刷题爽到极点。</p><p><strong>15.Programming by Doing</strong></p><p><strong><a href="http://www.programmingbydoing.com/">http://www.programmingbydoing.com/</a></strong></p><p>网站一打开进去，“学习的最好方法就是去做。”这句话深深吸引了我。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>准确的检查你的javascript数据类型小工具typeCompare</title>
      <link href="2019/07/01/%E5%89%8D%E7%AB%AF/%E5%87%86%E7%A1%AE%E7%9A%84%E6%A3%80%E6%9F%A5%E4%BD%A0%E7%9A%84javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B0%8F%E5%B7%A5%E5%85%B7typeCompare/"/>
      <url>2019/07/01/%E5%89%8D%E7%AB%AF/%E5%87%86%E7%A1%AE%E7%9A%84%E6%A3%80%E6%9F%A5%E4%BD%A0%E7%9A%84javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B0%8F%E5%B7%A5%E5%85%B7typeCompare/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>更简单，准确的检查你的javascript数据类型<br>一个简单的小工具</p><p><a href="https://github.com/reming0227/type-compare"><strong>type-compare</strong></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install type-compare --save</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typeCompare <span class="keyword">from</span> <span class="string">&#x27;type-compare&#x27;</span>;</span><br><span class="line"><span class="comment">// result true</span></span><br><span class="line">typeCompare(<span class="literal">null</span>, <span class="string">&#x27;null&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="literal">undefined</span>, <span class="string">&#x27;undefined&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="literal">true</span>, <span class="string">&#x27;boolean&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="number">123</span>, <span class="string">&#x27;number&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;string&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="built_in">Symbol</span>(), <span class="string">&#x27;symbol&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Array</span>(), <span class="string">&#x27;array&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Object</span>(), <span class="string">&#x27;object.object&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Number</span>(), <span class="string">&#x27;object.number&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">String</span>(), <span class="string">&#x27;object.string&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Set</span>(), <span class="string">&#x27;object.set&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Map</span>(), <span class="string">&#x27;object.map&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// result false</span></span><br><span class="line">typeCompare(<span class="literal">undefined</span>, <span class="string">&#x27;null&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="literal">null</span>, <span class="string">&#x27;undefined&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;number&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="number">123</span>, <span class="string">&#x27;string&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Object</span>(), <span class="string">&#x27;array&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Array</span>(), <span class="string">&#x27;object&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>), <span class="string">&#x27;object.string&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">123</span>), <span class="string">&#x27;object.number&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Set</span>(), <span class="string">&#x27;object.object&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">typeCompare(<span class="keyword">new</span> <span class="built_in">Map</span>(), <span class="string">&#x27;object.object&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS11.4.1越狱常用</title>
      <link href="2019/06/26/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/iOS11-4-1%E8%B6%8A%E7%8B%B1%E5%B8%B8%E7%94%A8/"/>
      <url>2019/06/26/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/iOS11-4-1%E8%B6%8A%E7%8B%B1%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>企业版软件下载地址：</p><p><a href="https://jailbreaks.fun/">https://jailbreaks.fun/</a></p><p><a href="https://app.ignition.fun/">https://app.ignition.fun/</a></p><p><a href="https://apt.cydia.love/jbak/misc.html">https://apt.cydia.love/jbak/misc.html</a></p><p><a href="http://app.iosninja.io/">http://app.iosninja.io/</a></p><p><a href="https://www.tweakboxapp.com/">https://www.tweakboxapp.com/</a></p><p>常用软件源：</p><p>蚂蚁源：<a href="https://apt.cydia.love/">https://apt.cydia.love</a></p><p>kk中文源：<a href="https://apt.cydiakk.com/">https://apt.cydiakk.com</a></p><p>多米诺骨牌源：<a href="https://apt.wxhbts.com/">https://apt.wxhbts.com</a></p><p>贴吧源：<a href="http://apt.cydiaba.cn/">http://apt.cydiaba.cn/</a></p><p>嗨客源：<a href="http://repo.qqtlr.com/">http://repo.qqtlr.com/</a></p><p>蜜蜂源：<a href="https://apt.cydiami.com/">https://apt.cydiami.com</a></p><p>雷锋源：<a href="https://apt.abcydia.com/">https://apt.abcydia.com</a></p><p>ibreak源，微信助手：<a href="http://ibreak.yourepo.com/">http://ibreak.yourepo.com</a> </p><p>WeChat++源：<a href="https://ihook.yourepo.com/">https://ihook.yourepo.com/</a></p><p>平刷工具：雷锋源的有效，其他源的闪退</p><p>Unc0ver 汉化</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4mksy49hgj30g00sg400.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g4mktb4d1qj30g00sgjt4.jpg"></p><p>我用的越狱软件</p><p>AnyWhere虚拟定位 4.6.1-1  雷锋源</p><p>AppSync Unified 关闭签名 40.0  蚂蚁源</p><p>AudioRecurder 2通话录音 1.6-93  蚂蚁源</p><p>BadgeColor 多彩角标 1.0-2   kk中文源</p><p>FakeStep 修改步数 1.0.1-1  蚂蚁源</p><p>Filza File 文件管理 3.6.2k   kk源</p><p>GoodWiFi 无线增强  0.0-b5  蜜蜂源</p><p>iCleaner  官方版本</p><p>降频开关 0.5  蚂蚁源</p><p>Liberty Lite 屏蔽越狱 0.2.12  kk源</p><p>LowBattertBanner低电量通知 1.0.2 蚂蚁源</p><p>NewTerm2 命令终端 2.0-b3  蚂蚁源</p><p>NFCWriter XS 官方源</p><p>Pascal 优雅音量条 1.0  蚂蚁源</p><p>SilentRecorder 安静录屏 1.4.1  蚂蚁源</p><p>VideoDownloadCN 视频下载 1.1.1   嗨客源</p><p>WeChat Helper-微信助手 2.1.1   kk源</p><p>XB-Hide 应用隐藏 1.4  蚂蚁源</p><p>长图拼接破解0.1.1  多米诺源</p><p>支付宝蚂蚁森林一键收取  0.1-3  贴吧源</p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm修改源</title>
      <link href="2019/06/19/%E5%89%8D%E7%AB%AF/npm%E4%BF%AE%E6%94%B9%E6%BA%90/"/>
      <url>2019/06/19/%E5%89%8D%E7%AB%AF/npm%E4%BF%AE%E6%94%B9%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.得到原本的镜像地址</p><p>npm get registry </p><blockquote><p><a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p></blockquote><p>设成淘宝的</p><p>npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a></p><p>yarn config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a></p><p>2.换成原来的</p><p>npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flutter环境搭建(Mac)</title>
      <link href="2019/06/15/Flutter/Flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>2019/06/15/Flutter/Flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="下载Flutter-SDK包"><a href="#下载Flutter-SDK包" class="headerlink" title="下载Flutter SDK包"></a>下载Flutter SDK包</h3><p>这里推荐去官网下载就好，我挂了梯子，速度并不慢。</p><p>网址：<a href="https://flutter.io/setup-macos/">https://flutter.io/setup-macos/</a></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>压缩包下载好以后，找个位置进行解压。这个位置很重要，因为下面配置环境变量的时候要用到。比如你配置到了根目录下的app文件夹。</p><p>1.打开终端工具（这个我就不用写了吧），使用vim进行配置环境变量，命令如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>在打开的文件里增加一行代码，意思是配置flutter命令在任何地方都可以使用。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/app/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>提示：这行命令你要根据你把压缩包解压的位置来进行编写，写的是你的路径，很有可能不跟文章一样。</p><p>配置完成后，需要用<code>source</code>命令重新加载一下 ，具体命令如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>完成这部以后，就算我们flutter的安装工作完成了，但是这还不能进行开发。可以使用命令来检测一下，是否安装完成了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p>出现下面的结果，说明到目前为止，我们安装一切顺利。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g416ievl0zj30pp0ji420.jpg"></p><h3 id="检查开发环境"><a href="#检查开发环境" class="headerlink" title="检查开发环境"></a>检查开发环境</h3><p>到上边为止，我们安装好了Flutter，但是还不具备开发环境。开发还需要很多软件和插件的支持，那到底需要哪些插件和软件那？我们可以使用Flutter为我们提供的命令来进行检查：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>如果你英文很好，你应该可以很容易读出上面的检测结果，有很多条目都没有通过。需要我们安装检测结果一条条进行安装，直到满足开发环境。（如果有[!]x标志，表示本行检测没有通过，就需要我们设置或者安装相应的软件了。）</p><p>有可能你的Android studio也没有安装，那么你要先安装这个编辑器，安装好后，可以顺便下载Android SDK。</p><p>Android Studio下载地址：<a href="http://www.android-studio.org/">http://www.android-studio.org/</a></p><p>下载Android SDK的时候，记得搭上梯子，否则你会等到天荒地老（祝君一切顺利）。</p><p>如果你有安装，那么第一步要作的是允许协议（android-licenses）。允许方法就是在终端运行如下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><p>然后让你输入Y/N的时候，一路Y就可以了（至于啥意思，我也没仔细看，大概就和安装软件的下一步下一步是一样的，你按N是不能成功的）。</p><p>这不完成后，我们再使用<code>flutter doctor</code>进行检测后，会看到还是有很多x。大概如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  To install, run:</span><br><span class="line">    brew install --HEAD libimobiledevice</span><br><span class="line">    brew install ideviceinstaller</span><br><span class="line">✗ ios-deploy not installed. To install:</span><br><span class="line">    brew install ios-deploy</span><br><span class="line">✗ CocoaPods not installed.</span><br><span class="line">    CocoaPods is used to retrieve the iOS platform side&#x27;s plugin code that responds to your plugin usage on the Dart side.</span><br><span class="line">    Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">    For more info, see https://flutter.io/platform-plugins</span><br><span class="line">  To install:</span><br><span class="line">    brew install cocoapods</span><br><span class="line">    pod setup</span><br></pre></td></tr></table></figure><p>其实大概意思就是我们需要这些软件，Flutter推荐你用brew命令进行安装。</p><p>我们可以直接在终端里输入下列命令（每输完一个都要等一会，等待软件包安装完成）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller</span><br><span class="line">brew install ios-deploy</span><br><span class="line">brew install cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>安装完这些，我大概花了1个半小时左右，我这是百兆光纤还加了梯子。</p><p>这个大问题解决以后，我们还需要为Android Studio安装一下Flutter插件（这个有可能你安装过，如果出现下面的提示，说明你还没有安装）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure><p>打开Android Stuido 软件，然后找到Plugin的配置，搜索Flutter插件。</p><p>安装完成后，你需要重新启动一下Android Studio软件。</p><p>我做到这里环境就全部OK了，只有一个没有找到调试设备了，因为我没有调试的手机硬件，所以出现这个提示,不用管它。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[!] Connected devices</span><br><span class="line">    ! No devices available</span><br></pre></td></tr></table></figure><h3 id="Pub源的配置"><a href="#Pub源的配置" class="headerlink" title="#Pub源的配置"></a><a href="http://jspang.com/posts/2019/01/20/flutter-base.html#pub%E6%BA%90%E7%9A%84%E9%85%8D%E7%BD%AE">#</a>Pub源的配置</h3><p>如果你没有梯子，一个人人都知道的原因，你还需要在环境变量里配置一下Pub源，不然你是无法进行使用的。</p><p>运行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>增加两行配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>重新加载环境变量</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>希望大家都能安装成功，这只是我的安装过程，不敢保证全部正确，但是我尽量详细的描述了我Mac的搭建过程，希望可以帮助到Flutter的爱好者。</p><p>环境安装完成 检测结果如下图：</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g416nb4nejj30pe07lgmy.jpg"></p><p>手机模拟器可打开Xcode的模拟器或者安卓的AVD虚拟机(超级卡，卡到你怀疑人生)</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>认识一下Flutter</title>
      <link href="2019/06/15/Flutter/%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8BFlutter/"/>
      <url>2019/06/15/Flutter/%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8BFlutter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</p><p>我觉的这句话的重点有三个：</p><ul><li><strong>跨平台：</strong>现在Flutter至少可以跨4种平台，甚至支持嵌入式开发。我们常用的有Linux、Android、IOS，甚至可以在谷歌最新的操作系统上Fuchsia进行运行,经过第三方扩展，甚至可以跑在MacOS和Windows上，到目前为止，Flutter算是支持平台最多的框架了，良好的跨平台性，直接带来的好处就是减少开发成本。</li><li><strong>原生用户界面：</strong> 它是原生的，让我们的体验更好，性能更好。用官方的话讲就是平滑而自然的滑动效果和平台感知，为您的用户带来全新的体验。（可以看一下图片，这是Flutter的表现）</li><li><strong>开源免费：</strong>这个不用多说，我们只要学会并使用，这些都是免费的。这对于大公司是非常必要的，有人说你可以用破解版什么的….说明你还是小公司，我们公司的软件全部是正版，就更不用说操作系统和生产环境了，否则各种公司的侵权官司你都解决不了。</li></ul><h3 id="主流框架的对比"><a href="#主流框架的对比" class="headerlink" title="主流框架的对比"></a>主流框架的对比</h3><p>其实说这一块是带有主观性的，很容易遭到攻击，我也不敢保证我说的就完全正确，但是我还是给大家简单介绍一下。</p><ul><li><strong>Cordova：</strong>个人认为Flutter可以完胜了，因为Cordova还是基于网页技术进行包装，利用插件的形式开发移动应用的，就这一点。无论是性能还是体验，Flutter都可以完胜了。</li><li><strong>RN（React Native）：</strong>RN的效率由于是将View编译成了原生View,所以效率上要比基于Cordova的HTML5高很多,但是它也有效率问题,RN的渲染机制是基于前端框架的考虑,复杂的UI渲染是需要依赖多个view叠加.比如我们渲染一个复杂的ListView,每一个小的控件,都是一个native的view,然后相互组合叠加.想想此时如果我们的list再需要滑动刷新,会有多少个对象需要渲染.所以也就有了前面所说的RN的列表方案不友好。</li><li><strong>Flutter：</strong>吸收了前两者的教训之后,在渲染技术上,选择了自己实现(GDI),由于有更好的可控性,使用了新的语言Dart,避免了RN的那种通过桥接器与Javascript通讯导致效率低下的问题,所以在性能方面比RN更高一筹;有经验的开发者可以打开Android手机开发者选项里面的显示边界布局,发现Flutter的布局是一个整体.说明Flutter的渲染没用使用原生控件进行渲染。</li></ul><h3 id="120fps超高性能"><a href="#120fps超高性能" class="headerlink" title="120fps超高性能"></a>120fps超高性能</h3><p>Flutter采用GPU渲染技术，所以性能极高。</p><p>Flutter编写的应用是可以达到120fps(每秒传输帧数),这也就是说，它完全可以胜任游戏的制作。而我们常说的RN的性能只能达到60fps，这也算是Flutter的一个超高竞争力吧。官方宣称Flutter甚至会超过原生性能。</p><p>如果你想迈入移动游戏领域，学习Flutter也是一个非常好的选择。</p><h3 id="Flutter生态情况"><a href="#Flutter生态情况" class="headerlink" title="#Flutter生态情况"></a><a href="http://jspang.com/posts/2019/01/20/flutter-base.html#flutter%E7%94%9F%E6%80%81%E6%83%85%E5%86%B5">#</a>Flutter生态情况</h3><p>由于有google这样的超级公司支持和推广，Flutter虽然刚出来没有多久，但是生态还是非常好的，中国也有了大量的Flutter爱好者，那技术胖也是其中之一。</p><p>我们先来看一下Flutter的插件情况。由法国人总结了一个Flutter的插件列表，我们可以打开看一下，里边的插件非常丰富。所以小伙伴们完全没有必要为Flutter的生态环境而担忧。</p><p><strong>github地址：</strong><a href="https://github.com/Solido/awesome-flutter">https://github.com/Solido/awesome-flutter </a></p><p>目前阿里集团已经开始使用Flutter来进行开发了，比如我们经常使用的闲鱼，主要模块就是Flutter进行开发的。再给大家一个图片，这些效果都是Flutter进行开发的。</p><p>Flutter 的官方网站为我们提供了一个<code>showcase</code>,有兴趣的小伙伴可以点击下方链接进行查看。</p><p>Showcase地址：<a href="https://github.com/Solido/awesome-flutter">https://github.com/Solido/awesome-flutter </a></p><p>小伙伴们，快点上车吧，一起来掌握这门新技能。</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何写出无法维护的代码</title>
      <link href="2019/06/13/%E5%A8%B1%E4%B9%90/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E6%97%A0%E6%B3%95%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>2019/06/13/%E5%A8%B1%E4%B9%90/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E6%97%A0%E6%B3%95%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何写出无法维护的代码"><a href="#如何写出无法维护的代码" class="headerlink" title="如何写出无法维护的代码"></a>如何写出无法维护的代码</h1><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkugrw02j30go0ayaa8.jpg"></p><p>这篇文章的原文在这里（<a href="https://link.juejin.im/?target=http://mindprod.com/jgloss/unmain.html%EF%BC%89">mindprod.com/jgloss/unma…</a></p><p>看完我想说——</p><blockquote><p><strong>什么叫“创造力”，创造力就是——就算是要干一件烂事都能干得那么漂亮那么有创意的能力。</strong></p></blockquote><blockquote><p><strong>什么叫“抓狂”，抓狂就是——以一种沉着老练的不屈不挠的一本正经的精神一点一点把你推向崩溃的边缘。</strong></p></blockquote><p><strong>另外，维护程序的朋友们，你们死定了！！</strong></p><blockquote><p>如果建筑师盖房子就像程序员写程序一样，那么，第一只到来的啄木鸟就能毁掉我们的文明</p></blockquote><h2 id="程序命名"><a href="#程序命名" class="headerlink" title="程序命名"></a>程序命名</h2><ol><li><strong>容易输入的名字</strong>。比如：Fred，asdf</li><li><strong>单字母的变量名</strong>。比如：a,b,c, x,y,z（如果不够用，可以考虑a1,a2,a3,a4,….）</li><li><strong>有创意地拼写错误</strong>。比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。</li><li><strong>抽象</strong>。比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。</li><li><strong>缩写</strong>。比如：WTF，RTFSC …… （使用拼音缩写也同样给力，比如： BT，TMD，TJJTDS）</li><li><strong>随机大写字母</strong>。比如：gEtnuMbER..</li><li><strong>重用命名</strong>。在内嵌的语句块中使用相同的变量名有奇效。</li><li><strong>使用重音字母</strong>。比如：int ínt（第二个 ínt不是int）</li><li><strong>使用下划线</strong>。比如：_, __, ___。</li><li><strong>使用不同的语言</strong>。比如混用英语，德语，或是中文拼音。</li><li><strong>使用字符命名</strong>。比如：slash, asterix, comma…</li><li><strong>使用无关的单词</strong>。比如：god, superman, iloveu….</li><li><strong>混淆l和1</strong>。字母l和数字1有时候是看不出来的。</li></ol><h2 id="伪装欺诈"><a href="#伪装欺诈" class="headerlink" title="伪装欺诈"></a>伪装欺诈</h2><ol><li><strong>把注释和代码交织在一起。</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for(j&#x3D;0; j&lt;array_len; j+ &#x3D;8)</span><br><span class="line">&#123;</span><br><span class="line">    total +&#x3D; array[j+0 ];</span><br><span class="line">    total +&#x3D; array[j+1 ];</span><br><span class="line">    total +&#x3D; array[j+2 ]; &#x2F;* Main body of</span><br><span class="line">    total +&#x3D; array[j+3]; * loop is unrolled</span><br><span class="line">    total +&#x3D; array[j+4]; * for greater speed.</span><br><span class="line">    total +&#x3D; array[j+5]; *&#x2F;</span><br><span class="line">    total +&#x3D; array[j+6 ];</span><br><span class="line">    total +&#x3D; array[j+7 ];</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ol><li><strong>代码和显示不一致</strong>。比如，你的界面显示叫postal code，但是代码里确叫 zipcode.</li><li><strong>隐藏全局变量</strong>。把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。</li><li><strong>使用相似的变量名</strong>。如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08。parselnt 和 parseInt， D0Calc 和 DOCalc。还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。</li><li><strong>重载函数</strong>。使用相同的函数名，但是其功能和具体实现完全没有关系。</li><li><strong>操作符重载</strong>。重载操作符可以让你的代码变得诡异，感谢CCTV，感谢C++。这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。</li></ol><h2 id="文档和注释"><a href="#文档和注释" class="headerlink" title="文档和注释"></a>文档和注释</h2><ol><li><strong>在注释中撒谎</strong>。你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。</li><li><strong>注释里面写废话</strong>。比如：/* add 1 to i */</li><li><strong>只注释是什么，而不是为什么</strong>。</li><li><strong>不要注释秘密</strong>。如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改25个以上的位置的程序。千万别把这个事写在文档中。</li><li><strong>注重细节</strong>。当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有100页不能罢休，段落要有5级以上，段落编号要有500个以上，例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted). 这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13() 千万不要注释度衡单位。比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是MB还是KB。等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。</li><li><strong>Gotchas。陷阱</strong>，千万不要注释代码中的陷阱。</li><li><strong>在注释和文档中发泄不满</strong>。</li></ol><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><ol><li><strong>Java Casts</strong>。Java的类型转型是天赐之物。每一次当你从Collection里取到一个object的时候，你都需要把其转回原来的类型。因些，这些转型操作会出现在N多的地方。如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。</li><li><strong>利用Java的冗余</strong>。比如：Bubblegum b = new Bubblegom(); 和 swimmer = swimner + 1; 注意变量间的细微差别。</li><li><strong>从不验证</strong>。从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员</li><li><strong>不要封装</strong>。调用者需要知道被调用的所有的细节。</li><li><strong>克隆和拷贝</strong>。为了效率，你要学会使用copy + paste。你几乎都不用理解别人的代码，你就可以高效地编程了。</li><li><strong>巨大的listener</strong>。写一个listener，然后让你的所有的button类都使用这个listener，这样你可以在这个listener中整出一大堆if…else…语句，相当的刺激。</li><li><strong>使用三维数组</strong>。如果你觉得三维还不足够，你可以试试四维。</li><li><strong>混用</strong>。同时使用类的get/set方法和直接访问那个public变量。这样做的好处是可以极大的挫败维护人员。</li><li><strong>包装，包装，包装</strong>。把你所有的API都包装上6到8遍，包装深度多达4层以上。然后包装出相似的功能。</li><li><strong>没有秘密</strong>。把所有的成员都声明成public的。这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。</li><li><strong>排列和阻碍</strong>。把drawRectangle(height, width) 改成 drawRectangle(width, height)，等release了几个版本后，再把其改回去。这样维护程序的程序员们很快就不明白哪一个是对的。</li><li><strong>把变量改在名字上</strong>。例如，把setAlignment(int alignment)改成，setLeftAlignment, setRightAlignment, setCenterAlignment。</li><li><strong>Packratting。保留你所有的没有使用的和陈旧的变量，方法和代码</strong>。</li><li><strong>That’s Final。Final你所有的子结点的类</strong>，这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String不也是这样吗？</li><li><strong>避免使用layout</strong>。这样就使得我们只能使用绝对坐标。如果你的老大强制你使用layout，你可以考虑使用GridBagLayout，然后把grid坐标hard code.</li><li><strong>环境变量</strong>。如果你的代码需要使用环境变量。那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。</li><li><strong>使用全局变量</strong>。1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。2）使用全局变量可以让你的函数的参数变得少一些。</li><li><strong>配置文件</strong>。配置文件主要用于一些参数的初始化。在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。 膨胀你的类。让你的类尽可能地拥有各种臃肿和晦涩的方法。比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。</li><li><strong>使用子类</strong>。面向对象是写出无法维护代码的天赐之物。如果你有一个类有十个成为（变量和方法）你可以考虑写10个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。</li><li><strong>混乱你的代码</strong> 使用XML。XML的强大是无人能及的。使用XML你可以把本来只要10行的代码变成100行。而且，还要逼着别人也有XML。（参看，信XML得永生，信XML得自信）</li><li><strong>分解条件表达式</strong>。如：把 a==100分解成，a&gt;99 &amp;&amp; a&lt;101</li><li><strong>学会利用分号</strong>。如：if ( a );else;{ int d; d = c;}</li><li><strong>间接转型</strong>。如：把double转string，写成new Double(d).toString() 而不是 Double.toString(d)</li><li><strong>大量使用嵌套</strong>。一个NB的程序员可以在一行代码上使用超过10层的小括号（），或是在一个函数里使用超过20层的语句嵌套{}，把嵌套的if else 转成 [? :] 也是一件很NB的事。</li><li><strong>长代码行</strong>。一行的代码越长越好。这样别人阅读时就需要来来回回的</li><li><strong>不要过早的return</strong>。不要使用break，这样，你就需要至少5层以上的if-else来处理错误。</li><li>**不要使用{}。不要在if else使用{}**，尤其是在你重量地使用if-else嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。</li><li><strong>琐碎的封装</strong>。比较封装一个bool类，类里面什么都做，就是一个bool.</li><li><strong>循环</strong>。千万不可用for(int i=0; i&lt;n; i++)使用while代替for，交换n和i，把&lt;改成&lt;=，使用 i–调整步伐 。</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li><strong>从不测试</strong>。千万不要测试任何的出错处理，从来也不检测系统调用的返回值。</li><li><strong>永远不做性能测试</strong>。如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。</li><li><strong>不要写测试案例</strong>。不要做什么代码覆盖率测试，自动化测试。</li><li><strong>测试是懦夫行为</strong>。一个勇敢的程序员是根本不需要这一步的。太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉。这种担心害怕直接影响了生产力。如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。</li></ol><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><strong>你的老板什么都知道</strong>。无论你的老板有多SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识以及如何写出更加无法维护的代码。</li><li><strong>颠覆Help Desk</strong>。你要确保你那满是bug的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。</li><li><strong>闭嘴</strong>。对于一些像y2k这样的大bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个bug挣钱了。</li><li><strong>忽悠</strong>。你会学会忽悠，就算你的代码写得很烂，你也要为其挂上GoF设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。</li></ol><p>这个文档中还有很多很多，实在是太TMD强大了，大家自己去看看吧。有精力有能力的朋友不妨把其翻译成中文。</p><p>总之，我们的口号是—— <strong>Write Everywhere, Read Nowhere</strong></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkuhc0p8j307p052jr9.jpg"></p><p>（全文完）</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MongoDB</title>
      <link href="2019/05/16/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Docker%E5%AE%89%E8%A3%85MongoDB/"/>
      <url>2019/05/16/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Docker%E5%AE%89%E8%A3%85MongoDB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MongoDB 是一款较为常用的NOSQL 数据库，结合 Docker 使用，能实现轻松配置部署、迁移，本文以下为简要介绍如何在 Docker 中部署并使用 MongoDB。下文主要分为几个部分，内容如下：</p><ul><li>MongoDB 镜像安装</li><li>MongoDB 容器创建</li><li>MongoDB 容器数据目录挂载</li><li>MongoDB 数据迁移</li><li>MongoDB 常用 Docker 命令</li></ul><h2 id="MongoDB-Docker-镜像安装"><a href="#MongoDB-Docker-镜像安装" class="headerlink" title="MongoDB Docker 镜像安装"></a>MongoDB Docker 镜像安装</h2><p>MongoDB 提供官方镜像，下载安装镜像方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure><p>以上命令为安装 MongoDB 最新版本的镜像。</p><h2 id="MongoDB-Docker-容器创建"><a href="#MongoDB-Docker-容器创建" class="headerlink" title="MongoDB Docker 容器创建"></a>MongoDB Docker 容器创建</h2><p>MongoDB Docker 容器创建有以下几个问题：<br> 1- MongoDB 容器基本创建方法和数据目录挂载<br> 2- MongoDB 容器的数据迁移<br> 3- MongoDB 设置登录权限问题</p><h3 id="MongoDB-容器基本创建方法和数据目录挂载"><a href="#MongoDB-容器基本创建方法和数据目录挂载" class="headerlink" title="MongoDB 容器基本创建方法和数据目录挂载"></a>MongoDB 容器基本创建方法和数据目录挂载</h3><p>MongoDB 容器基本创建命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 27017:27017 -v &lt;LocalDirectoryPath&gt;:&#x2F;data&#x2F;db --name docker_mongodb -d mongo</span><br><span class="line"># docker run -p 27017:27017 --name docker_mongodb -d mongo</span><br></pre></td></tr></table></figure><p>在上面的命令中，几个命令参数的详细解释如下：<br> <code>-p</code> 指定容器的端口映射，mongodb 默认端口为 27017<br> <code>-v</code> 为设置容器的挂载目录，这里是将<LocalDirectoryPath>即本机中的目录挂载到容器中的/data/db中，作为 mongodb 的存储目录<br> <code>--name</code> 为设置该容器的名称<br> <code>-d</code> 设置容器以守护进程方式运行</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl2chngfj30rs061dgl.jpg" alt="img"></p><p>mongodb container.jpeg</p><p> 以上是 MongoDB 容器创建后的信息。</p><p> 接下来，我们使用 Robo 3T 图形界面软件尝试打开数据库。</p><p> 打开 RoBo 3T，选择新建连接，按照下图填入相关数据库信息，保存。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl2ndudgj30rs0hztb1.jpg" alt="img"></p><p>robo3t demo.jpeg</p><p> 然后点击连接，数据库连接成功，界面如下图显示</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl2vhrs6j30rs0i0gog.jpg" alt="img"></p><p>robo3t connected.jpeg</p><p> 这里我们可以看到，这是一个空的数据库。随后我们创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_database</span><br></pre></td></tr></table></figure><p>的数据库，然后在创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_collection</span><br></pre></td></tr></table></figure><p>的集合，再在这个集合中添加一个文档，文档内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;info&#39;: &#39;create success!&#39;&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过 RoBo 3T来查看目前数据库中数据的情况</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl36q4mvj30rs0hztak.jpg" alt="img"></p><p>robo3t data demo.jpeg</p><h2 id="容器数据迁移"><a href="#容器数据迁移" class="headerlink" title="容器数据迁移"></a>容器数据迁移</h2><p>接下来，我们先停止刚才创建的 docker_mongodb 容器，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop docker_mongodb</span><br></pre></td></tr></table></figure><p>然后我们再创建一个新的 MongoDB 容器，挂载刚才刚刚的数据目录，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 27017:27017 -v &lt;LocalDirectoryPath&gt;:&#x2F;data&#x2F;db --name docker_mongodb_migration -d mongo</span><br></pre></td></tr></table></figure><p>我们可以容器查询命令，查看当前 Docker 的容器状态，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure><p>这里的 <code>-a</code> 参数是查看所有的容器，包括已经停止的容器。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl3gsktbj30rs02amxj.jpg" alt="img"></p><p>mongodb migration.jpeg</p><p> 我们可以从输出结果看到，这时 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker_mongodb</span><br></pre></td></tr></table></figure><p> 的状态是 Exited，表示已经退出，而新创建的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker_mongodb_migration</span><br></pre></td></tr></table></figure><p> 的状态显示为 Up，表明数据库正在运行。</p><p>然后我们再打开 RoBo 3T，连接数据库，可以看到我们看到我们再 <code>docker_mongodb</code> 中创建的数据，这里表明我们新创建的 <code>docker_mongodb_migration</code> 挂载的数据目录和 <code>docker_mongodb</code> 相同，利用这一方法，我们可以实现简单的数据迁移。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl3s15ucj30rs0i0q4v.jpg" alt="img"></p><p>robo3t mongodb imgration.jpeg</p><h2 id="MongoDB-的-Docker-常用命令"><a href="#MongoDB-的-Docker-常用命令" class="headerlink" title="MongoDB 的 Docker 常用命令"></a>MongoDB 的 Docker 常用命令</h2><p>使用 Docker MongoDB 会使用到以下几个常用的命令。</p><p><strong>查看当前运行的容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看正在运行的容器</span><br><span class="line">docker container ls</span><br><span class="line"># 查看所有容器</span><br><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure><p><strong>停止容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定 CONTAINER ID 停止容器</span><br><span class="line">docker stop &lt;CONTAINER ID&gt;</span><br><span class="line"># 指定容器名称停止容器</span><br><span class="line">docker stop &lt;CONTAINER NAME&gt;</span><br></pre></td></tr></table></figure><p><strong>启动已经停止的容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定容器 CONTAINER ID 启动容器</span><br><span class="line">docker start &lt;CONTAINER ID&gt;</span><br><span class="line"># 指定容器名称启动容器</span><br><span class="line">docker start &lt;CONTAINER NAME&gt;</span><br></pre></td></tr></table></figure><p><strong>重启已经运行的容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定容器 CONTAINER ID 重启容器</span><br><span class="line">docker restart &lt;CONTAINER ID&gt;</span><br><span class="line"># 指定容器名称重启容器</span><br><span class="line">docker restart &lt;CONTAINER NAME&gt;</span><br></pre></td></tr></table></figure><p><strong>进入 mongo 交互模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;CONTAINER NAME&gt; mongo admin</span><br><span class="line">#docker终端</span><br><span class="line">docker run -it &#x2F;bin&#x2F;bash</span><br><span class="line">#更新源</span><br><span class="line">apt-get update</span><br><span class="line"># 安装 vim</span><br><span class="line">apt-get install vim</span><br><span class="line"># 修改 mongo 配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;mongod.conf.orig</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb备份脚本centos</title>
      <link href="2019/04/09/%E5%89%8D%E7%AB%AF/Mongodb%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%ACcentos/"/>
      <url>2019/04/09/%E5%89%8D%E7%AB%AF/Mongodb%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%ACcentos/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="创建Mongodb数据库备份目录"><a href="#创建Mongodb数据库备份目录" class="headerlink" title="创建Mongodb数据库备份目录"></a>创建Mongodb数据库备份目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;home&#x2F;backup&#x2F;mongod_bak&#x2F;mongod_bak_now</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;home&#x2F;backup&#x2F;mongod_bak&#x2F;mongod_bak_list</span><br></pre></td></tr></table></figure><h4 id="新建Mongodb数据库备份脚本"><a href="#新建Mongodb数据库备份脚本" class="headerlink" title="新建Mongodb数据库备份脚本"></a>新建Mongodb数据库备份脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">DUMP&#x3D;&#x2F;www&#x2F;server&#x2F;mongodb&#x2F;bin&#x2F;mongodump #mongodump备份文件执行路径</span><br><span class="line"></span><br><span class="line">OUT_DIR&#x3D;&#x2F;home&#x2F;backup&#x2F;mongod_bak&#x2F;mongod_bak_now #临时备份目录</span><br><span class="line"></span><br><span class="line">TAR_DIR&#x3D;&#x2F;home&#x2F;backup&#x2F;mongod_bak&#x2F;mongod_bak_list #备份存放路径</span><br><span class="line"></span><br><span class="line">DATE&#x3D;&#96;date +%Y_%m_%d&#96; #获取当前系统时间</span><br><span class="line"></span><br><span class="line">DB_USER&#x3D;username #数据库账号</span><br><span class="line"></span><br><span class="line">DB_PASS&#x3D;password #数据库密码</span><br><span class="line"></span><br><span class="line">DAYS&#x3D;7 #DAYS&#x3D;7代表删除7天前的备份，即只保留最近7天的备份</span><br><span class="line"></span><br><span class="line">TAR_BAK&#x3D;&quot;mongod_bak_$DATE.tar.gz&quot; #最终保存的数据库备份文件名</span><br><span class="line"></span><br><span class="line">cd $OUT_DIR</span><br><span class="line"></span><br><span class="line">rm -rf $OUT_DIR&#x2F;*</span><br><span class="line"></span><br><span class="line">mkdir -p $OUT_DIR&#x2F;$DATE</span><br><span class="line"></span><br><span class="line">$DUMP -u $DB_USER -p $DB_PASS -o $OUT_DIR&#x2F;$DATE #备份全部数据库</span><br><span class="line"></span><br><span class="line">tar -zcvf $TAR_DIR&#x2F;$TAR_BAK $OUT_DIR&#x2F;$DATE #压缩为.tar.gz格式</span><br><span class="line"></span><br><span class="line">find $TAR_DIR&#x2F; -mtime +$DAYS -delete #删除7天前的备份文件</span><br></pre></td></tr></table></figure><h4 id="Mongodb数据库恢复"><a href="#Mongodb数据库恢复" class="headerlink" title="Mongodb数据库恢复"></a>Mongodb数据库恢复</h4><p>–drop参数：恢复数据之前删除原来的数据，避免数据重复</p><p>–noIndexRestore参数：恢复数据时不创建索引</p><p>–dir参数：数据库备份目录</p><p>-d参数：后面跟要恢复的数据库名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#恢复全部数据库：</span><br><span class="line">mongorestore -u $DB_USER -p $DB_PASS --authenticationDatabase &quot;admin&quot; --noIndexRestore --dir &#x2F;home&#x2F;backup&#x2F;mongod_bak&#x2F;mongod_bak_now&#x2F;2019_04_09&#x2F;</span><br><span class="line"></span><br><span class="line">#恢复单个数据库</span><br><span class="line">mongorestore -u $DB_USER -p $DB_PASS --authenticationDatabase &quot;admin&quot; --noIndexRestore -d dbname --dir &#x2F;home&#x2F;backup&#x2F;mongod_bak&#x2F;mongod_bak_now&#x2F;2019_04_09&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你想知道的关于JavaScript作用域的一切</title>
      <link href="2019/04/03/%E5%89%8D%E7%AB%AF/%E4%BD%A0%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E5%85%B3%E4%BA%8EJavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E4%B8%80%E5%88%87/"/>
      <url>2019/04/03/%E5%89%8D%E7%AB%AF/%E4%BD%A0%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E5%85%B3%E4%BA%8EJavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E4%B8%80%E5%88%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="你想知道的关于JavaScript作用域的一切-译"><a href="#你想知道的关于JavaScript作用域的一切-译" class="headerlink" title="你想知道的关于JavaScript作用域的一切(译)"></a>你想知道的关于JavaScript作用域的一切(译)</h2><p>JavaScript中有许多章节是关于<code>scope</code>的,但是对于初学者来说(甚至是一些有经验的JavaScript开发者),这些有关作用域的章节既不直接也不容易理解.<br>这篇文章的目的就是为了帮助那些想更深一步学习了解JavaScript作用域的开发者,尤其是当他们听到一些关于作用域的单词的时候,<br>好比:<code>作用域(scope)</code>,<code>闭包(closure)</code>,<code>this</code>,<code>命名空间(namespace)</code>,<code>函数作用域(function scope)</code>,<code>全局作用域(global scope)</code>,<code>词法作用域(lexical)</code>,<code>公有变量(public scope)</code>,<code>私有变量(private scope)</code>.<br>希望通过这篇文章你可以知道下面这些问题的答案:</p><ul><li>什么是作用域?</li><li>什么是全局(局部)作用域?</li><li>什么是命名空间,它和作用域有什么不同?</li><li><code>this</code>关键字是什么,作用于又是怎么影响它的?</li><li>什么是函数/词法作用域?</li><li>什么是闭包?</li><li>什么是共有/私有作用域?</li><li>我怎么样才能够理解/创建/实践上面所有的情况</li></ul><h3 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域?"></a>什么是作用域?</h3><p>在JavaScript中,作用域指的是你代码的当前上下文环境.作用域可以被全局或者局部地定义.理解JavaScript的作用域是让你写出稳健的代码并且成为一个更好的开发者的关键.<br>你将会理解那些变量或者函数是可以访问的,并且有能力去改变你代码的作用域进而有能力去写出运行速度更快,更容易维护,当然调试也非常容易的代码.<br>别把作用域想的太复杂,那么我们现在是在<code>A作用域</code>还是<code>B作用域</code>?</p><h3 id="什么是全局作用域"><a href="#什么是全局作用域" class="headerlink" title="什么是全局作用域"></a>什么是全局作用域</h3><p>当你在开始书写JavaScript代码的时候,你所处的作用域就是我们所说的<code>全局作用域</code>.如果我们定义了一个变量,那么它就是被全局定义的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global scope</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Todd&#x27;</span>;</span><br></pre></td></tr></table></figure><p>全局作用域是你最好的朋友也是你最坏的噩梦;学会去掌控你的作用域是容易的,如果你那样做了,你将不会遇到一些关于全局作用域的问题(通常是关于命名空间的冲突).<br>你也许会经常听到有人在说<em>全局作用域是不好的</em>,但是你从来没有考虑过他们那样说的真正原因.全局作用域当然没有他们说的那样,相反全局作用域是很好的,<br>你需要使用它去创建能够在别的作用域访问的模块还有接口(APIs),你要在使用它的优点的同时确保不产生新的问题.</p><p>很多人以前都使用过<code>jQuery</code>,当你写下下面的代码的时候…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="string">&#x27;.myClass&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们这时就是通过全局作用域来使用<code>jQuery</code>的,我们可以把这种使用叫做<code>命名空间</code>.有时命名空间就是一个可以用不同单词来替代的作用域,但是通常指的是最高一级的作用域.<br>在这个例子中,<code>jQuery</code>是在全局作用域中,所以也是我们的命名空间.这个<code>jQuery</code>的命名空间是定义在全局作用域上的,它作为这个<code>jQuery</code>库的命名空间,<br>所有在<code>jQuery</code>库内的东西都是这个命名空间的派生物.</p><h3 id="什么是局部作用域"><a href="#什么是局部作用域" class="headerlink" title="什么是局部作用域"></a>什么是局部作用域</h3><p>局部作用域指的是那些从全局作用域中定义的许多作用域.JavaScript只有一个全局作用域,每一个定义的函数都有自己的局部(嵌套)作用域.那些定义在别的函数中的函数有一个局部的作用域,<br>并且这个作用域是指向外部的函数.</p><p>如果我定义了一个函数,并且在里面创建了一些变量,这些变量的作用域就是局部的.</p><p>把下面的当做一个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scope A: Global scope out here</span></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Scope B: Local scope in here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>任何局部的东西在全局是不可见的,除非这些东西被导出;这句话的意思是这样的,如果我在一个新的作用域里定义了一些函数或者变量的话,这些变量或者函数在当前的作用域之外是不可以访问的.<br>下面的代码是关于上面所说的那些的一个小例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Todd&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// Todd</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: name is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><p>变量<code>name</code>是局部的变量,它并没有暴露在父作用域上,因此它是没有被定义的.</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>JavaScript中所有的作用域在创建的时候都只伴随着<code>函数作用域</code>,循环语句像<code>for</code>或者<code>while</code>,条件语句像<code>if</code>或者<code>switch</code>都不能够产生新的作用域.<br><code>新的函数 = 新的作用域</code>这就是规则.下面一个简单的例子用来解释作用域的创建:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scope A</span></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Scope B</span></span><br><span class="line">  <span class="keyword">var</span> myOtherFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Scope C</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以说很容易创建新的作用域和局部的变量/函数/对象.</p><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>每当你看到一个函数里面存在着另一个函数,那么内部的函数能够访问外部函数的作用域,这就叫做词法作用域或者闭包;也被认为是静态作用域,下面的代码是最简单的方法再一次去解释我们所说的内容:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scope A</span></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Scope B</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Todd&#x27;</span>; <span class="comment">// defined in Scope B</span></span><br><span class="line">  <span class="keyword">var</span> myOtherFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Scope C: `name` is accessible here!</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你也许注意到<code>myOtherFunction</code>没有在这里被调用,它只是简单地被定义.当然它的调用顺序也会影响到作用域里面变量的表现,<br>在这里我定义了<code>myOtherFunction</code>并且在<code>console</code>语句之后调用了它:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Todd&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> myOtherFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;My name is &#x27;</span> + name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  myOtherFunction(); <span class="comment">// call function</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will then log out:</span></span><br><span class="line"><span class="comment">// `Todd`</span></span><br><span class="line"><span class="comment">// `My name is Todd`</span></span><br></pre></td></tr></table></figure><p>很容易理解和使用词法作用域,任何被定义在它的父作用域上的变量/对象/函数,在作用域链上都是可以访问到的.例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Todd&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> scope1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// name is available here</span></span><br><span class="line">  <span class="keyword">var</span> scope2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// name is available here too</span></span><br><span class="line">    <span class="keyword">var</span> scope3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// name is also available here!</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要记住的一个重要地方是,词法作用域是不可逆的,我们可以从下面的例子中看到结果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name = undefined</span></span><br><span class="line"><span class="keyword">var</span> scope1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// name = undefined</span></span><br><span class="line">  <span class="keyword">var</span> scope2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// name = undefined</span></span><br><span class="line">    <span class="keyword">var</span> scope3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> name = <span class="string">&#x27;Todd&#x27;</span>; <span class="comment">// locally scoped</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然我们可以返回一个指向<code>name</code>的引用,但是永远不会是<code>name</code>变量本身.</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域链为一个给定的函数建立了作用域.就像我们知道的那样,每一个被定义的函数都有它自己嵌套的作用域,并且任何定义在别的函数中的函数都有一个<br>连接外部函数的局部作用域,这个连接就是我们所说的作用域链中的链.它常常是在代码中那些能够定义作用域的位置,当我们访问一个变量的时候,<br><code>JavaScript</code>从最里面的作用域沿着作用域链向外部开始查找,直到找到我们想要的那个变量/对象/函数.</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包和词法作用域是紧密联系在一起的,关于闭包是如何工作的一个好例子就是当我们返回一个函数的引用的时候,这是一个更实际的用法.<br>在我们的作用域里,我们可以返回一些东西以便这些东西能够在父作用域里被访问和使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="string">&#x27;Hello, &#x27;</span> + name;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们这里使用的<code>闭包</code>概念使我们在<code>sayHello</code>的作用域不能够被外部(公共的)作用域访问.单独运行这个函数不会有什么结果因为它只是返回了一个函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sayHello(<span class="string">&#x27;Todd&#x27;</span>); <span class="comment">// nothing happens, no errors, just silence...</span></span><br></pre></td></tr></table></figure><p>这个函数返回了一个函数,那就意味着我们需要对它进行赋值,然后对它进行调用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> helloTodd = sayHello(<span class="string">&#x27;Todd&#x27;</span>);</span><br><span class="line">helloTodd(); <span class="comment">// will call the closure and log &#x27;Hello, Todd&#x27;</span></span><br></pre></td></tr></table></figure><p>好吧,我撒谎了,你也可以直接调用它,你也许之前已经见到过像这样的函数,这种方式也是可以运行你的闭包:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sayHello(<span class="string">&#x27;Bob&#x27;</span>)(); <span class="comment">// calls the returned function without assignment</span></span><br></pre></td></tr></table></figure><p>AngularJS的<code>$compile</code>方法使用了上面的技术,你可以将当前作用的引用域传递给这个闭包:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$compile(template)(scope);</span><br></pre></td></tr></table></figure><p>我们可以猜测他们关于这个方法的(简化)代码大概是下面这个样子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $compile = <span class="function"><span class="keyword">function</span> (<span class="params">template</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// some magic stuff here</span></span><br><span class="line">  <span class="comment">// scope is out of scope, though...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">scope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// access to `template` and `scope` to do magic with too</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然一个函数不必有返回值也能够被称为一个闭包.只要能够访问外部变量的一个即时的词法作用域就创建了一个闭包.</p><h3 id="作用域和this"><a href="#作用域和this" class="headerlink" title="作用域和this"></a>作用域和<code>this</code></h3><p>每一个作用域都绑定了一个不同值的<code>this</code>,这取决于这个函数是如何调用的.我们都使用过<code>this</code>关键词,但是并不是所有的人都理解它,还有当它被调用的时候是如何的不同.<br>默认情况下,<code>this</code>指向的是最外层的全局对象<code>window</code>.我们可以很容易的展示关于不同的调用方式我们绑定的<code>this</code>的值也是不同的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// this = global, [object Window]</span></span><br><span class="line">&#125;;</span><br><span class="line">myFunction();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line">myObject.myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// this = Object &#123; myObject &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.nav&#x27;</span>); <span class="comment">// &lt;nav class=&quot;nav&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> toggleNav = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// this = &lt;nav&gt; element</span></span><br><span class="line">&#125;;</span><br><span class="line">nav.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleNav, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>当我们处理<code>this</code>的值的时候我们又遇到了一些问题,举个例子如果我添加一些代码在上面的例子中.就算是在同一个函数内部,作用域和<code>this</code>都是会发生改变的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.nav&#x27;</span>); <span class="comment">// &lt;nav class=&quot;nav&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> toggleNav = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// &lt;nav&gt; element</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// [object Window]</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line">nav.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleNav, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>所以这里发生了什么?我们创建了一个新的作用域,这个作用域没有被我们的事件处理程序调用,所以默认情况下,这里的<code>this</code>指向的是<code>window</code>对象.<br>当然我们可以做一些事情不让这个新的作用域影响我们,以便我们能够访问到这个正确的<code>this</code>值.你也许已经见到过我们这样做的方法了,我们可以使用<code>that</code>变量缓存当前的<code>this</code>值,<br>然后在新的作用域中使用它.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.nav&#x27;</span>); <span class="comment">// &lt;nav class=&quot;nav&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> toggleNav = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(that); <span class="comment">// &lt;nav&gt; element</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that); <span class="comment">// &lt;nav&gt; element</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line">nav.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleNav, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这是一个小技巧,让我们能够使用到正确的<code>this</code>值,并且在新的作用域解决一些问题.</p><h3 id="使用-call-apply-或者-bind-改变作用域"><a href="#使用-call-apply-或者-bind-改变作用域" class="headerlink" title="使用.call(),.apply()或者.bind()改变作用域"></a>使用<code>.call()</code>,<code>.apply()</code>或者<code>.bind()</code>改变作用域</h3><p>有时,你需要根据你所处理的情况来处理JavaScript的作用域.一个简单的例子展示如何在循环的时候改变作用域:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;nav li&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// [object Window]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>this</code>没有指向我们需要的元素,我们不能够在这里使用<code>this</code>调用我们需要的元素,或者改变循环里面的作用域.<br>让我们来思考一下如何能够改变我们的作用域(好吧,看起来好像是我们改变了作用域,但是实际上我们真正做的事情是去改变我们那个函数的运行上下文).</p><ul><li><p>.call()和.apply()<br><code>.call()</code>和<code>.apply()</code>函数是非常实用的,它们允许你传递一个作用域到一个函数里面,这个作用与绑定了正确的<code>this</code>值.<br>让我们来处理上面的那些代码吧,让循环里面的<code>this</code>指向正确的元素值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;nav li&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;).call(links[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以看到我是如何做的,首先我们创建了一个立即执行的<strong>函数</strong>(<em>新的函数就表明创建了新的作用域</em>),<br>然后我们调用了<code>.call()</code>方法,将数组里面的循环元素<code>link[i]</code>当做参数传递给了<code>.call()</code>方法,<br>然后我们就改变了哪个立即执行的函数的作用域.我们可以使用<code>.call()</code>或者<code>.apply()</code>方法,但是它们的不同之处是参数的传递形式,<br><code>.call()</code>方法的参数的传递形式是这样的<code>.call(scope, arg1, arg2, arg3)</code>,<code>.apply()</code>的参数的传递形式是这样的<code>.apply(scope, [arg1, arg2])</code>.</p><p>所以当你需要改变你的函数的作用域的时候,不要使用下面的方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunction(); <span class="comment">// invoke myFunction</span></span><br></pre></td></tr></table></figure><p>而应该是这样,使用<code>.call()</code>去调用我们的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunction.call(scope); <span class="comment">// invoke myFunction using .call()</span></span><br></pre></td></tr></table></figure></li><li><p>.bind()<br>不像上面的方法,使用<code>.bind()</code>方法不会调用一个函数,它仅仅在函数调用之前,绑定我们需要的值.就像我们知道的那样,<br>我们不能够给函数的引用传递参数.就像下面这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// works</span></span><br><span class="line">nav.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleNav, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// will invoke the function immediately</span></span><br><span class="line">nav.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleNav(arg1, arg2), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>我们可以解决这个问题,通过在它里面创建一个新的函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nav.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  toggleNav(arg1, arg2);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>但是这样就改变了作用域,我们又一次创建了一个不需要的函数,这样做需要花费很多,当我们在一个循环中绑定事件监听的时候.<br>这时候就需要<code>.bind()</code>闪亮登场了,因为我们可以使用他来进行绑定作用域,传递参数,并且函数还不会立即执行:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nav.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleNav.bind(scope, arg1, arg2), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>上面的函数没有被立即调用,并且作用域在需要的情况下也会改变,而且函数的参数也是可以通过这个方法传入的.</p><h3 id="私有-共有的作用域"><a href="#私有-共有的作用域" class="headerlink" title="私有/共有的作用域"></a>私有/共有的作用域</h3></li></ul><p>在许多编程语言中,你应该听到过私有作用域或者共有作用域,在JavaScript中,是没有这些概念的.当然我们也可以通过一些手段比如闭包来模拟公共作用域或者是私有作用域.</p><p>通过使用JavaScript的设计模式,比如<code>模块</code>模式,我们可以创造公共作用域和私有作用域.一个简单的方法创建私有作用域就是使用一个函数去包裹我们自己定义的函数.<br>就像上面所说的那样,函数创建了一个与全局作用域隔离的一个作用域:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// private scope inside here</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们可能需要为我们的应用添加一些函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do some stuff here</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>但是当我们去调用位于函数内部的函数的时候,这些函数在外部的作用域是不可得到的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do some stuff here</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">myFunction(); <span class="comment">// Uncaught ReferenceError: myFunction is not defined</span></span><br></pre></td></tr></table></figure><p>成功了,我们创建了私有的作用域.但是问题又来了,我如何在公共作用域内使用我们之前定义好的函数?不要担心,我们的模块设计模式或者说是提示模块模式,<br>允许我们将我们的函数在公共作用域内发挥作用,它们使用了公共作用域和私有作用域以及对象.在下面我定义了我的全局命名空间,叫做<code>Module</code>,<br>这个命名空间里包含了与那个模块相关的所有代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define module</span></span><br><span class="line"><span class="keyword">var</span> Module = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    myMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;myMethod has been called.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// call module + methods</span></span><br><span class="line">Module.myMethod();</span><br></pre></td></tr></table></figure><p>上面的<code>return</code>声明表明了我们返回了我们的<code>public</code>方法,这些方法是可以在全局作用域里使用的,不过需要通过命名空间来调用.<br>这就表明了我们的那个模块只是存在于哪个命名空间中,它可以包含我们想要的任意多的方法或者变量.我们也可以按照我们的意愿来扩展这个模块:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define module</span></span><br><span class="line"><span class="keyword">var</span> Module = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    myMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    someOtherMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// call module + methods</span></span><br><span class="line">Module.myMethod();</span><br><span class="line">Module.someOtherMethod();</span><br></pre></td></tr></table></figure><p>那么我们的私有方法该如何使用以及定义呢?总是有许多的开发者随意的堆砌他们的方法在那个模块里面,这样的做法污染了全局的命名空间.<br>那些帮助我们的代码运行并且是不必要出现在全局作用域的方法,就不要导出在全局作用域中,我们只导出那些需要在全局作用域内被调用的函数.<br>我们可以定义私有的方法,只要不返回它们就行:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Module = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> privateMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    publicMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上面的代码意味着,<code>publicMethod</code>是可以在全局的命名空间里调用的,但是<code>privateMethod</code>是不可以的,因为它是在私有的作用域中被定义的.<br>这些私有的函数方法一般都是一些帮助性的函数,比如<code>addClass</code>,<code>removeClass</code>,<code>Ajax/XHR calls</code>,<code>Arrays</code>,<code>Objects</code>等等.</p><p>这里有一些概念需要我们知道,就是同一个作用域中的函数变量可以访问在同一个作用域中的函数或者变量,甚至是这些函数已经被作为结果返回.<br>这意味着,我们的公共函数可以访问我们的私有函数,所以这些私有的函数是仍然可以运行的,只不过他们不可以在公共的作用域里被访问而已.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Module = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> privateMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    publicMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// has access to `privateMethod`, we can call it:</span></span><br><span class="line">      <span class="comment">// privateMethod();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这允许一个非常强大级别的交互,以及代码的安全;JavaScript非常重要的一个部分就是确保安全.这就是为什么我们不能够把所有的函数都放在公共的作用域内,<br>因为一旦那样做了就会暴漏我们系统的漏洞,让一些心怀恶意的人能够对这些漏洞进行攻击.</p><p>下面的例子就是返回了一个对象,然后在这个对象上面调用一些公有的方法的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Module = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myModule = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> privateMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  myModule.publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  myModule.anotherPublicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> myModule; <span class="comment">// returns the Object with public methods</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">Module.publicMethod();</span><br></pre></td></tr></table></figure><p>一个比较规范的命名私有方法的约定是,在私有方法的名字前面加上一个下划线,这可以快速的帮助你区分公有方法或者私有方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Module = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _privateMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这个约定帮助我们可以简单地给我们的函数索引赋值,当我们返回一个匿名对象的时候:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Module = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _privateMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    publicMethod: publicMethod,</span><br><span class="line">    anotherPublicMethod: anotherPublicMethod</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>原文链接: <a href="https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/"><strong>Everything you wanted to know about JavaScript scope</strong></a></p><p>原文作者: <a href="https://github.com/toddmotto"><strong>Todd Motto</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>五句话搞定JavaScript作用域</title>
      <link href="2019/04/03/%E5%89%8D%E7%AB%AF/%E4%BA%94%E5%8F%A5%E8%AF%9D%E6%90%9E%E5%AE%9AJavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2019/04/03/%E5%89%8D%E7%AB%AF/%E4%BA%94%E5%8F%A5%E8%AF%9D%E6%90%9E%E5%AE%9AJavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>提示：此文针对ES5，不涉及ES2015（又称ES6）</p><p>JavaScript的作用域一直以来是前端开发中比较难以理解的知识点，对于JavaScript的作用域主要记住几句话，走遍天下都不怕。</p><p><strong>一、“JavaScript中无块级作用域”</strong></p><p>在Java或C#中存在块级作用域，即：大括号也是一个作用域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        String name = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        string name = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>在JavaScript语言中无块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出： seven</span></span><br></pre></td></tr></table></figure><p>补充：标题之所以添加双引号是因为JavaScript6中新引入了 let 关键字，用于指定变量属于块级作用域。</p><h3 id="二、JavaScript采用函数作用域"><a href="#二、JavaScript采用函数作用域" class="headerlink" title="二、JavaScript采用函数作用域"></a><strong>二、JavaScript采用函数作用域</strong></h3><p>在JavaScript中每个函数作为一个作用域，在外部无法访问内部作用域中的变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerValue = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Main();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(innerValue);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: innerValue is not defined</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="三、JavaScript的作用域链"><a href="#三、JavaScript的作用域链" class="headerlink" title="三、JavaScript的作用域链"></a><strong>三、JavaScript的作用域链</strong></h3><p>由于JavaScript中的每个函数作为一个作用域，如果出现函数嵌套函数，则就会出现作用域链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xo = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xo = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xo = <span class="string">&#x27;alvin&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(xo);</span><br><span class="line">    &#125;</span><br><span class="line">    inner();</span><br><span class="line">&#125;</span><br><span class="line">Func();</span><br><span class="line"><span class="comment">// 输出结果  alvin</span></span><br></pre></td></tr></table></figure><p>如上述代码则出现三个作用域组成的作用域链，如果出现作用域链后，那么寻找变量时候就会出现顺序，对于上述实例：</p><p>当执行console.log(xo)时，其寻找顺序为根据作用域链从内到外的优先级寻找，如果内层没有就逐步向上找，直到没找到抛出异常。</p><h4 id="四、JavaScript的作用域链执行前已创建"><a href="#四、JavaScript的作用域链执行前已创建" class="headerlink" title="四、JavaScript的作用域链执行前已创建"></a><strong>四、JavaScript的作用域链执行前已创建</strong></h4><p>JavaScript的作用域在被执行之前已经创建，日后再去执行时只需要按照作用域链去寻找即可。</p><p>示例一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xo = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xo = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> ret = Func();</span><br><span class="line">ret();</span><br><span class="line"><span class="comment">// 输出结果： seven</span></span><br></pre></td></tr></table></figure><p>上述代码，在函数被调用之前作用域链已经存在：</p><p>全局作用域 -&gt; Func函数作用域 -&gt; inner函数作用域 </p><p>当执行 ret() 时，由于其代指的是inner函数，此函数的作用域链在执行之前已经被定义为：全局作用域 -&gt; Func函数作用域 -&gt; inner函数作用域，所以，在执行 ret()  时，会根据已经存在的作用域链去寻找变量。</p><p>示例二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xo = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xo = <span class="string">&quot;eirc&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(xo);</span><br><span class="line">    &#125;</span><br><span class="line">    xo = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> ret = Func();</span><br><span class="line">ret();</span><br><span class="line"><span class="comment">// 输出结果： seven</span></span><br></pre></td></tr></table></figure><p>上述代码和示例一的目的相同，也是强调在函数被调用之前作用域链已经存在：</p><p>全局作用域 -&gt; Func函数作用域 -&gt; inner函数作用域 </p><p>不同的时，在执行【var ret = Func();】时，Func作用域中的xo变量的值已经由 “eric” 被重置为 “seven”，所以之后再执行【ret();】时，就只能找到“seven”。</p><p>示例三：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xo = <span class="string">&#x27;alex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xo = <span class="string">&quot;seven&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> Bar;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> ret = Func();</span><br><span class="line">ret();</span><br><span class="line"><span class="comment">// 输出结果： alex</span></span><br></pre></td></tr></table></figure><p>上述代码，在函数被执行之前已经创建了两条作用域链：</p><p>全局作用域 -&gt; Bar函数作用域<br>全局作用域 -&gt; Func函数作用域 </p><p>当执行 ret()  时，ret代指的Bar函数，而Bar函数的作用域链已经存在：全局作用域 -&gt; Bar函数作用域，所以，执行时会根据已经存在的作用域链去寻找。</p><h3 id="五、声明提前"><a href="#五、声明提前" class="headerlink" title="五、声明提前"></a><strong>五、声明提前</strong></h3><p>在JavaScript中如果不创建变量，直接去使用，则报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(xxoo);</span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: xxoo is not defined</span></span><br></pre></td></tr></table></figure><p>JavaScript中如果创建值而不赋值，则该值为 undefined，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xxoo;</span><br><span class="line"><span class="built_in">console</span>.log(xxoo);</span><br><span class="line"><span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><p>在函数内如果这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xo);</span><br><span class="line">    <span class="keyword">var</span> xo = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Foo();</span><br><span class="line"><span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><p>上述代码，不报错而是输出 undefined，其原因是：JavaScript的函数在被执行之前，会将其中的变量全部声明，而不赋值。所以，相当于上述实例中，函数在“预编译”时，已经执行了var xo；所以上述代码中输出的是undefined。</p><p>原文链接： <a href="http://www.cnblogs.com/wupeiqi/p/5649402.html"><strong>五句话搞定JavaScript作用域</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图解Javascript上下文与作用域</title>
      <link href="2019/04/03/%E5%89%8D%E7%AB%AF/%E5%9B%BE%E8%A7%A3Javascript%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2019/04/03/%E5%89%8D%E7%AB%AF/%E5%9B%BE%E8%A7%A3Javascript%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文尝试阐述Javascript中的上下文与作用域背后的机制，主要涉及到执行上下文（execution context）、作用域链（scope chain）、闭包（closure）、<code>this</code>等概念。</p><h2 id="Execution-context"><a href="#Execution-context" class="headerlink" title="Execution context"></a>Execution context</h2><p>执行上下文（简称上下文）决定了Js执行过程中可以获取哪些变量、函数、数据，一段程序可能被分割成许多不同的上下文，每一个上下文都会绑定一个变量对象（variable object），它就像一个容器，用来存储当前上下文中所有已定义或可获取的变量、函数等。位于最顶端或最外层的上下文称为全局上下文（global context），全局上下文取决于执行环境，如Node中的<code>global</code>和Browser中的<code>window</code>：</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl04nmscj30hs0c6wfc.jpg" alt="js global context"></p><p>需要注意的是，上下文与作用域（scope）是不同的概念。Js本身是单线程的，每当有function被执行时，就会产生一个新的上下文，这一上下文会被压入Js的上下文堆栈（context stack）中，function执行结束后则被弹出，因此Js解释器总是在栈顶上下文中执行。在生成新的上下文时，首先会绑定该上下文的变量对象，其中包括<code>arguments</code>和该函数中定义的变量；之后会创建属于该上下文的作用域链（scope chain），最后将<code>this</code>赋予这一function所属的Object，这一过程可以通过下图表示：</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl0w6i4fj30hs0cq0tw.jpg" alt="js context stack"></p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>上文提到<code>this</code>被赋予function所属的Object，具体来说，当function是定义在global对中时，<code>this</code>指向global；当function作为Object的方法时，<code>this</code>指向该Object：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 1;</span><br><span class="line">var f &#x3D; function()&#123;</span><br><span class="line">  console.log(this.x);</span><br><span class="line">&#125;</span><br><span class="line">f();  &#x2F;&#x2F; -&gt; 1</span><br><span class="line"></span><br><span class="line">var ff &#x3D; function()&#123;</span><br><span class="line">  this.x &#x3D; 2;</span><br><span class="line">  console.log(this.x);</span><br><span class="line">&#125;</span><br><span class="line">ff(); &#x2F;&#x2F; -&gt; 2</span><br><span class="line">x     &#x2F;&#x2F; -&gt; 2</span><br><span class="line"></span><br><span class="line">var o &#x3D; &#123;x: &quot;o&#39;s x&quot;, f: f&#125;;</span><br><span class="line">o.f(); &#x2F;&#x2F; &quot;o&#39;s x&quot;</span><br></pre></td></tr></table></figure><h2 id="Scope-chain"><a href="#Scope-chain" class="headerlink" title="Scope chain"></a>Scope chain</h2><p>上文提到，在function被执行时生成新的上下文时会先绑定当前上下文的变量对象，再创建作用域链。我们知道function的定义是可以嵌套在其他function所创建的上下文中，也可以并列地定义在同一个上下文中（如global）。作用域链实际上就是自下而上地将所有嵌套定义的上下文所绑定的变量对象串接到一起，使嵌套的function可以“继承”上层上下文的变量，而并列的function之间互不干扰：</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl16vrnmj30hs0f3my1.jpg" alt="js scope chain"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; &#39;global&#39;;</span><br><span class="line">function a()&#123;</span><br><span class="line">  var x &#x3D; &quot;a&#39;s x&quot;;</span><br><span class="line">  function b()&#123;</span><br><span class="line">    var y &#x3D; &quot;b&#39;s y&quot;;</span><br><span class="line">    console.log(x);</span><br><span class="line">  &#125;;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line">function c()&#123;</span><br><span class="line">  var x &#x3D; &quot;c&#39;s x&quot;;</span><br><span class="line">  function d()&#123;</span><br><span class="line">    console.log(y);</span><br><span class="line">  &#125;;</span><br><span class="line">  d();</span><br><span class="line">&#125;</span><br><span class="line">a();  &#x2F;&#x2F; -&gt; &quot;a&#39;s x&quot;</span><br><span class="line">c();  &#x2F;&#x2F; -&gt; ReferenceError: y is not defined</span><br><span class="line">x     &#x2F;&#x2F; -&gt; &quot;global&quot;</span><br><span class="line">y     &#x2F;&#x2F; -&gt; ReferenceError: y is not defined</span><br></pre></td></tr></table></figure><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>如果理解了上文中提到的上下文与作用域链的机制，再来看闭包的概念就很清楚了。每个function在调用时会创建新的上下文及作用域链，而作用域链就是将外层（上层）上下文所绑定的变量对象逐一串连起来，使当前function可以获取外层上下文的变量、数据等。如果我们在function中定义新的function，同时将内层function作为值返回，那么内层function所包含的作用域链将会一起返回，即使内层function在其他上下文中执行，其内部的作用域链仍然保持着原有的数据，而当前的上下文可能无法获取原先外层function中的数据，使得function内部的作用域链被保护起来，从而形成“闭包”。看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 100;</span><br><span class="line">var inc &#x3D; function()&#123;</span><br><span class="line">  var x &#x3D; 0;</span><br><span class="line">  return function()&#123;</span><br><span class="line">    console.log(x++);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var inc1 &#x3D; inc();</span><br><span class="line">var inc2 &#x3D; inc();</span><br><span class="line"></span><br><span class="line">inc1();  &#x2F;&#x2F; -&gt; 0</span><br><span class="line">inc1();  &#x2F;&#x2F; -&gt; 1</span><br><span class="line">inc2();  &#x2F;&#x2F; -&gt; 0</span><br><span class="line">inc1();  &#x2F;&#x2F; -&gt; 2</span><br><span class="line">inc2();  &#x2F;&#x2F; -&gt; 1</span><br><span class="line">x;       &#x2F;&#x2F; -&gt; 100</span><br></pre></td></tr></table></figure><p>执行过程如下图所示，<code>inc</code>内部返回的匿名function在创建时生成的作用域链包括了<code>inc</code>中的<code>x</code>，即使后来赋值给<code>inc1</code>和<code>inc2</code>之后，直接在<code>global context</code>下调用，它们的作用域链仍然是由定义中所处的上下文环境决定，而且由于<code>x</code>是在<code>function inc</code>中定义的，无法被外层的<code>global context</code>所改变，从而实现了闭包的效果：</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zl1j6sm5j30hs092aar.jpg" alt="js closure"></p><h2 id="this-in-closure"><a href="#this-in-closure" class="headerlink" title="this in closure"></a>this in closure</h2><p>我们已经反复提到执行上下文和作用域实际上是通过function创建、分割的，而function中的<code>this</code>与作用域链不同，它是由<strong>执行该function时</strong>当前所处的Object环境所决定的，这也是<code>this</code>最容易被混淆用错的一点。一般情况下的例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var name &#x3D; &quot;global&quot;;</span><br><span class="line">var o &#x3D; &#123;</span><br><span class="line">  name: &quot;o&quot;,</span><br><span class="line">  getName: function()&#123;</span><br><span class="line">    return this.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">o.getName();  &#x2F;&#x2F; -&gt; &quot;o&quot;</span><br></pre></td></tr></table></figure><p>由于执行<code>o.getName()</code>时<code>getName</code>所绑定的<code>this</code>是调用它的<code>o</code>，所以此时<code>this == o</code>；更容易搞混的是在closure条件下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var name &#x3D; &quot;global&quot;;</span><br><span class="line">var oo &#x3D; &#123;</span><br><span class="line">  name: &quot;oo&quot;,</span><br><span class="line">  getNameFunc: function()&#123;</span><br><span class="line">    return function()&#123;</span><br><span class="line">      return this.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">oo.getNameFunc()();  &#x2F;&#x2F; -&gt; &quot;global&quot;</span><br></pre></td></tr></table></figure><p>此时闭包函数被<code>return</code>后调用相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getName &#x3D; oo.getNameFunc();</span><br><span class="line">getName();  &#x2F;&#x2F; -&gt; &quot;global&quot;</span><br></pre></td></tr></table></figure><p>换一个更明显的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var ooo &#x3D; &#123;</span><br><span class="line">  name: &quot;ooo&quot;,</span><br><span class="line">  getName: oo.getNameFunc() &#x2F;&#x2F; 此时闭包函数的this被绑定到新的Object</span><br><span class="line">&#125;;</span><br><span class="line">ooo.getName();  &#x2F;&#x2F; -&gt; &quot;ooo&quot;</span><br></pre></td></tr></table></figure><p>当然，有时候为了避免闭包中的<code>this</code>在执行时被替换，可以采取下面的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var name &#x3D; &quot;global&quot;;</span><br><span class="line">var oooo &#x3D; &#123;</span><br><span class="line">  name: &quot;ox4&quot;,</span><br><span class="line">  getNameFunc: function()&#123;</span><br><span class="line">    var self &#x3D; this;</span><br><span class="line">    return function()&#123;</span><br><span class="line">       return self.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">oooo.getNameFunc()(); &#x2F;&#x2F; -&gt; &quot;ox4&quot;</span><br></pre></td></tr></table></figure><p>或者是在调用时强行定义执行的Object：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var name &#x3D; &quot;global&quot;;</span><br><span class="line">var oo &#x3D; &#123;</span><br><span class="line">  name: &quot;oo&quot;,</span><br><span class="line">  getNameFunc: function()&#123;</span><br><span class="line">    return function()&#123;</span><br><span class="line">      return this.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">oo.getNameFunc()();  &#x2F;&#x2F; -&gt; &quot;global&quot;</span><br><span class="line">oo.getNameFunc().bind(oo)(); &#x2F;&#x2F; -&gt; &quot;oo&quot;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Js是一门很有趣的语言，由于它的很多特性是针对HTML中DOM的操作，因而显得随意而略失严谨，但随着前端的不断繁荣发展和Node的兴起，Js已经不再是”toy language”或是jQuery时代的”CSS扩展”，本文提到的这些概念无论是对新手还是从传统Web开发中过度过来的Js开发人员来说，都很容易被混淆或误解，希望本文可以有所帮助。</p><p>转自：<a href="http://blog.rainy.im/2015/07/04/scope-chain-and-prototype-chain-in-js/">http://blog.rainy.im</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>详解JavaScript变量提升</title>
      <link href="2019/04/02/%E5%89%8D%E7%AB%AF/%E8%AF%A6%E8%A7%A3JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
      <url>2019/04/02/%E5%89%8D%E7%AB%AF/%E8%AF%A6%E8%A7%A3JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>变量在程序中随处可见。它们是一些始终在相互影响，相互作用的的数据和逻辑。正是这些互动使应用程序活了起来。</p><p>在JavaScript中使用变量很重要的一方面就是变量的提升 —— 它决定了一个变量何时可以被你的代码使用。如果你在寻找关于这方面的详细介绍，那你算是来对地方了。让我们一起看看吧。</p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p><strong>提升</strong>是一种将变量和函数的声明移到函数作用域(如果不在任何函数内的话就是全局作用域)最顶部的机制。</p><p>提升影响了变量的生命周期，一个变量的生命周期包含3个阶段：</p><ul><li><strong>声明</strong> - 创建一个新变量，例如<code>var myValue</code></li><li><strong>初始化</strong> - 用一个值初始化变量 例如<code>myValue = 150</code></li><li><strong>使用</strong> - 使用变量的值 例如<code>alert(myValue)</code></li></ul><p>这个过程通常是像这样执行的：首先<em>声明</em>一个变量，然后用一个值给它<em>初始化</em>，最后就是<em>使用</em>它。让我们看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">var</span> strNumber;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">strNumber = <span class="string">&#x27;16&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">parseInt</span>(strNumber); <span class="comment">// =&gt; 16</span></span><br></pre></td></tr></table></figure><p>在程序中一个函数可以先<em>声明</em>，后<em>使用</em>。<em>初始化</em>被忽略掉了。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">sum(<span class="number">5</span>, <span class="number">6</span>);<span class="comment">// =&gt; 11</span></span><br></pre></td></tr></table></figure><p>当这三个步骤按顺序执行的时候，一切看起来都很简单，自然。如果可以话，在使用JavaScript编程的时候你应该遵循这种模式。</p><p>JavaScript并没有严格遵循这个顺序，因此提供了更多的灵活性。比如，函数的使用可以在声明之前。下边的例子先调用了函数<code>double(5)</code>，然后才声明该函数<code>function double(num) &#123;...&#125;</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line">double(<span class="number">5</span>); <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为JavaScript中的函数声明会被提升到作用域顶部。</p><p>变量提升在不同方面的影响也不同：</p><ul><li>变量声明: 使用<code>var</code>, <code>let</code>或<code>const</code>关键字</li><li>函数声明: 使用<code>function () &#123;...&#125;</code>语法</li><li>类声明: 使用<code>class</code>关键字</li></ul><p>接下来让我们详细看看这些区别。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2-函数作用域变量-var"><a href="#2-函数作用域变量-var" class="headerlink" title="2. 函数作用域变量: var"></a>2. 函数作用域变量: <code>var</code></h3><p>变量声明在函数作用域内创建并初始化一个变量，例如<code>var myVar, myVar2 = &#39;Init&#39;</code>。默认情况下，声明但是未初始化的变量的值是<code>undefined</code>。</p><p>自从JavaScript的第一版本开始，开发者就在使用这种方式声明变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量num</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// =&gt; undefined</span></span><br><span class="line"><span class="comment">// 声明并初始化变量str</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// =&gt; &#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="提升与var"><a href="#提升与var" class="headerlink" title="提升与var"></a>提升与<code>var</code></h4><p>使用<code>var</code>声明的变量会被提升到所在函数作用域的顶部。如果在声明之前访问该变量，它的值会是<code>undefined</code>。</p><p>假定<code>myVariable</code>在被<code>var</code>声明前被访问到。在这种情况下，声明操作会被<strong>移至double()函数的顶部</strong>同时该变量会被赋值<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myVariable); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> myVariable;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double(<span class="number">3</span>); <span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure><p>JavaScript在执行代码时相当于把<code>var myVariable</code>移动到了<code>double()</code>的顶部，就像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVariable;          <span class="comment">// 被移动到顶部</span></span><br><span class="line">  <span class="built_in">console</span>.log(myVariable); <span class="comment">// =&gt; undefined  </span></span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double(<span class="number">3</span>); <span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure><p><code>var</code>语法不仅可以声明变量，还可以在声明的同时赋给变量一个初始值：<code>var str = &#39;initial value&#39;</code>。当变量被提升时，声明会被移动到作用域顶部，但是初始值的赋值却会<strong>留在原地</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myString); <span class="comment">// =&gt; undefined  </span></span><br><span class="line">  <span class="keyword">var</span> myString = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(myString); <span class="comment">// =&gt; &#x27;Hello World&#x27;  </span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">16</span>, <span class="number">10</span>); <span class="comment">// =&gt; 26</span></span><br></pre></td></tr></table></figure><p><code>var myString</code>被提升到作用域的顶部，然而初始值的赋值操作<code>myString = &#39;Hello World&#39;</code>不会受到影响。上边的代码等价于下边的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myString;             <span class="comment">// 提升到顶部  </span></span><br><span class="line">  <span class="built_in">console</span>.log(myString);    <span class="comment">// =&gt; undefined  </span></span><br><span class="line">  myString = <span class="string">&#x27;Hello World&#x27;</span>; <span class="comment">// 赋值不受影响  </span></span><br><span class="line">  <span class="built_in">console</span>.log(myString);    <span class="comment">// =&gt; &#x27;Hello World&#x27;  </span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">16</span>, <span class="number">10</span>); <span class="comment">// =&gt; 26 </span></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="3-块级作用域变量-let"><a href="#3-块级作用域变量-let" class="headerlink" title="3. 块级作用域变量: let"></a>3. 块级作用域变量: <code>let</code></h3><p>let声明在块级作用域内创建并初始化一个变量：<code>let myVar, myVar2 = &#39;Init&#39;</code>。默认情况下，声明但是未初始化的变量的值是<code>undefined</code>。</p><p><code>let</code>是ECMAScript 6引入的一个巨大改进，它允许代码在代码块的级别上保持模块性和封装性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 声明块级变量</span></span><br><span class="line">  <span class="keyword">let</span> month;</span><br><span class="line">  <span class="built_in">console</span>.log(month); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="comment">// 声明并初始化块级变量</span></span><br><span class="line">  <span class="keyword">let</span> year = <span class="number">1994</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(year); <span class="comment">// =&gt; 1994</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在代码块外部不能访问month和year变量</span></span><br><span class="line"><span class="built_in">console</span>.log(year); <span class="comment">// ReferenceError: year is not defined</span></span><br></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="提升与let"><a href="#提升与let" class="headerlink" title="提升与let"></a>提升与<code>let</code></h4><p>使用<code>let</code>定义的变量会被提升到代码块的顶部。但是如果在声明前访问该变量，JavaScript会抛出异常<code>ReferenceError: is not defined</code>。</p><p>在声明语句一直到代码库的顶部，变量都好像在一个<em>临时死亡区间</em>中一样，不能被访问。</p><p>让我们看看以下的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTruthy</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVariable = <span class="string">&#x27;Value 1&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * myVariable的临时死亡区间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// Throws ReferenceError: myVariable is not defined</span></span><br><span class="line">    <span class="built_in">console</span>.log(myVariable);</span><br><span class="line">    <span class="keyword">let</span> myVariable = <span class="string">&#x27;Value 2&#x27;</span>;</span><br><span class="line">    <span class="comment">// myVariable的临时死亡区间至此结束</span></span><br><span class="line">    <span class="built_in">console</span>.log(myVariable); <span class="comment">// =&gt; &#x27;Value 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isTruthy(<span class="number">1</span>); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>从<code>let myVariable</code>一行一直到代码块开始的<code>if (valaue) &#123;...&#125;</code>都是<code>myVariable</code>变量的临时死亡区间。如果在此区间内访问该变量，JavaScript会抛出<code>ReferenceError</code>异常。</p><p>一个有趣的问题出现了：<code>myVariable</code>真的被<strong>提升</strong>到代码块顶部了吗？还是在临时死亡区间内<strong>未定义</strong>呢？当一个变量未被定义时，JavaScript也会抛出<code>ReferenceError</code>。</p><p>如果你观察一下该函数的开始部分就会发现，<code>var myVariable = &#39;Value 1&#39;</code>在整个函数作用域内定义了一个名为<code>myVariable</code>的变量。在<code>if (value) &#123;...&#125;</code>块内，如果<code>let</code>定义的变量没有被提升，那么在临时死亡区间内<code>myVariable</code>的值就会是<code>&#39;Value1&#39;</code>了。由此我们可以确认块级变量确实被提升了。</p><p>``</p><p><code>let</code>在块级作用域内的提升保护了变量不受外层作用域影响。在临时死亡区间内访问<code>let</code>定义的变量时抛出异常会促使开发者遵循更好的编码实践：先声明，后使用。</p><p>这两个限制是促使在封装性和代码流程方面编写更好的JavaScript的有效途径。这是基于<code>var</code>用法教训的结果 —— 允许在声明之前访问变量很容易造成误解。</p><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="4-常量-const"><a href="#4-常量-const" class="headerlink" title="4. 常量: const"></a>4. 常量: <code>const</code></h3><p>常量声明在块级作用域内创建并初始化一个常量：<code>const MY_CONST = &#39;Value&#39;, MY_CONST2 = &#39;Value 2&#39;</code>。看看下边的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> COLOR = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(COLOR); <span class="comment">// =&gt; &#x27;red&#x27;</span></span><br><span class="line"><span class="keyword">const</span> ONE = <span class="number">1</span>, HALF = <span class="number">0.5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ONE);   <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(HALF);  <span class="comment">// =&gt; 0.5</span></span><br></pre></td></tr></table></figure><p>当声明一个变量时，必须在同一条语句中对该变量进行初始化。在声明与初始化之后，变量的值不能被修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// =&gt; 3.14</span></span><br><span class="line">PI = <span class="number">2.14</span>; <span class="comment">// TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><h4 id="提升与const"><a href="#提升与const" class="headerlink" title="提升与const"></a>提升与<code>const</code></h4><p>使用<code>const</code>定义的常量会被提升到代码块的顶部。</p><p>由于存在临时死亡区间，常量在声明之前不能被访问。如果在声明之前访问常量，JavaScript会抛出异常：<code>ReferenceError: is not defined</code>。</p><p><code>const</code>声明常量的提升的效果与使用<code>let</code>声明变量的提升效果相同。</p><p>让我们在<code>double()</code>函数内声明一个常量:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 常量TWO的临时死亡区间</span></span><br><span class="line">   <span class="built_in">console</span>.log(TWO); <span class="comment">// ReferenceError: TWO is not defined</span></span><br><span class="line">   <span class="keyword">const</span> TWO = <span class="number">2</span>;</span><br><span class="line">   <span class="comment">// 常量TWO的临时死亡区间至此结束</span></span><br><span class="line">   <span class="keyword">return</span> number * TWO;</span><br><span class="line">&#125;</span><br><span class="line">double(<span class="number">5</span>); <span class="comment">// =&gt; 10</span></span><br></pre></td></tr></table></figure><p>由于在声明之前使用常量会导致JavaScript抛出异常。因此使用常量时应该始终先声明，初始化，然后再使用。</p><h3 id="5-函数声明"><a href="#5-函数声明" class="headerlink" title="5. 函数声明"></a>5. 函数声明</h3><p>函数声明使用提供的名称和参数创建一个函数。</p><p>一个函数声明的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">isOdd(<span class="number">5</span>); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p><code>function isOdd(number) &#123;...&#125;</code>就是一段定义函数的声明。<code>isOdd()</code>用来验证一个数字是否是奇数。</p><h4 id="-5"><a href="#-5" class="headerlink" title=""></a></h4><h4 id="提升与函数声明"><a href="#提升与函数声明" class="headerlink" title="提升与函数声明"></a>提升与函数声明</h4><p>函数声明的提升允许你在所属作用域内任何地方使用该函数，即使是在声明之前也可以。换句话说，函数可以在当前作用域或子作用域内的任何地方访问(不会是<code>undefined</code>值，没有临时死亡区间，不会抛出异常)。</p><p>这种提升的行为非常灵活。不管是先使用，后声明，还是先声明，后使用都可以如你所愿。</p><p>下边的例子在开始的地方调用了一个函数，然后才定义它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用被提升的函数</span></span><br><span class="line">equal(<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equal</span>(<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> value1 === value2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以正常执行是因为<code>equal()</code>被提升到了作用域顶部。</p><p>需要注意的<strong>函数声明</strong><code>function () &#123;...&#125;</code>和<strong>函数表达式</strong> <code>var = function() &#123;...&#125;</code>之间的区别。两者都用于创建函数，但是却有着不同的提升机制。</p><p>下边的例子演示了该区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用被提升的函数</span></span><br><span class="line">addition(<span class="number">4</span>, <span class="number">7</span>); <span class="comment">// =&gt; 11</span></span><br><span class="line"><span class="comment">// 变量被提升了，但值是undefined</span></span><br><span class="line">substraction(<span class="number">10</span>, <span class="number">7</span>); <span class="comment">// TypeError: substraction is not a function</span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> substraction = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>addition</code>被彻底的提升并且可以在声明之前被调用。</p><p>然而<code>substraction</code>是使用变量声明语句声明的，虽然也被提升了，但被调用时值是<code>undefined</code>。因此会抛出异常<code>TypeError: substraction is not a function</code>。</p><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><h3 id="6-类声明"><a href="#6-类声明" class="headerlink" title="6. 类声明"></a>6. 类声明</h3><p>类声明使用提供的名称和参数创建一个构造函数。类是ECMAScript 6中引入的一项巨大改进。</p><p>类建立在JavaScript的原型继承之上并提供了诸如<code>super</code>(访问父类)，<code>static</code>(定义静态方法)，<code>extends</code>(定义子类)之类的额外功能。</p><p>一起看看如何声明一个类并创建一个实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.x = x;</span><br><span class="line">     <span class="built_in">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">move</span>(<span class="params">dX, dY</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.x += dX;</span><br><span class="line">     <span class="built_in">this</span>.y += dY;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> origin = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 调用实例的方法</span></span><br><span class="line">origin.move(<span class="number">50</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h4 id="-7"><a href="#-7" class="headerlink" title=""></a></h4><h4 id="提升与class"><a href="#提升与class" class="headerlink" title="提升与class"></a>提升与<code>class</code></h4><p>类声明会被提升到块级作用域的顶部。但是如果你在声明前使用类，JavaScript会抛出异常<code>ReferenceError: is not defined</code>。所以正确的方法是先<em>声明</em>类，然后再<em>使用</em>它创建实例。</p><p>类声明的提升与<code>let</code>定义变量的提升效果类似。</p><p>让我们看看在声明之前创建类实例会怎样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Company类</span></span><br><span class="line"><span class="comment">// 抛出ReferenceError: Company is not defined</span></span><br><span class="line"><span class="keyword">var</span> apple = <span class="keyword">new</span> Company(<span class="string">&#x27;Apple&#x27;</span>);</span><br><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在声明之后使用Company类</span></span><br><span class="line"><span class="keyword">var</span> microsoft = <span class="keyword">new</span> Company(<span class="string">&#x27;Microsoft&#x27;</span>);</span><br></pre></td></tr></table></figure><p>和预期的一样，在类定义之前执行<code>new Company(&#39;Apple&#39;)</code>会抛出<code>ReferenceError</code>异常。这很不错，因为JavaScript鼓励先声明后使用的方式。</p><p>还可以用使用了变量声明语句(<code>var</code>，<code>let</code>和<code>const</code>)的类表达式创建类。让我们看看下面的场景：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Sqaure类</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Square);   <span class="comment">// =&gt; &#x27;undefined&#x27;</span></span><br><span class="line"><span class="comment">//Throws TypeError: Square is not a constructor</span></span><br><span class="line"><span class="keyword">var</span> mySquare = <span class="keyword">new</span> Square(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用变量声明语句声明类</span></span><br><span class="line"><span class="keyword">var</span> Square = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">sideLength</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sideLength = sideLength;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="built_in">this</span>.sideLength, <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在声明之后使用Square类</span></span><br><span class="line"><span class="keyword">var</span> otherSquare = <span class="keyword">new</span> Square(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>这个类使用变量声明语句<code>var Square = class &#123;...&#125;</code>定义。<code>Square</code>变量被提升到了作用域的顶部，但是直到声明该变量的这行代码之前其值都是<code>undefined</code>。因此<code>var mySquare = new Square(10)</code>语句相当于把<code>undefined</code>当作构造函数使用，这导致JavaScript抛出<code>TypeError: Square is not a constructor</code>异常。</p><h3 id="-8"><a href="#-8" class="headerlink" title=""></a></h3><h3 id="7-最后的想法"><a href="#7-最后的想法" class="headerlink" title="7. 最后的想法"></a>7. 最后的想法</h3><p>像在本文阐述的那样，JavaScript中的提升有多种形式。即使你知道它的工作方式，一般还是建议按照声明 &gt; 初始化 &gt; 使用的顺序使用变量。通过<code>let</code>，<code>const</code>和<code>class</code>提升的方式可以看出ECMAScript 6强烈支持这种使用方式。这将使你免于遇见不期望的变量，<code>undefined</code>以及<code>ReferenceError</code>的困扰。</p><p>有一种函数可以在定义之前执行的例外情况。这就是当开发者需要快速了解函数如何被调用的时候，因为这样就不必再滚动到底部阅读函数的具体实现方式了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>论程序员的赌博式编程</title>
      <link href="2019/03/30/%E5%A8%B1%E4%B9%90/%E8%AE%BA%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%B5%8C%E5%8D%9A%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2019/03/30/%E5%A8%B1%E4%B9%90/%E8%AE%BA%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%B5%8C%E5%8D%9A%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>定义：所谓“赌博式编程”，“撞大运编程”就是指程序员在敲代码的时候，不知道自己的代码是不是最终work，既不知其然也不知所以然，反正不管三七二七一先提交再说，这就如同赌博一般。与之相反的，就是通常的“最佳实践”</p><p>赌博式编程和最佳实践，究竟应该怎么做呢？我都亲身试过 </p><p>赌博式编程中，虽然代码写得烂，但是CI/CD的频次高，并且自己态度积极耐心，很容易得到周围人的好评。因为大家遇到什么问题都指望着你。最后代码必然成一团乱码，自己也必然搞不懂，但是因为在生产环境得到广泛使用，公司即使再“优化”也动不到自己头上。</p><p>之前我被指派去写一个复杂4层嵌套SQL，我就凭感觉写，写完我心里根本没底，测试和业务组不断报错，他们每次报错我就改。前后改了30次，直到测不出问题。后来因为我提交次数多，更改不厌其烦，反而得了好评。</p><p>反过来：只要真的走心了，反而会遭到同事或领导差评。why？主观用心了，就必然会影响时间进度。这对于尤其是外行项目经理或者是老板，时间才是致命（和碧桂园要钱不要命的“高周转”类似）。+1s已经是不可能的，你这得加多少秒啊…… </p><p>当时，我走心地写了一个项目，虽然时间在可控期内，我却犯了另一个错误，潜意识里对周围同事不耐烦，有时候会说“这个东西我已经明明白白写在文档里了啊……”然后我一边继续精进，却忽略到那个同事心里暗骂我的表情。最终，代码无bug上线了，所有人都能动清晰模块化的结构，离自己被公司“优化”也就不远了。 </p><p>越是大的公司，越是不懂行的领导或同事，就越应该采取这种“赌博式发布”的策略。 </p><p>无独有偶，软件公司如此，连投资上百亿的芯片公司也如此。你们知道芯片吧，如果是做CPU或者是ASIC挖矿的，一次流片tapeout（相当于软件公司的publish / release）的成本是千万级，即使这样，一家国内的币圈知名的芯片公司都被人诟病：“赌博式流片”。所谓的赌博式流片，就是说发布之前既没有经过系统的正向推导，也没有经过彻底的测试，就直接流片，万一有bug，就要重新流，之前烧的几千万就打水漂了。<br>“我欲将心向明月，奈何明月照沟渠”。这就是现实版的 欧·亨利 的𝑻𝒉𝒆 𝑪𝒐𝒑 𝒂𝒏𝒅 𝒕𝒉𝒆 𝑨𝒏𝒕𝒉𝒆𝒎。 </p><p>一个人的职场命运啊，当然要靠自我奋斗，但是也要考虑 人生的经验。</p><p>转自 ：<a href="https://juejin.im/pin/5c9ccad8e51d45363b92c3e2">掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搞笑图组：程序员的项目周期</title>
      <link href="2019/03/27/%E5%A8%B1%E4%B9%90/%E6%90%9E%E7%AC%91%E5%9B%BE%E7%BB%84%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%91%A8%E6%9C%9F/"/>
      <url>2019/03/27/%E5%A8%B1%E4%B9%90/%E6%90%9E%E7%AC%91%E5%9B%BE%E7%BB%84%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="搞笑图组：程序员的项目周期"><a href="#搞笑图组：程序员的项目周期" class="headerlink" title="搞笑图组：程序员的项目周期"></a>搞笑图组：程序员的项目周期</h2><h2 id="一，需求审评会议进行中。"><a href="#一，需求审评会议进行中。" class="headerlink" title="一，需求审评会议进行中。"></a>一，需求审评会议进行中。</h2><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjbd9alij30hs06a0th.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjc2d1ayj30hs0763zl.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjdu6qazj30hs08qt9n.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hje6k42gj30gx06y3zf.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjefmwc7j30eq09ygmp.jpg"></p><h2 id="二-开发阶段进行中…"><a href="#二-开发阶段进行中…" class="headerlink" title="二.开发阶段进行中…."></a>二.开发阶段进行中….</h2><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjf2uu68j30cc0b40tk.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjffwcv4j30cu070t9d.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjk27jgwg308k06lu0x.gif"></p><h2 id="三，代码复查阶段"><a href="#三，代码复查阶段" class="headerlink" title="三，代码复查阶段"></a>三，代码复查阶段</h2><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjftrvkkj30bv04sgm3.jpg"></p><h2 id="四，测试阶段…"><a href="#四，测试阶段…" class="headerlink" title="四，测试阶段…."></a>四，测试阶段….</h2><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjg2ddn6j30dj0azjsg.jpg"></p><h2 id="五，需求突然要改…"><a href="#五，需求突然要改…" class="headerlink" title="五，需求突然要改…."></a>五，需求突然要改….</h2><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjgb4qb7j30ei04gmxs.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjgmju7qj308l04vglx.jpg"></p><h2 id="六，项目上线"><a href="#六，项目上线" class="headerlink" title="六，项目上线"></a>六，项目上线</h2><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjgsx6e5j30bm05w74w.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjh32fmtj30fs0eedip.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjh9nkb0j30cu099t9a.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjhgsi1vj308805qmxi.jpg"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjltwakug30dc0a0due.gif"></p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g1hjl8486uj309h00i0sm.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React性能优化</title>
      <link href="2019/03/22/react/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>2019/03/22/react/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.父组件render执行  子组件的render也被执行  通过shouldComponentUpdate(nextProps,nextState)<br>2.绑定事件  修改作用域放在 constructor<br>3</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用nvm管理不同版本的 node与npm</title>
      <link href="2019/03/20/%E5%89%8D%E7%AB%AF/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84node%E4%B8%8Enpm/"/>
      <url>2019/03/20/%E5%89%8D%E7%AB%AF/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84node%E4%B8%8Enpm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。</p><p><a href="https://github.com/creationix/nvm">nvm</a> 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果需要管理 Windows 下的 node，官方推荐使用 <a href="https://github.com/hakobera/nvmw">nvmw</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a>。不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行。</p><hr><h2 id="nvm-与-n-的区别"><a href="#nvm-与-n-的区别" class="headerlink" title="nvm 与 n 的区别"></a>nvm 与 n 的区别</h2><p>node 版本管理工具还有一个是 TJ大神的 <a href="https://github.com/tj/n">n</a> 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</p><p>由于 npm 安装的模块路径均为 <strong>/usr/local/lib/node_modules</strong>，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</p><hr><h2 id="卸载全局安装的-node-npm"><a href="#卸载全局安装的-node-npm" class="headerlink" title="卸载全局安装的 node/npm"></a>卸载全局安装的 node/npm</h2><h4 id="如果不是通过brew安装的"><a href="#如果不是通过brew安装的" class="headerlink" title="如果不是通过brew安装的"></a>如果不是通过brew安装的</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom \| <span class="keyword">while</span> <span class="built_in">read</span> i; <span class="keyword">do</span> sudo rm /usr/<span class="built_in">local</span>/<span class="variable">$&#123;i&#125;</span><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node \</span><br><span class="line"></span><br><span class="line">    /usr/<span class="built_in">local</span>/lib/node_modules \</span><br><span class="line"></span><br><span class="line">    /var/db/receipts/org.nodejs.*</span><br></pre></td></tr></table></figure><h4 id="如果是通过官方网站安装的执行下面命令"><a href="#如果是通过官方网站安装的执行下面命令" class="headerlink" title="如果是通过官方网站安装的执行下面命令"></a>如果是通过<a href="https://nodejs.org/en/">官方网站</a>安装的执行下面命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure><h2 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h2><p>首先最重要的是：一定要卸载已安装的 NodeJS，否则会发生冲突。然后下载 <a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a> 最新安装包，直接安装即可。</p><hr><h2 id="OS-X-Linux-安装"><a href="#OS-X-Linux-安装" class="headerlink" title="OS X/Linux 安装"></a>OS X/Linux 安装</h2><p>与 Windows 不同，我们并不一定要先卸载原有的 NodeJS。当然我们推荐还是先卸载掉比较好。另外，你还需要 C++ 编译器，Linux 发行版一般不用担心，像 Ubuntu 都可以直接用 <strong>build-essential</strong> 套件，OS X 的话，可以用 <strong>X-Code</strong> 的命令行工具。运行这个命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>在 Linux 中：（如果是 Debian 发行版）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><p>然后我们可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.34.0&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.34.0&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><p>从远程下载 <strong>install.sh</strong> 脚本并执行。注意这个版本年数字 <strong>v0.33.0</strong> 会随着项目开发而变化。随时通过<a href="https://github.com/creationix/nvm#install-script">官方最新安装命令</a>来检查最新安装版本是有好处的。</p><h3 id="配置mac环境变量"><a href="#配置mac环境变量" class="headerlink" title="配置mac环境变量"></a>配置mac环境变量</h3><ol><li><p>启动终端Terminal</p></li><li><p>进入当前用户的home目录</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入cd ~</span><br></pre></td></tr></table></figure><ol start="3"><li>创建.bash_profile</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入touch .bash_profile</span><br></pre></td></tr></table></figure><ol start="4"><li>编辑.bash_profile文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入open -e .bash_profile</span><br></pre></td></tr></table></figure><ol start="5"><li><p>保存文件，关闭.bash_profile</p></li><li><p>更新刚配置的环境变量</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入source .bash_profile</span><br></pre></td></tr></table></figure><hr><h2 id="在项目中使用不同版本的-Node"><a href="#在项目中使用不同版本的-Node" class="headerlink" title="在项目中使用不同版本的 Node"></a>在项目中使用不同版本的 Node</h2><p>我们可以通过创建项目目录中的 <strong>.nvmrc</strong> 文件来指定要使用的 Node 版本。之后在项目目录中执行 <strong>nvm use</strong> 即可。**.nvmrc** 文件内容只需要遵守上文提到的语义化版本规则即可。另外还有个工具叫做 <a href="https://github.com/wbyoung/avn">avn</a>，可以自动化这个过程。</p><hr><h2 id="在多环境中，npm该如何使用呢？"><a href="#在多环境中，npm该如何使用呢？" class="headerlink" title="在多环境中，npm该如何使用呢？"></a>在多环境中，npm该如何使用呢？</h2><p>每个版本的 Node 都会自带一个不同版本的 npm，可以用 <strong>npm -v</strong> 来查看 npm 的版本。全局安装的 npm 包并不会在不同的 Node 环境中共享，因为这会引起兼容问题。它们被放在了不同版本的目录下，例如 <strong>~/.nvm/versions/node/<version>/lib/node_modules</version></strong> 这样的目录。这刚好也省去我们在 Linux 中使用 <strong>sudo</strong> 的功夫了。因为这是用户的主文件夹，并不会引起权限问题。</p><p>但问题来了，我们安装过的 npm 包，都要重新再装一次？幸运的是，我们有个办法来解决我们的问题，运行下面这个命令，可以从特定版本导入到我们将要安装的新版本 Node：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v5.0.0 --reinstall-packages-from&#x3D;4.2</span><br></pre></td></tr></table></figure><hr><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nvm install &lt;version&gt; ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</span><br><span class="line"></span><br><span class="line">nvm uninstall &lt;version&gt; ## 删除已安装的指定版本，语法与install类似</span><br><span class="line"></span><br><span class="line">nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line"></span><br><span class="line">nvm which &lt;version&gt; ## 确认某个版本Node的路径</span><br><span class="line"></span><br><span class="line">nvm ls ## 列出所有安装的版本</span><br><span class="line"></span><br><span class="line">nvm ls-remote ## 列出所以远程服务器的版本（官方node version list）</span><br><span class="line"></span><br><span class="line">nvm current ## 显示当前的版本</span><br><span class="line"></span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line"></span><br><span class="line">nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line"></span><br><span class="line">nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br></pre></td></tr></table></figure><p>快捷命令：</p><ul><li><strong>nvm install node</strong> 安装最新版 Node</li><li><strong>nvm install iojs</strong> 安装最新版 iojs</li><li><strong>nvm install unstable</strong> 安装最新不稳定版本的 Node</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css3属性box-decoration-break</title>
      <link href="2019/03/07/%E5%89%8D%E7%AB%AF/css3%E5%B1%9E%E6%80%A7box-decoration-break/"/>
      <url>2019/03/07/%E5%89%8D%E7%AB%AF/css3%E5%B1%9E%E6%80%A7box-decoration-break/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这两天接触到一个很有意思的 CSS 属性 – <code>box-decoration-break</code>。下面就一起去一探究竟。</p><p>因为 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-decoration-break">MDN</a> 上关于这个属性，没有中文文档，所以一直在想一个合理贴切的中文翻译。直译一下：</p><ul><li>box – 盒，可以理解为元素盒模型</li><li>decoration – 装饰，理解为元素样式</li><li>break – 断行，参考<code>word-break</code> ，理解为断行时候的表现</li></ul><p>那么，这个属性可以先理解为，元素在发生断行时其样式的表现形式。</p><blockquote><p>MDN 上英文释意为：The box-decoration-break CSS property specifies how an element’s fragments should be rendered when broken across multiple lines, columns, or pages。大意是 box-decoration-break 属性规定了一个元素片段在发生折行/断行时，应该如何被渲染。</p></blockquote><p>可选取值只有两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    box-decoration-break: slice;   &#x2F;&#x2F; 默认取值</span><br><span class="line">    box-decoration-break: clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="换行示例"><a href="#换行示例" class="headerlink" title="换行示例"></a>换行示例</h2><p>这个属性通常作用于内联元素。假设我们存在如下结构，并且给它添加一个边框：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;ABCDEFGHIJKLMN&lt;&#x2F;span&gt;</span><br><span class="line">span &#123;</span><br><span class="line">    border: 2px solid #999;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，效果如下，平平无奇：<br><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7kz3arvj308y02074c.jpg"></p><p>好，接下来就是 break，我们把上面一行的文字断行，样式不变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;ABCD &lt;br&#x2F;&gt;EFG &lt;br&#x2F;&gt; HI&lt;br&#x2F;&gt; JKLMN&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>得到如下结果：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7mi2kzhj303k07njrg.jpg"></p><p>O，可以看到，文字换行的同时，边框也随之变化，头尾两行都有 3 边边框，中间两行只有上下两边边框。如果将 4 行合起来，可以拼成图一，这个是正常的展示效果。</p><p>接下来，我们加上本文的主角 <code>box-decoration-break: clone</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">span &#123;</span><br><span class="line">    border: 2px solid #999;</span><br><span class="line">+   box-decoration-break: clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生效后，我们将会得到这样的结果：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7mtbftkj303x07g0su.jpg"></p><h2 id="box-decoration-break-clone-使用小结"><a href="#box-decoration-break-clone-使用小结" class="headerlink" title="box-decoration-break: clone 使用小结"></a>box-decoration-break: clone 使用小结</h2><p>看到这里，我们已经可以大概理解这个属性的作用了：</p><p><strong>使用了 box-decoration-break: clone 的内联元素，如果存在折行显示，那么每一行都将拥有原本单行的所有完整样式</strong>。</p><p>再看个例子加深下理解，存在如下结构，其使用了 <code>box-decoration-break: clone</code> 前后两种效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span &gt;每一行 &lt;br&#x2F;&gt;样式 &lt;br&#x2F;&gt; 都 &lt;br&#x2F;&gt; 保持&lt;br&#x2F;&gt; 完整独立&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7n3fjpqj30m80bct9w.jpg"></p><p><a href="https://codepen.io/Chokcoco/pen/NJKoNq">CodePen Demo – box-decoration-break</a>点击预览</p><h3 id="box-decoration-break-clone-生效样式影响范围"><a href="#box-decoration-break-clone-生效样式影响范围" class="headerlink" title="box-decoration-break: clone 生效样式影响范围"></a>box-decoration-break: clone 生效样式影响范围</h3><p>当然，使用了 <code>box-decoration-break: clone</code> 的元素并非对每一个样式都会生效，只会作用于下列样式：</p><ul><li>background</li><li>border</li><li>border-image</li><li>box-shadow</li><li>clip-path</li><li>margin</li><li>padding</li><li>Syntax</li></ul><h2 id="box-decoration-break-clone-实际应用"><a href="#box-decoration-break-clone-实际应用" class="headerlink" title="box-decoration-break: clone 实际应用"></a>box-decoration-break: clone 实际应用</h2><p>接下来看看，有没有什么靠谱的实际应用场景。</p><h3 id="box-decoration-break-clone-实现文本选中效果"><a href="#box-decoration-break-clone-实现文本选中效果" class="headerlink" title="box-decoration-break: clone 实现文本选中效果"></a>box-decoration-break: clone 实现文本选中效果</h3><p>会有这样的场景，我们希望对一个多行文本中的特定一段文本进行着重展示。这个时候，我们可以通过 <code>&lt;p&gt;</code> 嵌套 <code>&lt;span&gt;</code> ，对 <code>&lt;span&gt;</code> 包裹的文字进行一些特定的展示。</p><p>譬如我们有这样一段文案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">The &lt;span&gt;box-decoration-break&lt;&#x2F;span&gt; CSS property specifies how an element&#39;s fragments should be rendered when broken across multiple lines, columns, or pages..Each box fragment is rendered independently with the &lt;span&gt;specified border, padding, and margin wrapping each fragment.&lt;&#x2F;span&gt; The border-radius, border-image, and box-shadow are applied to each &lt;span&gt;fragment independently.&lt;&#x2F;span&gt; </span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>其中，我们将需要强调的内容通过 <code>&lt;span&gt;</code> 标签包裹起来，赋予特定样式并且加上 <code>box-decoration-break: clone</code>，这样，无论强调文案是否换行，每一处的强调背景都是一致的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    font-size: 22px;</span><br><span class="line">    line-height: 36px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">span &#123;</span><br><span class="line">    background-image: linear-gradient(135deg, deeppink, yellowgreen);</span><br><span class="line">    color: #fff;</span><br><span class="line">    padding: 2px 10px;</span><br><span class="line">    border-radius: 50% 3em 50% 3em;</span><br><span class="line">    box-decoration-break: clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下效果：<br><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7nxolstj30m8050gn0.jpg"></p><p>如果不加 <code>box-decoration-break: clone</code> 呢？那么如果存在换行，效果会大打折扣：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7oat7qdj30m804x3zx.jpg"></p><p><a href="https://codepen.io/Chokcoco/pen/rRaLqo">CodePen Demo – text-decoration-break 文本选中效果</a>点击预览</p><h3 id="box-decoration-break-每行文字带特定边框"><a href="#box-decoration-break-每行文字带特定边框" class="headerlink" title="box-decoration-break 每行文字带特定边框"></a>box-decoration-break 每行文字带特定边框</h3><p>又会有这样的场景，我们希望每一行文案都带有特定的边框样式，像这样：<br><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7ooa56jj30m804z75t.jpg"></p><p>怎么实现呢？也许可以每一行都是一个 <code>&lt;p&gt;</code>，每一行 <code>&lt;p&gt;</code> 设定上述样式。<strong>但是如果文本内容不确定，容器的宽度也不确定呢</strong>？</p><p>这种场景，使用 <code>box-decoration-break</code> 也非常便捷。当然这里有个小技巧，正常而言， <code>box-decoration-break: clone</code>只对 <code>inline</code> 元素生效，如果我们的文案像是这样包裹在 <code>&lt;p&gt;</code> 标签内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">The box-decoration-break CSS property specifies how an element&#39;s fragments should be rendered when broken across multiple lines, columns, or pages..Each box fragment is rendered independently with the specified border, padding, and margin wrapping each fragment. The border-radius, border-image, and box-shadow are applied to each fragment independently. </span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>要使 <code>box-decoration-break: clone</code> 对 <code>&lt;p&gt;</code> 生效，可以通过设定 <code>&lt;p&gt;</code> 的 <code>display: inline</code> 来实现。如此一来，要实现上述效果，我们只需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    display: inline;</span><br><span class="line">    box-decoration-break: clone;</span><br><span class="line">    background:linear-gradient(110deg, deeppink 0%, deeppink 98%, transparent 98%, transparent 100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>无论文本内容或者容器宽度如何变化，都能完美适配：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7ppinxcg30m807ohdo.gif"></p><p><a href="https://codepen.io/Chokcoco/pen/gEbMGr?editors=1100">CodePen Demo – box-decoration-break 每行文字带特定边框</a>点击预览</p><h3 id="box-decoration-break-结合过渡动画"><a href="#box-decoration-break-结合过渡动画" class="headerlink" title="box-decoration-break 结合过渡动画"></a>box-decoration-break 结合过渡动画</h3><p>结合上面的内容，我们还可以考虑将 <code>box-decoration-break</code> 与过渡效果或者动画效果结合起来。</p><p>譬如，我们希望当我们 hover 文字内容的时候，一些重点需要展示的文字段落能够被强调展示，可能是这样：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7qh939pg30jd07ejz0.gif"></p><p><a href="https://codepen.io/Chokcoco/pen/ZPGpmd">CodePen Demo – box-decoration-break 过渡动画</a>点击预览</p><p>又或者是这样：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7r7d3ywg30jd07eh1k.gif"></p><p><a href="https://codepen.io/Chokcoco/pen/ZPGpmd">CodePen Demo – box-decoration-break 结合过渡动画</a>点击预览</p><p>你可以尝试点进 Demo ，然后去掉 <code>box-decoration-break: clone</code> ，会发现效果大打折扣。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>额，按照惯例兼容性应该都不太行。并且 MDN 也给出了这样的提示：</p><blockquote><p>This is an experimental technology. Check the Browser compatibility table carefully before using this in production.</p></blockquote><p>看看 <a href="https://caniuse.com/#search=box-decoration-break">Can I Use</a>，其实还好，除了 IE 系列全军覆没，所以可以考虑应用在移动端。即便这个属性不兼容，降级展示对页面不会造成什么影响：<br><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0u7ro8oq6j30m8092abe.jpg"></p><p>另外，本文中，给出的代码都是 <code>box-decoration-break: clone</code> ，CodePen 自带了 <code>autoprefixer</code> 实际中可能需要写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    box-decoration-break: clone;</span><br><span class="line">    -webkit-box-decoration-break: clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>国内看到了大漠老师和张鑫旭大大都已经写过这个属性，大家可以对比着看看，加深理解：</p><ul><li><a href="https://www.zhangxinxu.com/wordpress/2019/01/css-css3-box-decoration-break/">CSS/CSS3 box-decoration-break属性简介</a></li><li><a href="https://www.w3cplus.com/css3/multi-line-padded-text-css-box-decoration-break.html">初探box-decoration-break</a></li></ul><p>更多精彩 CSS 技术文章汇总在我的 <a href="https://github.com/chokcoco/iCSS">Github – iCSS</a> ，持续更新，欢迎点个 star 订阅收藏。</p><p>好了，本文到此结束，希望对你有帮助 :)</p><p>如果还有什么疑问或者建议，可以多多交流，原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器多标签页通信</title>
      <link href="2019/03/07/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%80%9A%E4%BF%A1/"/>
      <url>2019/03/07/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>浏览器多标签页通信有助于降低服务器负载，提高运营人员的工作效率，提高用户体验。是前端开发优化的一个重要环节。</p></blockquote><h2 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h2><p>在多数 CMS（内容管理系统）后台上，常见的是一个文章列表页面，点击列表项会打开一个新的文章详情页面。编辑人员经常在这个详情页面上对文章操作，比如修改标题、配图、摘要等内容。操作完毕之后，由于文章页和列表页是两个页面，文章内容数据不能及时同步到列表，这样就照成运营人员多次误操作，这大大降低了运营人员的工作效率。</p><p>对于前端工程师来讲，实现浏览器多个页卡之间的通信，及时更新相关数据更改，是一件重要的事情。</p><p>例如有一个需求：当文章详情页面更新的时候，会同步到文章列表页。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="方式一：cookie-setInterval"><a href="#方式一：cookie-setInterval" class="headerlink" title="方式一：cookie+setInterval"></a>方式一：cookie+setInterval</h3><p>cookie 最初是在客户端用于存储用户的会话信息的。由于 HTTP 是一种无状态的协议，服务器单从网络连接上无法知道客户身份。通过 cookie 就给客户端们颁发一个通行证，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。cookie 实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用 response 向客户端浏览器颁发一个 cookie。客户端浏览器会把 cookie 保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该 cookie 一同提交给服务器。服务器检查该 cookie，以此来辨认用户状态。服务器还可以根据需要修改 cookie 的内容。</p><p>在 JavaScript 中，cookie 的操作接口即 document.cookie，通过这个接口可以读取、写入、删除 cookie。这个操作其实不太友好，所以很多工具库提供了 cookie 的操作方法。我这里提供一个简单的封装方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var QQ &#x3D; &#123;&#125;;</span><br><span class="line">QQ.Cookie&#x3D;&#123;</span><br><span class="line">    set:function(name,value,expires,path,domain)&#123;</span><br><span class="line">        if(typeof expires&#x3D;&#x3D;&quot;undefined&quot;)&#123;</span><br><span class="line">            expires&#x3D;new Date(new Date().getTime()+3600*1000);</span><br><span class="line">        &#125;</span><br><span class="line">        document.cookie&#x3D;name+&quot;&#x3D;&quot;+escape(value)+((expires)?&quot;; expires&#x3D;&quot;+expires.toGMTString():&quot;&quot;)+((path)?&quot;; path&#x3D;&quot;+path:&quot;; path&#x3D;&#x2F;&quot;)+((domain)?&quot;;domain&#x3D;&quot;+domain:&quot;&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    get:function(name)&#123;</span><br><span class="line">        var arr&#x3D;document.cookie.match(new RegExp(&quot;(^| )&quot;+name+&quot;&#x3D;([^;]*)(;|$)&quot;));</span><br><span class="line">        if(arr!&#x3D;null)&#123;</span><br><span class="line">            return unescape(arr[2]);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;,</span><br><span class="line">    clear:function(name,path,domain)&#123;</span><br><span class="line">        if(this.get(name))&#123;</span><br><span class="line">            document.cookie&#x3D;name+&quot;&#x3D;&quot;+((path)?&quot;; path&#x3D;&quot;+path:&quot;; path&#x3D;&#x2F;&quot;)+((domain)?&quot;; domain&#x3D;&quot;+domain:&quot;&quot;)+&quot;;expires&#x3D;Fri, 02-Jan-1970 00:00:00 GMT&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>cookie 有个特性，一个页面产生的 cookie 能被与这个页面的同一目录或者其他子目录下的页面访问，这样页面之间就产生了一个共享的存储空间。通常把 cookie 的 path 设置为一个更高级别的目录，比如默认“/”，从而使更多的页面共享 cookie，实现多页面之间相互通信。 cookie 所在的域，默认为请求的地址，也可以通过设置 document.domain 为父域等方式扩大 cookie 可被访问的域。</p><h4 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h4><p>列表页通过 setInterval 定时器循环监听 cookie 的数据变动<br>列表页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.onload&#x3D;function()&#123;</span><br><span class="line">    var tid &#x3D;  &#39;&#39;;</span><br><span class="line">    setInterval(function()&#123;</span><br><span class="line">        if(tid !&#x3D; QQ.Cookie.get(&quot;tid&quot;))&#123;</span><br><span class="line">            alert(&#39;数据更新！&#39;)；</span><br><span class="line">            tid &#x3D; QQ.Cookie.get(&quot;tid&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当详情页有数据修改时后，写入 cookie<br>详情页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id&#x3D;&quot;content&quot; type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;btn&quot;&gt;Click&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload&#x3D;function()&#123;</span><br><span class="line">        var oBtn&#x3D;document.getElementById(&quot;btn&quot;);</span><br><span class="line">        var oInput&#x3D;document.getElementById(&quot;content&quot;);</span><br><span class="line">        oBtn.onclick&#x3D;function()&#123;</span><br><span class="line">            var val&#x3D;oInput.value;</span><br><span class="line">            QQ.Cookie.set(&quot;tid&quot;,val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="cookie-setInterval-的不足："><a href="#cookie-setInterval-的不足：" class="headerlink" title="cookie+setInterval 的不足："></a>cookie+setInterval 的<strong>不足</strong>：</h4><p>1、cookie 空间有限，浏览器在每一个域名下最多能设置 30-50 个 cookie，容量最多 4K 左右。<br>2、每次 HTTP 请求会把当前域的 cookie 发送到服务器上，而有些 cookie 只是浏览器才用的到，浪费网络带宽。<br>3、setInterval 的频率设置，过大会影响浏览器性能，过小会影响时效性。</p><h4 id="cookie-setInterval-的优点："><a href="#cookie-setInterval-的优点：" class="headerlink" title="cookie+setInterval 的优点："></a>cookie+setInterval 的优点：</h4><p>兼容性好，几乎所有的浏览器都支持。</p><h3 id="方式二：localStorage"><a href="#方式二：localStorage" class="headerlink" title="方式二：localStorage"></a>方式二：localStorage</h3><p>在 HTML5 中，新加入了一个 localStorage 特性，这个特性主要是用来作为本地存储来使用的，解决了 cookie 存储空间不足的问题，localStorage 中一般浏览器支持的是 5M 大小，这个在不同的浏览器中 localStorage 会有所不同。<br>localStorage 的 API 也很简单，提供了 JS 的读写操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if(！window.localStorage)&#123;</span><br><span class="line">    alert(&quot;浏览器不支持localstorage&quot;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    var storage &#x3D; window.localStorage;</span><br><span class="line">    &#x2F;&#x2F;通过属性写入a字段</span><br><span class="line">    storage.a &#x3D; 1;</span><br><span class="line">    &#x2F;&#x2F;通过方法写入b字段</span><br><span class="line">    storage.setItem(&quot;b&quot;,2);</span><br><span class="line"></span><br><span class="line">    storage.getItem(&quot;a&quot;);</span><br><span class="line">    storage.b;</span><br><span class="line">    storage.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它还比 cookie 多了一个优点，提供了 onstorage 以及 storage 事件，可以绑定一个回调函数，使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.onstorage &#x3D; function(e)&#123;console.log(e)&#125;</span><br><span class="line">&#x2F;&#x2F; 或者</span><br><span class="line">window.addEventListener(&#39;storage&#39;, function()&#123; console.log(e)&#125;)</span><br></pre></td></tr></table></figure><p>localStorage 是 Storage 对象的实例。对 Storage 对象进行任何修改，都会在触发 storage 事件。当通过属性或者 setItem()方法保存数据，或者使用 delete 操作符或 removeItem()删除数据，或者调用 clear()方法时，都会触发该事件。通过这个事件，我们可以实现页卡之间的变动监听。</p><h4 id="实现原理：-1"><a href="#实现原理：-1" class="headerlink" title="实现原理："></a>实现原理：</h4><p>列表页通过 storage 监听 localStorage 的数据变动<br>列表页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.addEventListener(&quot;storage&quot;,function(event)&#123;</span><br><span class="line">        console.log(&quot;newValue is&quot;+localStorage.getItem(&quot;tid&quot;));</span><br><span class="line">        console.log(&quot;oldValue is&quot;+event.oldValue);</span><br><span class="line">        window.alert(&#39;数据更新！&#39;);</span><br><span class="line">    &#125;,false);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>当详情页有数据修改时后，写入 localStorage<br>详情页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id&#x3D;&quot;content&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;btn&quot;&gt;Click&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload&#x3D;function()&#123;</span><br><span class="line">        var oBtn&#x3D;document.getElementById(&quot;btn&quot;);</span><br><span class="line">        var oInput&#x3D;document.getElementById(&quot;content&quot;);</span><br><span class="line">        oBtn.onclick&#x3D;function()&#123;</span><br><span class="line">            var val&#x3D;oInput.value;</span><br><span class="line">            localStorage.setItem(&quot;tid&quot;,val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>不过，onstorage 以及 storage 事件，针对都是非当前页面对 localStorage 进行修改时才会触发，当前页面修改 localStorage 不会触发监听函数。还有就是在对原有的数据的值进行修改时才会触发，比如原本已经有一个 key 为 a，值为 1 的 localStorage，再执行：localStorage.setItem(‘a’, 1)代码，同样是不会触发监听函数的。</p><h4 id="localStorage-的不足："><a href="#localStorage-的不足：" class="headerlink" title="localStorage 的不足："></a>localStorage 的<strong>不足</strong>：</h4><p>1、浏览器的容量大小不统一（比 cookie 大很多了），并且在高版本的浏览器才支持 localStorage 这个属性<br>2、目前所有的浏览器中都会把 localStorage 的值类型限定为 string 类型，需要 JSON 转换。<br>3、localStorage 本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡。<br>4、localStorage 只能监听非己页面的数据变化，这一点严重影响使用。</p><h4 id="localStorage-的优点："><a href="#localStorage-的优点：" class="headerlink" title="localStorage 的优点："></a>localStorage 的<strong>优点</strong>：</h4><p>1、解决了 cookie 容量小和时效性不足的问题。</p><h3 id="方式三：WebSocket"><a href="#方式三：WebSocket" class="headerlink" title="方式三：WebSocket"></a>方式三：WebSocket</h3><p>WebSocket API 是下一代客户端–服务器的异步通信方法，已被 W3C 进行了标准化。WebSocket API 最伟大之处在于服务器和客户端可以双向实时通信。WebSocket 并不限于以 Ajax(或 XHR)方式通信，因为 Ajax 技术需要客户端发起请求，而 WebSocket 服务器和客户端可以彼此相互推送信息；XHR 受到域的限制，而 WebSocket 允许跨域通信。</p><p>它的使用很简单，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个Socket实例</span><br><span class="line">var socket &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;localhost:8080&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打开Socket</span><br><span class="line">socket.onopen &#x3D; function(event) &#123;</span><br><span class="line">    &#x2F;&#x2F; 发送一个初始化消息</span><br><span class="line">    socket.send(&#39;I am the client and I\&#39;m listening!&#39;);</span><br><span class="line">    &#x2F;&#x2F; 监听消息</span><br><span class="line">    socket.onmessage &#x3D; function(event) &#123;</span><br><span class="line">        console.log(&#39;Client received a message&#39;,event);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F; 监听Socket的关闭</span><br><span class="line">    socket.onclose &#x3D; function(event) &#123;</span><br><span class="line">        console.log(&#39;Client notified socket has closed&#39;,event);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F; 关闭Socket....</span><br><span class="line">    socket.close()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>WebSocket 提供了 send 方法和 onmessage 事件，用来发送和接收数据。onmessage 事件提供了一个 data 属性，它可以包含消息的 Body 部分。消息的 Body 部分必须是一个字符串，可以进行序列化/反序列化操作，以便传递更多的数据。</p><h4 id="实现原理：-2"><a href="#实现原理：-2" class="headerlink" title="实现原理："></a>实现原理：</h4><p>列表页通过 onmessage 监听 socket 服务器发送过来的消息<br>列表页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var socket &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;localhost:8080&#39;);</span><br><span class="line">    socket.onopen &#x3D; function(event) &#123;</span><br><span class="line">        socket.onmessage &#x3D; function(event) &#123;</span><br><span class="line">            console.log(&#39;Client received a message&#39;, event);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当详情页有数据修改时后，通过 socket 连接，通知列表页更新数据。<br>详情页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id&#x3D;&quot;content&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;btn&quot;&gt;Click&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var socket &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;localhost:8080&#39;);</span><br><span class="line">    window.onload&#x3D;function()&#123;</span><br><span class="line">        var oBtn&#x3D;document.getElementById(&quot;btn&quot;);</span><br><span class="line">        var oInput&#x3D;document.getElementById(&quot;content&quot;);</span><br><span class="line">        oBtn.onclick&#x3D;function()&#123;</span><br><span class="line">            var val&#x3D;oInput.value;</span><br><span class="line">            socket.onopen &#x3D; function(event) &#123;</span><br><span class="line">                &#x2F;&#x2F; 发送数据类型必须是string、ArrayBuffer、Blob之一</span><br><span class="line">                socket.send(&#39;数据更新!&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WebSocket 的语法非常简单，不过需要 IE10+浏览器才支持 WebSocket 通信。如果你的业务需要兼容 IE8，9。业界通常使用第三方库来解决这个问题，比如 Socket.IO，它使用检测功能来判断是否建立 WebSocket 连接，或者是 AJAX long-polling 连接，或 Flash 等，可快速创建实时的应用程序。Socket.IO 还提供了一个 NodeJS API，它看起来非常像浏览器的 API。</p><h4 id="WebSocket-的不足："><a href="#WebSocket-的不足：" class="headerlink" title="WebSocket 的不足："></a>WebSocket 的不足：</h4><p>1、它需要服务端的支持才能完成任务。如果 socket 数据量比较大的话，会严重消耗服务器的资源。</p><h4 id="WebSocket-的优点："><a href="#WebSocket-的优点：" class="headerlink" title="WebSocket 的优点："></a>WebSocket 的优点：</h4><p>1、使用简单，功能灵活、强大，如果部署了 WebSocket 服务器，可以实现很多实时的功能。</p><h3 id="方式四：BroadcastChannel"><a href="#方式四：BroadcastChannel" class="headerlink" title="方式四：BroadcastChannel"></a>方式四：BroadcastChannel</h3><p>BroadcastChannel 即广播频道，是 window 下面的一个 API，该 API 是用于同源不同页面之间完成通信的功能。我们可以理解它是一个广播台，所有的广播实例，都会接入这个广播台（中介者模式中的控制中心），所以，只要在初始化实例时，传入相同的频道值，就会被接入到一个相同的广播频道中。它的实现最简单，很多第三方 JS 库都实现了一套自己的 BroadcastChannel。</p><h4 id="实现原理：-3"><a href="#实现原理：-3" class="headerlink" title="实现原理："></a>实现原理：</h4><p>列表页通过 onmessage 监听其他页面发送过来的消息<br>列表页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 接收广播</span><br><span class="line">let articleCast &#x3D; new BroadcastChannel(&#39;mychannel&#39;);</span><br><span class="line">articleCast.onmessage &#x3D; function (e) &#123;</span><br><span class="line">    console.log(e.data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当详情页有数据修改时后，通过 postMessage，传递数据。<br>详情页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建广播并发送</span><br><span class="line">let listCast &#x3D; new BroadcastChannel(&#39;mychannel&#39;);</span><br><span class="line">myObj &#x3D; &#123; tid: &quot;123&quot;, title: &quot;更改后的标题&quot; &#125;;</span><br><span class="line">listCast.postMessage(myObj);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BroadcastChannel-的不足："><a href="#BroadcastChannel-的不足：" class="headerlink" title="BroadcastChannel 的不足："></a>BroadcastChannel 的不足：</h4><p>1、兼容性极差，只支持最新版的 Chrome 和 Firefox，完全不支持 IE 和 Safari。</p><h4 id="BroadcastChannel-的优点："><a href="#BroadcastChannel-的优点：" class="headerlink" title="BroadcastChannel 的优点："></a>BroadcastChannel 的优点：</h4><p>1、使用简单，功能单一，跨页面通信的理想选择。</p><h3 id="方式五：SharedWorker"><a href="#方式五：SharedWorker" class="headerlink" title="方式五：SharedWorker"></a>方式五：SharedWorker</h3><p>SharedWorker 也是 HTML5 提供的新的浏览器 API，叫共享工作线程。它允许多个页面共享使用线程，每个页面都链接到该共享工作线程的某个端口号上。页面通过该端口与共享工作线程进行通信。目前的 Web 所有程序的操作都基于页面的，而 SharedWorker 的引入开辟了一个“Web 程序”在后台线程的概念。而且它还可以和页面交互，相当于把所有页面都聚拢起来了。上例讲为每个页面都维护一份 WebSocket 代码不仅耗费大量的连接数，而且还拖慢性能。这些通用的连接最好当然做成可跨域页面共用的，在 SharedWorker 引入之前并没有一个完美的跨页面通信解决方案。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>列表页通过 onmessage 监听 SharedWoker 发送过来的消息<br>列表页代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var s &#x3D; new SharedWorker(&#39;x.js&#39;);</span><br><span class="line">    s.port.onmessage &#x3D; function(e)&#123;</span><br><span class="line">        console.log(e.data);</span><br><span class="line">        window.alert(&quot;数据变化！&quot;)</span><br><span class="line">    &#125;;</span><br><span class="line">    s.port.start();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当详情页有数据修改时后，通过 SharedWorker，通知列表页更新数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id&#x3D;&quot;content&quot; &#x2F;&gt;&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;发送&quot; &#x2F;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var s &#x3D; new SharedWorker(&#39;x.js&#39;);</span><br><span class="line">    btn.onclick&#x3D;function()&#123;</span><br><span class="line">        s.port.postMessage(document.getElementById(&#39;content&#39;).value);</span><br><span class="line">    &#125;;</span><br><span class="line">    s.port.start();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中共享线程 x.js 的代码也很简单，它的工作是双向的，每一个页面都可以用来接收和发送数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;x.js</span><br><span class="line">var pool &#x3D; [];</span><br><span class="line">onconnect &#x3D; function(e) &#123;</span><br><span class="line">    pool.push(e.ports[0]);</span><br><span class="line">    e.ports[0].onmessage &#x3D; function(e)&#123;</span><br><span class="line">        for(var i&#x3D;0; i&lt;pool.length; i++)</span><br><span class="line">        pool[i].postMessage(e.data);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SharedWorker 就像运行在浏览器后端的守卫者，可以被多个 window 同时使用，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)。</p><h4 id="SharedWorker-的不足："><a href="#SharedWorker-的不足：" class="headerlink" title="SharedWorker 的不足："></a>SharedWorker 的不足：</h4><p>1、兼容性较差，IE 完全不支持，chrome 和 Firefox 支持很完善，Safari 部分支持，如果你的业务是内部系统，不考虑 IE，可以使用。<br>2、API 比较简单，配置繁琐，使用起来还是比较麻烦。</p><h4 id="SharedWorker-的优点："><a href="#SharedWorker-的优点：" class="headerlink" title="SharedWorker 的优点："></a>SharedWorker 的优点：</h4><p>1、功能强大，不限于浏览器通信，还有共享数据，方法等功能。由于是另启的一个新线程，不影响主线程代码业务，性能优秀，无需借助服务器，是一个完美的跨页面通信解决方案。</p><h4 id="我们做了什么？（划重点）"><a href="#我们做了什么？（划重点）" class="headerlink" title="我们做了什么？（划重点）"></a>我们做了什么？（划重点）</h4><p>SharedWorker 提供的 API 很少，使用比较简单，如果需要完成复杂的页面通信，还是有一定难度。基于此，我实现了一款基于 SharedWorker 的封装库，叫作 superSharedWorker</p><p>它是一款页面之间通信的 JavaScript 框架，它通过 shared worker 实现纯浏览器页卡之间的通信。你无需了解 shared worker，可以快速使用页面之间的数据传递，快捷，强大。它的优点就是通过原生 JS 实现，无需依赖任何 JS 库实现了对 sharedWorker 的封装。开箱即用，配置简单。</p><p>两种使用方式：<br>1、ES6 import 的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import superSharedWorker from &#39;.&#x2F;src&#x2F;index.js&#39;;</span><br><span class="line">let superSharedWorker &#x3D; new superSharedWorker(&#39;page1&#39;, callback); &#x2F;&#x2F;注册</span><br><span class="line">superSharedWorker.send(&#39;hello world!&#39;); &#x2F;&#x2F;发送消息</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、script 标签外链的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;.&#x2F;build&#x2F;super-sharedworker.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F;&lt;!--</span><br><span class="line">        var superSharedWorker &#x3D; new SuperShared(&#39;page1&#39;, onRecvMsg);</span><br><span class="line">        function onRecvMsg(message) &#123;</span><br><span class="line">           console.log(message)</span><br><span class="line">        &#125;</span><br><span class="line">        superSharedWorker.send(&#39;hello, world&#39;);</span><br><span class="line">    &#x2F;&#x2F;--&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更多用法举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let superSharedWorker &#x3D; new superSharedWorker(&#39;page1&#39;, callback); &#x2F;&#x2F;注册</span><br><span class="line">superSharedWorker.add(&#123;name:&#39;chunpengliu&#39;, sex:1&#125;);</span><br><span class="line">superSharedWorker.del(&#39;sex&#39;);&#x2F;&#x2F; 删除缓冲区数据</span><br><span class="line">superSharedWorker.send(&#123;&#39;time&#39;:2019&#125;, &#39;page2&#39;); &#x2F;&#x2F;一次性发送缓冲区数据，只发送给name&#x3D;&quot;page2&quot;的页面</span><br><span class="line">superSharedWorker.close(); &#x2F;&#x2F;关闭线程，节省资源</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它提供了很多强大的功能，可一对一，一对多发送消息。像使用 git 一样传递数据。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过讨论，实现了四种实现浏览器标签页之间的通信，分别是使用 cookie、使用 websocket 协议、通过 localstorage、以及使用 html5 浏览器的新特性 SharedWorker，每种方法各有利弊。如果不考虑兼容旧的浏览器，superSharedWorker 或许是最好的解决方案，优化使用效率，提升用户体验，赶快使用浏览器多标签页通信功能吧！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript多线程编程-worker</title>
      <link href="2019/03/07/%E5%89%8D%E7%AB%AF/JavaScript%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-worker/"/>
      <url>2019/03/07/%E5%89%8D%E7%AB%AF/JavaScript%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-worker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>远离浏览器卡顿，提高用户体验，提升代码运行效率，使用多线程编程方法。</p></blockquote><p>浏览器端JavaScript是以单线程的方式执行的，也就是说JavaScript和UI渲染占用同一个主线程，那就意味着，如果JavaScript进行高负载的数据处理，UI渲染就很有可能被阻断，浏览器就会出现卡顿，降低了用户体验。</p><p>为此，JavaScript提供了异步操作，比如定时器(setTimeout、setInterval)事件、Ajax请求、I/O回调等。我们可以把高负载的任务使用异步处理，它们将会被放入浏览器的事件任务队列（event loop）中去，等到JavaScript运行时执行线程空闲时候，事件队列才会按照先进先出的原则被一一执行。</p><p><img src="http://pic1.zhoujie16.cn/squares.svg" alt="nodejs引以为荣的异步处理"></p><p>通过类似定时器，回调函数等异步编程方式在平常的工作中已经足够，但是如果做复杂运算，这种方式的不足就逐渐体现出来，比如settimeout拿到的值并不正确，或者页面有复杂运算的时候很容易触发假死状态，异步代码会影响主线程的代码执行，异步终究还是单线程，不能从根本上解决问题。</p><p>多线程（Web Worker）就应运而生，它是HTML5标准的一部分，这一规范定义了一套 API，允许一段JavaScript程序运行在主线程之外的另外一个线程中。将一些任务分配给后者运行。在主线程运行的同时，Worker（子）线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><h2 id="什么是web-worker"><a href="#什么是web-worker" class="headerlink" title="什么是web worker"></a>什么是web worker</h2><p><img src="http://pic1.zhoujie16.cn/squares.svg" alt="img"></p><p>worker是window对象的一个方法，就是用它来创建多线程。可以通过以下方式来检测你的浏览器是否支持worker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (window.Worker) &#123;…… your code ……&#125;</span><br></pre></td></tr></table></figure><p>一个worker是使用一个构造函数（Worker()）创建的一个对象，这个构造函数需要传入一个的JavaScript文件，这个文件包含将在工作线程中运行的代码。类似于这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let myWorker &#x3D; new Worker(&#39;worker.js&#39;);</span><br></pre></td></tr></table></figure><p>主线程和子线程的数据不是共享的，worker通过postMessage() 方法和onmessage事件进行数据通信。主线程和子线程是双向的，都可以发送和监听事件。向一个worker发送消息需要这样做（main.js）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myWorker.postMessage(&#39;hello, world&#39;); &#x2F;&#x2F; 发送</span><br><span class="line">worker.onmessage &#x3D; function (event) &#123; &#x2F;&#x2F; 接收</span><br><span class="line">    console.log(&#39;Received message &#39; + event.data);</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> postMessage所传的数据都是拷贝传递（ArrayBuffer类型除外），所以子线程也是类似传递（worker.js）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&#39;message&#39;, function (e) &#123;</span><br><span class="line">    postMessage(&#39;You said: &#39; + e.data);</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><p> 当子线程运行结束后，使用完毕，为了节省系统资源，可以手动关闭子线程。如果worker没有监听消息，那么当所有任务执行完毕（包括计数器）后，它就会自动关闭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在主线程中关闭</span><br><span class="line">worker.terminate();</span><br><span class="line">&#x2F;&#x2F; 在子线程里线程</span><br><span class="line">close();</span><br><span class="line">Worker也提供了错误处理机制，当出错时会触发error事件。</span><br><span class="line">&#x2F;&#x2F; 监听 error 事件</span><br><span class="line">worker.addEventListener(&#39;error&#39;, function (e) &#123;</span><br><span class="line">  console.log(&#39;ERROR&#39;, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>web worker本身很简单，但是它的限制特别多。</p><h2 id="使用的问题"><a href="#使用的问题" class="headerlink" title="使用的问题"></a>使用的问题</h2><h3 id="1、同源限制"><a href="#1、同源限制" class="headerlink" title="1、同源限制"></a>1、同源限制</h3><p>分配给Worker 线程运行的脚本文件（worker.js），必须与主线程的脚本文件(main.js)同源。这里的同源限制包括协议、域名和端口，不支持本地地址（file://）。这会带来一个问题，我们经常使用CDN来存储js文件，主线程的worker.js的域名指的是html文件所在的域，通过new Worker（url）加载的url属于CDN的域，会带来跨域的问题，实际开发中我们不会吧所有的代码都放在一个文件中让子线程加载，肯定会选择模块化开发。通过工具或库把代码合并到一个文件中，然后把子线程的代码生成一个文件url。<br>解决方法：<br>(1)将动态生成的脚本转换成Blob对象。<br>(2)然后给这个Blob对象创建一个URL。<br>(3)最后将这个创建好的URL作为地址传给Worker的构造函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let script &#x3D; &#39;console.log(&quot;hello world!&quot;);&#39;</span><br><span class="line">let workerBlob &#x3D; new Blob([script], &#123; type: &quot;text&#x2F;javascript&quot; &#125;);</span><br><span class="line">let url &#x3D; URL.createObjectURL(workerBlob);</span><br><span class="line">let worker &#x3D; new Worker(url);</span><br></pre></td></tr></table></figure><h3 id="2、访问限制"><a href="#2、访问限制" class="headerlink" title="2、访问限制"></a>2、访问限制</h3><p>Worker子线程所在的全局对象，与主线程不在同一个上下文环境，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象，global对象的指向有变更，window需要改写成self，不能执行alert()方法和confirm()等方法，只能读取部分navigator对象内的数据。另外chrome的console.log()倒是可以使用，也支持debugger断点，增加调试的便利性。</p><h3 id="3、使用异步"><a href="#3、使用异步" class="headerlink" title="3、使用异步"></a>3、使用异步</h3><p>Worker子线程中可以使用XMLHttpRequest 对象发出 AJAX 请求，可以使用setTimeout() setInterval()方法，也可使用websocket进行持续链接。也可以通过importScripts(url)加载另外的脚本文件，但是仍然不能跨域。</p><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><h3 id="1、使用专用线程进行数学运算"><a href="#1、使用专用线程进行数学运算" class="headerlink" title="1、使用专用线程进行数学运算"></a>1、使用专用线程进行数学运算</h3><p>Web Worke设计的初衷就是用来做计算耗时任务，大数据的处理，而这种计算放在worker中并不会中断前台用户的操作，避免代码卡顿带来不必要的用户体验。例如处理ajax返回的大批量数据，读取用户上传文件，计算MD5，canvas的位图的过滤，分析视频和声频文件等。worker中除了缺失了DOM和BOM操作能力以外，还是拥有非常强大的js逻辑运算处理的能力的，相当于nodejs一个级别的的运行环境。</p><h3 id="2、高频的用户交互"><a href="#2、高频的用户交互" class="headerlink" title="2、高频的用户交互"></a>2、高频的用户交互</h3><p>高频的用户交互适用于根据用户的输入习惯、历史记录以及缓存等信息来协助用户完成输入的纠错、校正功能等类似场景，用户频繁输入的响应处理同样可以考虑放在web worker中执行。例如，我们可以 做一个像Word一样的应用：当用户打字时，后台立即在词典中进行查找，帮助用户自动纠错等等。</p><h3 id="3、数据的预取"><a href="#3、数据的预取" class="headerlink" title="3、数据的预取"></a>3、数据的预取</h3><p>对于一些有大量数据的前后台交互产品，可以新开一个线程专门用来进行数据的预取和缓冲数据，worker可以用在本地web数据库的行写入和更改，长时间持续的运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断，也有利于随时响应主线程的通信。也可以配合XMLHttpRequest和websocket进行不断开的通信，实现守卫进程。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="http://pic1.zhoujie16.cn/squares.svg" alt="img"></p><p>总体来说，兼容性还是不错的， 移动端可以放心使用，桌面端要求不高的话，也可以使用。</p><h2 id="superWorker"><a href="#superWorker" class="headerlink" title="superWorker"></a>superWorker</h2><p>为了更方便快捷的使用web worker，我们封装了一个工具，可以通过模块化的方式编写运行在web worker中的脚本，避免同源策略，减少服务端发送一个额外的url请求，无需了解web worker，就像使用setTimeout一样，快速使用superWorker，提升你的编码效率和运行效率，它有以下优点：<br>1、原生JS实现，无任何依赖库。<br>2、简单快速，摈弃繁琐的创建文件、绑定事件，实现无侵入、无感知运行新线程的代码。<br>3、返回Promise类型的数据，支持链式调用，清晰明了。<br>4、支持多种方式新建worker，包括匿名函数、函数列表、文本文件、html片段、url、类，方便快捷。<br>5、gzipped压缩后仅仅 1.2kb。</p><h3 id="使用教程："><a href="#使用教程：" class="headerlink" title="使用教程："></a>使用教程：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import superWorker from &#39;superWorker&#39;</span><br><span class="line">let worker &#x3D; superWorker(function (a, b) &#123;</span><br><span class="line">    &#x2F;&#x2F; 子线程中要运行的代码</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;);</span><br><span class="line">worker.start(1, 2).then((r)&#x3D;&gt;console.log(r)); &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">superWorker（code， [type]）</span><br></pre></td></tr></table></figure><p>参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code：运行的代码， type（非必须）：代码类型，目前支持0、1、2、3、4。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p>先进行源代码转文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let workerBlob &#x3D; new Blob(code, &#123; type: &quot;text&#x2F;javascript&quot; &#125;);</span><br><span class="line">let url &#x3D; URL.createObjectURL(workerBlob);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对类型拆分，code参数支持传入匿名函数、函数列表、文本文件、url、HTML内嵌标签、类等功能，首先对传入的代码进行分类匹配，字符串化，然后进行拼接运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code &#x3D; &#96;($&#123;Function.prototype.toString.call(code)&#125;)($&#123;exportsObjName&#125;)&#96;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 对于传入的方法，分别在主线程中的exports对象进行标记，和worker子线程中的exportsObjName对象中进行赋值。对于ES6 模块化的代码，进行过滤转译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 处理 \nexport default function xxx()&#123;&#125;  &#x3D;&gt; exports.default &#x3D; true; exportsObjName.default &#x3D; function xx()&#123;&#125;</span><br><span class="line">code &#x3D; code.replace(&#x2F;^(\s*)export\s+default\s+&#x2F;m, (s, before) &#x3D;&gt; &#123;</span><br><span class="line">    exports.default &#x3D; true;</span><br><span class="line">    return &#96;$&#123;before&#125;$&#123;exportsObjName&#125;.default&#x3D;&#96;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 形成主线程exports和子线程exportsObjName中的方法进行一一对应。</p><p>worker主线程与主线程进行通讯则是仍然需要通过postMessage方法和onmessage回调事件来进行，这个我们统一进行了双向绑定，分别对主线程和子线程执行setup。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function setup(ctx, pmMethods, callbacks) &#123;</span><br><span class="line">    ctx.addEventListener(&#39;message&#39;, (&#123; data &#125;) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; ……</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 在主线程中对worker封装了一些快捷的方法，比如关闭线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">worker.terminate &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    URL.revokeObjectURL(url);</span><br><span class="line">    term.call(this);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 并把子线程拥有的方法、属性，暴露出来，方便主线程通过传递参数调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">worker.expose &#x3D; methodName &#x3D;&gt; &#123;</span><br><span class="line">    worker[i] &#x3D; function () &#123;</span><br><span class="line">        return worker[&#39;call&#39;](methodName, [].slice.call(arguments));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 大致如下图：<br><img src="http://pic1.zhoujie16.cn/squares.svg" alt="img"></p><p>欢迎小伙伴们使用以及批评指正。有问题多多反馈，多多交流。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>对于web worker这项新技术，无论在PC还是在移动web，都很实用，腾讯新闻前端组进行了广泛的尝试，Web Worker 的实现为前端程序带来了后台计算的能力，实现了主 UI 线程与复杂计运算线程的分离，从而极大减轻了因计算量大而造成 UI 阻塞而出现的界面渲染卡、掉帧的情况，并且更大程度地利用了终端硬件的性能。superWorker能解决掉事件绑定，同源策略等繁琐的问题，它目前最大的问题在于不兼容IE9，在兼容性要求不是那么严格的地方，尽可能的使用吧！</p><p><img src="http://pic1.zhoujie16.cn/squares.svg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为啥程序员下班后只关显示器从不关电脑</title>
      <link href="2019/03/04/%E5%A8%B1%E4%B9%90/%E4%B8%BA%E5%95%A5%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8B%E7%8F%AD%E5%90%8E%E5%8F%AA%E5%85%B3%E6%98%BE%E7%A4%BA%E5%99%A8%E4%BB%8E%E4%B8%8D%E5%85%B3%E7%94%B5%E8%84%91/"/>
      <url>2019/03/04/%E5%A8%B1%E4%B9%90/%E4%B8%BA%E5%95%A5%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8B%E7%8F%AD%E5%90%8E%E5%8F%AA%E5%85%B3%E6%98%BE%E7%A4%BA%E5%99%A8%E4%BB%8E%E4%B8%8D%E5%85%B3%E7%94%B5%E8%84%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhlup4wj30u00j3t9z.jpg" alt="img"></p><p>你下班时是不是只将显示器一关，揣上手机就走了？</p><p>曾有安保人员晚上来办公室巡查时问，为什么这些人不关机就下班呢？</p><p>作为程序员，你会心一笑。对方不明白如果关机了，第二天程序员上班可能会崩溃：</p><blockquote><p>打开IDEA，并定位到昨天的代码，十分钟</p><p>打开Navicat，两分钟</p><p>打开笔记软件，一分钟</p><p>打开浏览器，找到昨天的历史记录，五分钟</p><p>打开Charles，三分钟</p><p>打开各种IM软件，五分钟</p><p>打开Xshell，连上，五分钟</p><p>打开邮箱，两分钟</p><p>……</p></blockquote><p>等一切工具准备就绪后，半个小时已经过去了。你知道程序员的时薪有多贵吗？</p><p>对程序员来说，关机不仅意味着第二天需要开一堆软件浪费时间，更重要的是工作思路也随之断了，第二天重回昨天的思路也挺费劲的。</p><p>笔者分别采访了几个不同岗位的程序员，一起来探索程序员界的两大未解之谜：</p><p>为什么程序员下班从不关机？</p><p>程序员多久才关一次机？</p><p>1</p><p>Joker，运维工程师，上一次关机是前年</p><p>我不关机是因为太懒了。一般公司给程序员配置的电脑多数性能不会太高，服役时间较长，开机关机一次需要很长的时间。</p><p>从开机到打开各种软件，再进入工作状态，天知道要多久。再说了平常程序员的工作状态是有电话打过来说线上出问题了，赶紧处理一下。</p><p>时间紧急，光开机的时间就可以把问题解决了。时间就是金钱，所以我从来不关机。</p><p>曾经遇到一次故障，涉及核心业务级别比较高。我当时正开车回家，挂了电话后立即靠边停，打开电脑修复故障（老婆不在时，电脑坐副驾）。</p><p>消息群里我们几个人几乎同时响应正在处理。一分钟后，我修复好了，在群里周知大伙。</p><p>有同学说，“艾玛，我这才刚开机！”</p><p>呵呵，他竟然下班关机，不过那位同事现在即使送他钱也不敢下班关机。</p><p>至于什么时候才关机？我貌似从公司拿过笔记本后就没再关机过。不对，前年电脑升级时重启过一次，耽误不少事，之后再也没关过机了。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhmpllfj30e50120sm.jpg" alt="img"></p><p>Joker电脑的任务栏</p><p>2</p><p>刘海，前端工程师，绝不关机</p><p>我从不关机是因为启动前端项目开发环境需要各种前置命令，很麻烦。</p><p>还有的是浏览器还打开着当时查到的解决方案呢，关机那不就丢了吗？其实关机最怕的是会丢了重要的东西，但是我忘了会丢什么，算了，对于前端来说，淡定才是主流。</p><p>多久关一次机？能不关机绝不关机，就像熬鹰一样，这里就是熬电脑，它啥时候扛不住了，就放它重启一次，做人不能太苛刻。</p><p>笔者：熬鹰……给跪了。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhn9r99j30u001ndg0.jpg" alt="img"></p><p>刘海电脑的任务栏</p><p>3</p><p>赵越，Java工程师，工作完成就关机</p><p>我不关机是因为今天的工作没有做完，电脑得留着思路现场。例如当时浏览器搜索资料页面、项目中类的位置、SQL语句等等，那样第二天来了，可以快速地接上前一天的思路。</p><p>有一回下班时我把没写完的SQL给关了，第二天上班后完全忘了前一天写到一半的思路了。毕竟程序员是属鱼的嘛。</p><p>如果下班时我的工作做完了，我还是会关机的。</p><p>笔者：对了，工作能做完吗？</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhnnuqbj30u001aglw.jpg" alt="img"></p><p>赵越电脑的任务栏</p><p>4</p><p>李奇，数据分析工程师，从不关机</p><p>我不关机是要保护现场，方便第二天能快速接上前一天的工作思路。平常打开了很多开发工具像IDEA这种不想关，毕竟上面都是程序员的操作痕迹，标志着上次工作进行到哪里了，上班时一开显示屏思路就可以无缝连接。</p><p>有的时候到了下班时间，但机子还在跑着数据呢，我不能在公司干等着。于是电脑开机运行，我到家后远程电脑看数据是否跑完了，等跑完了直接发给需求方。</p><p>有时候周末接到报警了，我就立刻远程公司的电脑解决。</p><p>我从来不关机，每次关机都是被迫关机：一次是公司停电了，一次是公司搬工位。</p><p>而且如果电脑关机了，心理上就是要把工作抛在脑后了。要过另一种生活，不关机就是工作一直在我心中。</p><p>笔者：此人单身。</p><p>5</p><p>任凯，测试工程师，一周关一次</p><p>我会在每周五下班时关机让它周末休息。我来公司时间长了，电脑老化但又懒得换，于是每次开机都是一个考验。要么机子起不来，要么重启后发现有软件不好用了，每次都要和电脑战斗半天。</p><p>以前曾试过重启电脑后起不来，把电脑送去给 IT维修，结果换了一台更烂的，安装了一天的软件都不好使。</p><p>通过采访得知，程序员是“不下班”一族。即使人下班回家了，但电脑不下班。下班不关机除了第二天能快速进入工作状态外，还便于程序员在非工作时间还在跑数据、快速解决突发故障、远程电脑解决问题等。</p><p>肩膀始终有责任的程序员们，给你们点赞。</p><p>·END·</p><p>转自：<a href="https://www.cnblogs.com/gdjk/p/10468994.html">https://www.cnblogs.com/gdjk/p/10468994.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组去重10种方法</title>
      <link href="2019/03/04/%E5%89%8D%E7%AB%AF/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D10%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>2019/03/04/%E5%89%8D%E7%AB%AF/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D10%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> originalArray = [<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="string">&#x27;true&#x27;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">null</span>, &#123;&#125;, &#123;&#125;, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>];</span><br></pre></td></tr></table></figure><h4 id="1、ES6-的-Set-对象"><a href="#1、ES6-的-Set-对象" class="headerlink" title="1、ES6 的 Set 对象"></a>1、ES6 的 Set 对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resultArr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(originalArray));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者用扩展运算符</span></span><br><span class="line"><span class="keyword">let</span> resultArr = [...new <span class="built_in">Set</span>(originalArray)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN]</span></span><br></pre></td></tr></table></figure><p>这是最简单快捷的去重方法，但是细心的同学会发现，这里的 <code>&#123;&#125;</code> 没有去重。可是又转念一想，2 个空对象的地址并不相同，所以这里并没有问题，结果 ok。</p><h4 id="2、Map-的-has-方法"><a href="#2、Map-的-has-方法" class="headerlink" title="2、Map 的 has 方法"></a>2、Map 的 has 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resultArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; originalArray.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 没有该 key 值</span></span><br><span class="line">    <span class="keyword">if</span> (!map.has(originalArray[i])) &#123;</span><br><span class="line">        map.set(originalArray[i], <span class="literal">true</span>);</span><br><span class="line">        resultArr.push(originalArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN]</span></span><br></pre></td></tr></table></figure><p>但是它与 Set 的数据结构比较相似，结果 ok。</p><h4 id="3、indexOf-和-includes"><a href="#3、indexOf-和-includes" class="headerlink" title="3、indexOf 和 includes"></a>3、indexOf 和 includes</h4><p>建立一个新的空数组，遍历源数组，往这个空数组里塞值，每次 push 之前，先判断是否已有相同的值。</p><p>判断的方法有 2 个：indexOf 和 includes，但它们的结果之间有细微的差别。先看 indexOf。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resultArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; originalArray.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resultArr.indexOf(originalArray[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        resultArr.push(originalArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN, NaN]</span></span><br></pre></td></tr></table></figure><p>indexOf 并不没处理 <code>NaN</code>。</p><p>再来看 includes，它是在 ES7 中正式提出的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resultArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; originalArray.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!resultArr.includes(originalArray[i])) &#123;</span><br><span class="line">        resultArr.push(originalArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN]</span></span><br></pre></td></tr></table></figure><p>includes 处理了 <code>NaN</code></p><h4 id="4、sort"><a href="#4、sort" class="headerlink" title="4、sort"></a>4、sort</h4><p>先将原数组排序，生成新的数组，然后遍历排序后的数组，相邻的两两进行比较，如果不同则存入新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedArr = originalArray.sort();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resultArr = [sortedArr[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; sortedArr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortedArr[i] !== resultArr[resultArr.length - <span class="number">1</span>]) &#123;</span><br><span class="line">        resultArr.push(sortedArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, false, null, true, &quot;true&quot;, undefined]</span></span><br></pre></td></tr></table></figure><p>从结果可以看出，对源数组进行了排序。但同样的没有处理 <code>NaN</code>。</p><h4 id="5、双层-for-循环-splice"><a href="#5、双层-for-循环-splice" class="headerlink" title="5、双层 for 循环 + splice"></a>5、双层 for 循环 + splice</h4><p>双层循环，外层遍历源数组，内层从 i+1 开始遍历比较，相同时删除这个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; originalArray.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = (i + <span class="number">1</span>); j &lt; originalArray.length; j++) &#123;</span><br><span class="line">        <span class="comment">// 第一个等于第二个，splice去掉第二个</span></span><br><span class="line">        <span class="keyword">if</span> (originalArray[i] === originalArray[j]) &#123;</span><br><span class="line">            originalArray.splice(j, <span class="number">1</span>);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(originalArray);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN, NaN]</span></span><br></pre></td></tr></table></figure><p>splice 方法会修改源数组，所以这里我们并没有新开空数组去存储，最终输出的是修改之后的源数组。但同样的没有处理 <code>NaN</code>。</p><h4 id="6、原始去重"><a href="#6、原始去重" class="headerlink" title="6、原始去重"></a>6、原始去重</h4><p>定义一个新数组，并存放原数组的第一个元素，然后将源数组一一和新数组的元素对比，若不同则存放在新数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resultArr = [originalArray[<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; originalArray.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> repeat = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; resultArr.length; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(originalArray[i] === resultArr[j])&#123;</span><br><span class="line">            repeat = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!repeat)&#123;</span><br><span class="line">       resultArr.push(originalArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN, NaN]</span></span><br></pre></td></tr></table></figure><p>这是最原始的去重方法，很好理解，但写法繁琐。同样的没有处理 <code>NaN</code>。</p><h4 id="7、ES5-的-reduce"><a href="#7、ES5-的-reduce" class="headerlink" title="7、ES5 的 reduce"></a>7、ES5 的 reduce</h4><p>reduce 是 ES5 中方法，常用于值的累加。它的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback[, initialValue])</span><br></pre></td></tr></table></figure><p>reduce 的第一个参数是一个 callback，callback 中的参数分别为： Accumulator(累加器)、currentValue(当前正在处理的元素)、currentIndex(当前正在处理的元素索引，可选)、array(调用 reduce 的数组，可选)。</p><p>reduce 的第二个参数，是作为第一次调用 callback 函数时的第一个参数的值。如果没有提供初始值，则将使用数组中的第一个元素。</p><p>利用 reduce 的特性，再结合之前的 includes(也可以用 indexOf)，就能得到新的去重方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc.includes(cur) ? acc : [...acc, cur];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resultArr = originalArray.reduce(reducer, []);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN]</span></span><br></pre></td></tr></table></figure><p>这里的 <code>[]</code> 就是初始值(initialValue)。acc 是累加器，在这里的作用是将没有重复的值塞入新数组（它一开始是空的）。 reduce 的写法很简单，但需要多加理解。它可以处理 <code>NaN</code>，结果 ok。</p><h4 id="8、对象的属性"><a href="#8、对象的属性" class="headerlink" title="8、对象的属性"></a>8、对象的属性</h4><p>每次取出原数组的元素，然后在对象中访问这个属性，如果存在就说明重复。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resultArr = [];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; originalArray.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj[originalArray[i]])&#123;</span><br><span class="line">        resultArr.push(originalArray[i]);</span><br><span class="line">        obj[originalArray[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, 2, true, false, null, &#123;…&#125;, &quot;abc&quot;, undefined, NaN]</span></span><br></pre></td></tr></table></figure><p>但这种方法有缺陷。从结果看，它貌似只关心值，不关注类型。还把 {} 给处理了，但这不是正统的处理办法，所以 <strong>不推荐使用</strong>。</p><h4 id="9、filter-hasOwnProperty"><a href="#9、filter-hasOwnProperty" class="headerlink" title="9、filter + hasOwnProperty"></a>9、filter + hasOwnProperty</h4><p>filter 方法会返回一个新的数组，新数组中的元素，通过 hasOwnProperty 来检查是否为符合条件的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> resultArr = originalArray.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(resultArr);</span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &quot;abc&quot;, undefined, NaN]</span></span><br></pre></td></tr></table></figure><p>这 <code>貌似</code> 是目前看来最完美的解决方案了。这里稍加解释一下：</p><ul><li>hasOwnProperty 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性。</li><li><code>typeof item + item</code> 的写法，是为了保证值相同，但类型不同的元素被保留下来。例如：第一个元素为 number1，第二第三个元素都是 string1，所以第三个元素就被去除了。</li><li><code>obj[typeof item + item] = true</code> 如果 hasOwnProperty 没有找到该属性，则往 obj 里塞键值对进去，以此作为下次循环的判断依据。</li><li>如果 hasOwnProperty 没有检测到重复的属性，则告诉 filter 方法可以先积攒着，最后一起输出。</li></ul><p><code>看似</code> 完美解决了我们源数组的去重问题，但在实际的开发中，一般不会给两个空对象给我们去重。所以稍加改变源数组，给两个空对象中加入键值对。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> originalArray = [<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="string">&#x27;true&#x27;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">null</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>];</span><br></pre></td></tr></table></figure><p>然后再用 filter + hasOwnProperty 去重。</p><p>然而，结果竟然把 <code>&#123;a: 2&#125;</code> 给去除了！！！这就不对了。</p><p>所以，这种方法有点去重 <code>过头</code> 了，也是存在问题的。</p><h4 id="10、lodash-中的-uniq"><a href="#10、lodash-中的-uniq" class="headerlink" title="10、lodash 中的 _.uniq"></a>10、lodash 中的 _.uniq</h4><p>灵机一动，让我想到了 lodash 的去重方法 _.uniq，那就尝试一把：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(_.uniq(originalArray));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, &quot;1&quot;, 2, true, &quot;true&quot;, false, null, &#123;…&#125;, &#123;…&#125;, &quot;abc&quot;, undefined, NaN]</span></span><br></pre></td></tr></table></figure><p>用法很简单，可以在实际工作中正确处理去重问题。</p><p>然后，我在好奇心促使下，看了它的源码，指向了 baseUniq 文件，它的源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseUniq</span>(<span class="params">array, iteratee, comparator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> includes = arrayIncludes</span><br><span class="line">  <span class="keyword">let</span> isCommon = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> seen = result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (comparator) &#123;</span><br><span class="line">    isCommon = <span class="literal">false</span></span><br><span class="line">    includes = arrayIncludesWith</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (length &gt;= LARGE_ARRAY_SIZE) &#123;</span><br><span class="line">    <span class="keyword">const</span> set = iteratee ? <span class="literal">null</span> : createSet(array)</span><br><span class="line">    <span class="keyword">if</span> (set) &#123;</span><br><span class="line">      <span class="keyword">return</span> setToArray(set)</span><br><span class="line">    &#125;</span><br><span class="line">    isCommon = <span class="literal">false</span></span><br><span class="line">    includes = cacheHas</span><br><span class="line">    seen = <span class="keyword">new</span> SetCache</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    seen = iteratee ? [] : result</span><br><span class="line">  &#125;</span><br><span class="line">  outer:</span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = array[index]</span><br><span class="line">    <span class="keyword">const</span> computed = iteratee ? iteratee(value) : value</span><br><span class="line"></span><br><span class="line">    value = (comparator || value !== <span class="number">0</span>) ? value : <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (isCommon &amp;&amp; computed === computed) &#123;</span><br><span class="line">      <span class="keyword">let</span> seenIndex = seen.length</span><br><span class="line">      <span class="keyword">while</span> (seenIndex--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (seen[seenIndex] === computed) &#123;</span><br><span class="line">          <span class="keyword">continue</span> outer</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (iteratee) &#123;</span><br><span class="line">        seen.push(computed)</span><br><span class="line">      &#125;</span><br><span class="line">      result.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!includes(seen, computed, comparator)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (seen !== result) &#123;</span><br><span class="line">        seen.push(computed)</span><br><span class="line">      &#125;</span><br><span class="line">      result.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有比较多的干扰项，那是为了兼容另外两个方法，_.uniqBy 和 _.uniqWith。去除掉之后，就会更容易发现它是用 while 做了循环。当遇到相同的值得时候，continue outer 再次进入循环进行比较，将没有重复的值塞进 result 里，最终输出。</p><p>另外，_.uniqBy 方法可以通过指定 key，来专门去重对象列表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.uniqBy([&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">2</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="comment">// =&gt; [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;]</span></span><br></pre></td></tr></table></figure><p>_.uniqWith 方法可以完全地给对象中所有的键值对，进行比较。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span> &#125;];</span><br><span class="line"></span><br><span class="line">_.uniqWith(objects, _.isEqual);</span><br><span class="line"><span class="comment">// =&gt; [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span></span><br></pre></td></tr></table></figure><p>这两个方法，都还挺实用的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从上述的这些方法来看，ES6 开始出现的方法（如 Set、Map、includes），都能完美地解决我们日常开发中的去重需求，关键它们还都是原生的，写法还更简单。</p><p>所以，我们提倡拥抱原生，因为它们真的没有那么难以理解，至少在这里我觉得它比 lodash 里 _.uniq 的源码要好理解得多，关键是还能解决问题。</p><p>摘录自：<a href="https://segmentfault.com/a/1190000018371055">https://segmentfault.com/a/1190000018371055</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue组件之间8种组件通信方式总结</title>
      <link href="2019/03/04/vue/vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>2019/03/04/vue/vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于vue来说，组件之间的消息传递是非常重要的，下面是我对组件之间消息传递的各种方式的总结，总共有8种方式。</p><h2 id="1-props和-emit"><a href="#1-props和-emit" class="headerlink" title="1.props和$emit"></a>1.props和$emit</h2><p>父组件向子组件传递数据是通过prop传递的，子组件传递数据给父组件是通过$emit触发事件来做到的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>,&#123;</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               mymessage:<span class="built_in">this</span>.message</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt; &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span>,</span><br><span class="line">       props:[<span class="string">&#x27;message&#x27;</span>],<span class="comment">//得到父组件传递过来的数据</span></span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="function"><span class="title">passData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">               <span class="comment">//触发父组件中的事件</span></span><br><span class="line">               <span class="built_in">this</span>.$emit(<span class="string">&#x27;getChildData&#x27;</span>,val)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   Vue.component(<span class="string">&#x27;parent&#x27;</span>,&#123;</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;p&gt;this is parent compoent!&lt;/p&gt;</span></span><br><span class="line"><span class="string">               &lt;child :message=&quot;message&quot; v-on:getChildData=&quot;getChildData&quot;&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span>,</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               message:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="comment">//执行子组件触发的事件</span></span><br><span class="line">           <span class="function"><span class="title">getChildData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(val)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;parent&gt;&lt;/parent&gt;</span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>在上面的例子中，有父组件parent和子组件child。<br>1).父组件传递了message数据给子组件，并且通过v-on绑定了一个getChildData事件来监听子组件的触发事件；<br>2).子组件通过props得到相关的message数据,最后通过this.$emit触发了getChildData事件。</p><h2 id="2-attrs和-listeners"><a href="#2-attrs和-listeners" class="headerlink" title="2. $attrs和$listeners"></a>2. $attrs和$listeners</h2><p>第一种方式处理父子组件之间的数据传输有一个问题：如果父组件A下面有子组件B，组件B下面有组件C,这时如果组件A想传递数据给组件C怎么办呢？<br>如果采用第一种方法，我们必须让组件A通过prop传递消息给组件B，组件B在通过prop传递消息给组件C；要是组件A和组件C之间有更多的组件，那采用这种方式就很复杂了。Vue 2.4开始提供了$attrs和$listeners来解决这个问题，能够让组件A之间传递消息给组件C。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;C&#x27;</span>,&#123;</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;input type=&quot;text&quot; v-model=&quot;$attrs.messagec&quot; @input=&quot;passCData($attrs.messagec)&quot;&gt; &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span>,</span><br><span class="line"></span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="function"><span class="title">passCData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">               <span class="comment">//触发父组件A中的事件</span></span><br><span class="line">               <span class="built_in">this</span>.$emit(<span class="string">&#x27;getCData&#x27;</span>,val)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   Vue.component(<span class="string">&#x27;B&#x27;</span>,&#123;</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               mymessage:<span class="built_in">this</span>.message</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt; </span></span><br><span class="line"><span class="string">               &lt;!-- C组件中能直接触发getCData的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性 --&gt;</span></span><br><span class="line"><span class="string">               &lt;!-- 通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的） --&gt;</span></span><br><span class="line"><span class="string">               &lt;C v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;&lt;/C&gt;</span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span>,</span><br><span class="line">       props:[<span class="string">&#x27;message&#x27;</span>],<span class="comment">//得到父组件传递过来的数据</span></span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="function"><span class="title">passData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">               <span class="comment">//触发父组件中的事件</span></span><br><span class="line">               <span class="built_in">this</span>.$emit(<span class="string">&#x27;getChildData&#x27;</span>,val)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   Vue.component(<span class="string">&#x27;A&#x27;</span>,&#123;</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;p&gt;this is parent compoent!&lt;/p&gt;</span></span><br><span class="line"><span class="string">               &lt;B :messagec=&quot;messagec&quot; :message=&quot;message&quot; v-on:getCData=&quot;getCData&quot; v-on:getChildData=&quot;getChildData(message)&quot;&gt;&lt;/B&gt;</span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span>,</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               message:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">               messagec:<span class="string">&#x27;hello c&#x27;</span> <span class="comment">//传递给c组件的数据</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="function"><span class="title">getChildData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;这是来自B组件的数据&#x27;</span>)</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="comment">//执行C子组件触发的事件</span></span><br><span class="line">           <span class="function"><span class="title">getCData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;这是来自C组件的数据：&quot;</span>+val)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;A&gt;&lt;/A&gt;</span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-中央事件总线"><a href="#3-中央事件总线" class="headerlink" title="3.中央事件总线"></a>3.中央事件总线</h2><p>上面两种方式处理的都是父子组件之间的数据传递，而如果两个组件不是父子关系呢？这种情况下可以使用中央事件总线的方式。新建一个Vue事件bus对象，然后通过bus.$emit触发事件，bus.$on监听触发的事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;brother1&#x27;</span>,&#123;</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               mymessage:<span class="string">&#x27;hello brother1&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;p&gt;this is brother1 compoent!&lt;/p&gt;</span></span><br><span class="line"><span class="string">               &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span>,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="function"><span class="title">passData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">               <span class="comment">//触发全局事件globalEvent</span></span><br><span class="line">               bus.$emit(<span class="string">&#x27;globalEvent&#x27;</span>,val)</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   Vue.component(<span class="string">&#x27;brother2&#x27;</span>,&#123;</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;p&gt;this is brother2 compoent!&lt;/p&gt;</span></span><br><span class="line"><span class="string">               &lt;p&gt;brother1传递过来的数据：&#123;&#123;brothermessage&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span>,</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               mymessage:<span class="string">&#x27;hello brother2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">               brothermessage:<span class="string">&#x27;&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="comment">//绑定全局事件globalEvent</span></span><br><span class="line">           bus.$on(<span class="string">&#x27;globalEvent&#x27;</span>,<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">               <span class="built_in">this</span>.brothermessage=val;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//中央事件总线</span></span><br><span class="line">   <span class="keyword">var</span> bus=<span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;brother1&gt;&lt;/brother1&gt;</span></span><br><span class="line"><span class="string">               &lt;brother2&gt;&lt;/brother2&gt;</span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">       `</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="4-provide和inject"><a href="#4-provide和inject" class="headerlink" title="4.provide和inject"></a>4.provide和inject</h2><p>父组件中通过provider来提供变量，然后在子组件中通过inject来注入变量。不论子组件有多深，只要调用了inject那么就可以注入provider中的数据。而不是局限于只能从当前父组件的prop属性来获取数据，只要在父组件的生命周期内，子组件都可以调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>,&#123;</span><br><span class="line">       inject:[<span class="string">&#x27;for&#x27;</span>],<span class="comment">//得到父组件传递过来的数据</span></span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               mymessage:<span class="built_in">this</span>.for</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;input type=&quot;tet&quot; v-model=&quot;mymessage&quot;&gt; </span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string">   Vue.component(&#x27;parent&#x27;,&#123;</span></span><br><span class="line"><span class="string">       template:`</span></span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;p&gt;<span class="built_in">this</span> is parent compoent!&lt;/p&gt;</span><br><span class="line">               &lt;child&gt;&lt;/child&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       <span class="string">`,</span></span><br><span class="line"><span class="string">       provide:&#123;</span></span><br><span class="line"><span class="string">           for:&#x27;test&#x27;</span></span><br><span class="line"><span class="string">       &#125;,</span></span><br><span class="line"><span class="string">       data()&#123;</span></span><br><span class="line"><span class="string">           return &#123;</span></span><br><span class="line"><span class="string">               message:&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">           &#125;</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string">   var app=new Vue(&#123;</span></span><br><span class="line"><span class="string">       el:&#x27;#app&#x27;,</span></span><br><span class="line"><span class="string">       template:`</span></span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       <span class="string">`</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="5-v-model"><a href="#5-v-model" class="headerlink" title="5.v-model"></a>5.v-model</h2><p>父组件通过v-model传递值给子组件时，会自动传递一个value的prop属性，在子组件中通过this.$emit(‘input’,val)自动修改v-model绑定的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>,&#123;</span><br><span class="line">       props:&#123;</span><br><span class="line">           value:<span class="built_in">String</span>, <span class="comment">//v-model会自动传递一个字段为value的prop属性</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               mymessage:<span class="built_in">this</span>.value</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="function"><span class="title">changeValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>,<span class="built_in">this</span>.mymessage);<span class="comment">//通过如此调用可以改变父组件上v-model绑定的值</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @change=&quot;changeValue&quot;&gt; </span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string">   Vue.component(&#x27;parent&#x27;,&#123;</span></span><br><span class="line"><span class="string">       template:`</span></span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;p&gt;<span class="built_in">this</span> is parent compoent!&lt;/p&gt;</span><br><span class="line">               &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">               &lt;child v-model=<span class="string">&quot;message&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       <span class="string">`,</span></span><br><span class="line"><span class="string">       data()&#123;</span></span><br><span class="line"><span class="string">           return &#123;</span></span><br><span class="line"><span class="string">               message:&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">           &#125;</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string">   var app=new Vue(&#123;</span></span><br><span class="line"><span class="string">       el:&#x27;#app&#x27;,</span></span><br><span class="line"><span class="string">       template:`</span></span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       <span class="string">`</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="6-parent和-children"><a href="#6-parent和-children" class="headerlink" title="6.$parent和$children"></a>6.$parent和$children</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>,&#123;</span><br><span class="line">       props:&#123;</span><br><span class="line">           value:<span class="built_in">String</span>, <span class="comment">//v-model会自动传递一个字段为value的prop属性</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               mymessage:<span class="built_in">this</span>.value</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           <span class="function"><span class="title">changeValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">this</span>.$parent.message = <span class="built_in">this</span>.mymessage;<span class="comment">//通过如此调用可以改变父组件的值</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template:<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @change=&quot;changeValue&quot;&gt; </span></span><br><span class="line"><span class="string">           &lt;/div&gt;</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string">   Vue.component(&#x27;parent&#x27;,&#123;</span></span><br><span class="line"><span class="string">       template:`</span></span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;p&gt;<span class="built_in">this</span> is parent compoent!&lt;/p&gt;</span><br><span class="line">               &lt;button @click=<span class="string">&quot;changeChildValue&quot;</span>&gt;test&lt;/button &gt;</span><br><span class="line">               &lt;child&gt;&lt;/child&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       <span class="string">`,</span></span><br><span class="line"><span class="string">       methods:&#123;</span></span><br><span class="line"><span class="string">           changeChildValue()&#123;</span></span><br><span class="line"><span class="string">               this.$children[0].mymessage = &#x27;hello&#x27;;</span></span><br><span class="line"><span class="string">           &#125;</span></span><br><span class="line"><span class="string">       &#125;,</span></span><br><span class="line"><span class="string">       data()&#123;</span></span><br><span class="line"><span class="string">           return &#123;</span></span><br><span class="line"><span class="string">               message:&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">           &#125;</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string">   var app=new Vue(&#123;</span></span><br><span class="line"><span class="string">       el:&#x27;#app&#x27;,</span></span><br><span class="line"><span class="string">       template:`</span></span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       <span class="string">`</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br></pre></td></tr></table></figure><h2 id="7-vuex处理组件之间的数据交互"><a href="#7-vuex处理组件之间的数据交互" class="headerlink" title="7.vuex处理组件之间的数据交互"></a>7.vuex处理组件之间的数据交互</h2><p>如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候才有上面这一些方法可能不利于项目的维护，vuex的做法就是将这一些公共的数据抽离出来，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用Git命令清单</title>
      <link href="2019/03/01/git%E6%8A%80%E5%B7%A7/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
      <url>2019/03/01/git%E6%8A%80%E5%B7%A7/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我每天使用 Git ，但是很多命令记不住。</p><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><blockquote><p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p></blockquote><p><strong>一、新建代码库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><p><strong>二、配置</strong></p><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><p><strong>三、增加/删除文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><p><strong>四、代码提交</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><p><strong>五、分支</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure><p><strong>六、标签</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><p><strong>七、查看信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><p><strong>八、远程同步</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><p><strong>九、撤销</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p><strong>十、其他</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><blockquote><p>转自：阮一峰(<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a>)</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>40条常见的移动端Web页面问题解决方案</title>
      <link href="2019/03/01/%E5%89%8D%E7%AB%AF/40%E6%9D%A1%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%AB%AFWeb%E9%A1%B5%E9%9D%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2019/03/01/%E5%89%8D%E7%AB%AF/40%E6%9D%A1%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%AB%AFWeb%E9%A1%B5%E9%9D%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1、安卓浏览器看背景图片，有些设备会模糊。</strong></p><p>用同等比例的图片在PC机上很清楚，但是手机上很模糊，原因是什么呢？</p><p>经过研究，是devicePixelRatio作怪，因为手机分辨率太小，如果按照分辨率来显示网页，这样字会非常小，所以苹果当初就把iPhone 4的960640分辨率，在网页里只显示了480320，这样devicePixelRatio＝2。现在android比较乱，有1.5的，有2的也有3的。</p><p>想让图片在手机里显示更为清晰，必须使用2x的背景图来代替img标签（一般情况都是用2倍）。例如一个div的宽高是100100，背景图必须得200200，然后background-size:contain;，这样显示出来的图片就比较清晰了。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background: url(..&#x2F;images&#x2F;icon&#x2F;all.png) no-repeat center center;</span><br><span class="line">-webkit-background-size: 50px 50px;</span><br><span class="line">background-size: 50px 50px;</span><br><span class="line">display: inline-block;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 50px;</span><br></pre></td></tr></table></figure><p>或者指定 background-size:contain;都可以，大家试试！</p><p><strong>2、图片加载</strong></p><p>若您遇到图片加载很慢的问题，对这种情况，手机开发一般用canvas方法加载：</p><p>具体的canvas API 参见：<a href="http://javascript.ruanyifeng.com/htmlapi/canvas.html">http://javascript.ruanyifeng.com/htmlapi/canvas.html</a></p><p>下面举例说明一个canvas的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js动态加载图片和li 总共举例17张图片！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> zWin = $(<span class="built_in">window</span>);</span><br><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> padding = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> winWidth = zWin.width();</span><br><span class="line">  <span class="keyword">var</span> picWidth = <span class="built_in">Math</span>.floor((winWidth - padding * <span class="number">3</span>) / <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">var</span> tmpl = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= totla; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = padding;</span><br><span class="line">    <span class="keyword">var</span> imgSrc = <span class="string">&#x27;img/&#x27;</span> + i + <span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      p = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmpl += <span class="string">&#x27;&lt;li style=&quot;width:&#x27;</span> + picWidth + <span class="string">&#x27;px;height:&#x27;</span> + picWidth + <span class="string">&#x27;px;padding-left:&#x27;</span> + p + <span class="string">&#x27;px;padding-top:&#x27;</span> + padding + <span class="string">&#x27;px;&quot;&gt;&lt;canvas id=&quot;cvs_&#x27;</span> + i + <span class="string">&#x27;&quot;&gt;&lt;/canvas&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> imageObj = <span class="keyword">new</span> Image();</span><br><span class="line">    imageObj.index = i;</span><br><span class="line">    imageObj.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> cvs = $(<span class="string">&#x27;#cvs_&#x27;</span> + <span class="built_in">this</span>.index)[<span class="number">0</span>].getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">      cvs.width = <span class="built_in">this</span>.width;</span><br><span class="line">      cvs.height = <span class="built_in">this</span>.height;</span><br><span class="line">      cvs.drawImage(<span class="built_in">this</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    imageObj.src = imgSrc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">render();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、假如手机网站不用兼容IE浏览器，一般我们会使用zeptojs</strong>。</p><p>zeptojs内置Touch events方法，具体可以看<a href="http://zeptojs.com/#Touch">http://zeptojs.com/#Touch</a> events</p><p>看了一下zeptio新版的API，已经支持IE10以上浏览器，对zeptojs可以选择使用！</p><p><strong>4、防止手机中网页放大和缩小。</strong></p><p>这点是最基本的，最为手机网站开发者来说应该都知道的，就是设置meta中的viewport</p><p>还有就是，有些手机网站我们看到如下声明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//WAPFORUM//DTD XHTML Mobile 1.0//EN&quot;</span> <span class="meta-string">&quot;http://www.wapforum.org/DTD/xhtml-mobile10.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置了DTD的方式是XHTML的写法，假如我们页面运用的是html5，可以不用设置DTD,直接声明<!DOCTYPE html>。</p><p>使用viewport使页面禁止缩放。 通常把user-scalable设置为0来关闭用户对页面视图缩放的行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>但是为了更好的兼容，我们会使用完整的viewport设置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>当然，user-scalable=0,有的人也写成user-scalable=no，都可以的。</p><p><strong>5、apple-mobile-web-app-capable</strong></p><p>apple-mobile-web-app-capable是设置Web应用是否以全屏模式运行。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>如果content设置为yes，Web应用会以全屏模式运行，反之，则不会。content的默认值是no，表示正常显示。你可以通过只读属性window.navigator.standalone来确定网页是否以全屏模式显示。</p><p><strong>6、format-detection</strong></p><p>format-detection 启动或禁用自动识别页面中的电话号码。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>默认情况下，设备会自动识别任何可能是电话号码的字符串。设置telephone=no可以禁用这项功能。</p><p><strong>7、html5调用安卓或者ios的拨号功能</strong></p><p>html5提供了自动调用拨号的标签，只要在a标签的href中添加tel:就可以了。</p><p>如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:10010&quot;</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>8、html5GPS定位功能</strong></p><p>具体请看：<a href="http://www.w3school.com.cn/html5/html_5_geolocation.asp">http://www.w3school.com.cn/html5/html_5_geolocation.asp</a></p><p>9、上下拉动滚动条时卡顿、慢</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">    <span class="attribute">overflow-scrolling</span>: touch;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>10、禁止复制、选中文本</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Element</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-khtml-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>解决移动设备可选中页面文本(视产品需要而定)</p><p><strong>11、长时间按住页面出现闪退</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">element</span> &#123;  <span class="attribute">-webkit-touch-callout</span>: none;&#125;</span><br></pre></td></tr></table></figure><p><strong>12、iphone及ipad下输入框默认内阴影</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Element&#123;  -webkit-appearance: none; &#125;</span><br></pre></td></tr></table></figure><p><strong>13、ios和android下触摸元素时出现半透明灰色遮罩</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Element &#123;  -webkit-tap-highlight-color:rgba(255,255,255,0)&#125;</span><br></pre></td></tr></table></figure><p><strong>14、active兼容处理 即 伪类 :active 失效</strong></p><p>方法一：body添加ontouchstart</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ontouchstart&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><p>方法二：js给 document 绑定 touchstart 或 touchend 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">a &#123;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">foo</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">  &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>15、动画定义3D启用硬件加速</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Element</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>16、Retina屏的1px边框</strong></p><p>具体请百度谷歌关键字，解决方案有很多</p><p><strong>17、webkit mask 兼容处理</strong></p><p>某些低端手机不支持css3 mask，可以选择性的降级处理。</p><p>比如可以使用js判断来引用不同class：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;WebkitMask&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;支持mask&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;不支持mask&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>18、旋转屏幕时，字体大小调整的问题</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">p</span>, <span class="selector-tag">div</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>19、transition闪屏</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ele</span> &#123;</span><br><span class="line">    <span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留3D */</span></span><br><span class="line">    <span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="comment">/* 设置进行转换的元素的背面在面对用户时是否可见：隐藏 */</span></span><br><span class="line">    <span class="attribute">-webkit-backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>20、圆角bug</strong></p><p>某些Android手机圆角失效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ele</span> &#123;</span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>21、顶部状态栏背景色</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>除非你先使用apple-mobile-web-app-capable指定全屏模式，否则这个meta标签不会起任何作用。</p><p>如果content设置为default，则状态栏正常显示。如果设置为blank，则状态栏会有一个黑色的背景。如果设置为blank-translucent，则状态栏显示为黑色半透明。</p><p>如果设置为default或blank，则页面显示在状态栏的下方，即状态栏占据上方部分，页面占据下方部分，二者没有遮挡对方或被遮挡。</p><p>如果设置为blank-translucent，则页面会充满屏幕，其中页面顶部会被状态栏遮盖住（会覆盖页面20px高度，而iphone4和itouch4的Retina屏幕为40px）。</p><p>默认值是default。</p><p><strong>22、设置缓存</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。如果不希望使用缓存可以设置no-cache。</p><p><strong>23、桌面图标</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;touch-icon-iphone.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;76x76&quot;</span> <span class="attr">href</span>=<span class="string">&quot;touch-icon-ipad.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;120x120&quot;</span> <span class="attr">href</span>=<span class="string">&quot;touch-icon-iphone-retina.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;152x152&quot;</span> <span class="attr">href</span>=<span class="string">&quot;touch-icon-ipad-retina.png&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>iOS下针对不同设备定义不同的桌面图标。如果不定义则以当前屏幕截图作为图标。</p><p>上面的写法可能大家会觉得会有默认光泽，下面这种设置方法可以去掉光泽效果，还原设计图的效果！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="attr">href</span>=<span class="string">&quot;touch-icon-iphone.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>图片尺寸可以设定为57<em>57（px）或者Retina可以定为114</em>114（px），ipad尺寸为72*72（px)</p><p><strong>24、启动画面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-startup-image&quot;</span> <span class="attr">href</span>=<span class="string">&quot;start.png&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>iOS下页面启动加载时显示的画面图片，避免加载时的白屏。</p><p>可以通过madia来指定不同的大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--iPhone--&gt;&lt;link href&#x3D;&quot;apple-touch-startup-image-320x460.png&quot; media&#x3D;&quot;(device-width: 320px)&quot; rel&#x3D;&quot;apple-touch-startup-image&quot; &#x2F;&gt; &lt;!-- iPhone Retina --&gt;&lt;link href&#x3D;&quot;apple-touch-startup-image-640x920.png&quot; media&#x3D;&quot;(device-width: 320px) and (-webkit-device-pixel-ratio: 2)&quot; rel&#x3D;&quot;apple-touch-startup-image&quot; &#x2F;&gt; &lt;!-- iPhone 5 --&gt;&lt;link rel&#x3D;&quot;apple-touch-startup-image&quot; media&#x3D;&quot;(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)&quot; href&#x3D;&quot;apple-touch-startup-image-640x1096.png&quot;&gt; &lt;!-- iPad portrait --&gt;&lt;link href&#x3D;&quot;apple-touch-startup-image-768x1004.png&quot; media&#x3D;&quot;(device-width: 768px) and (orientation: portrait)&quot; rel&#x3D;&quot;apple-touch-startup-image&quot; &#x2F;&gt; &lt;!-- iPad landscape --&gt;&lt;link href&#x3D;&quot;apple-touch-startup-image-748x1024.png&quot; media&#x3D;&quot;(device-width: 768px) and (orientation: landscape)&quot; rel&#x3D;&quot;apple-touch-startup-image&quot; &#x2F;&gt; &lt;!-- iPad Retina portrait --&gt;&lt;link href&#x3D;&quot;apple-touch-startup-image-1536x2008.png&quot; media&#x3D;&quot;(device-width: 1536px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)&quot; rel&#x3D;&quot;apple-touch-startup-image&quot; &#x2F;&gt; &lt;!-- iPad Retina landscape --&gt;&lt;link href&#x3D;&quot;apple-touch-startup-image-1496x2048.png&quot;media&#x3D;&quot;(device-width: 1536px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)&quot;rel&#x3D;&quot;apple-touch-startup-image&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p><strong>25、浏览器私有及其它meta</strong></p><p>以下属性在项目中没有应用过，可以写一个demo测试以下！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- QQ浏览器私有 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 全屏模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-fullscreen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 强制横屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;landscape&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-page-mode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- UC浏览器私有 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 全屏模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;full-screen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 强制横屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;landscape&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;browsermode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;application&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其它,针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;HandheldFriendly&quot; content&#x3D;&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure><p>微软的老式浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;MobileOptimized&quot;</span> <span class="attr">content</span>=<span class="string">&quot;320&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>windows phone 点击无高光</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-tap-highlight&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>26、 IOS中input键盘事件keyup、keydown、keypress支持不是很好</strong></p><p>问题是这样的，用input search做模糊搜索的时候，在键盘里面输入关键词，会通过ajax后台查询，然后返回数据，然后再对返回的数据进行关键词标红。</p><p>用input监听键盘keyup事件，在安卓手机浏览器中是可以的，但是在ios手机浏览器中变红很慢，用输入法输入之后，并未立刻相应keyup事件，只有在通过删除之后才能相应！</p><p>解决办法：</p><p>可以用html5的oninput事件去代替keyup</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;testInput&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;testInput&#x27;</span>).addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> value = e.target.value;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就达到类似keyup的效果！</p><p><strong>27、h5网站input 设置为type=number的问题</strong></p><p>h5网页input 的type设置为number一般会产生三个问题，一个问题是maxlength属性不好用了。另外一个是form提交的时候，默认给取整了。三是部分安卓手机出现样式问题。</p><p>问题一解决，我目前用的是js。如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;checkTextLength(this ,10)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">checkTextLength</span>(<span class="params">obj, length</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (obj.value.length &gt; length) &#123;</span></span><br><span class="line">      obj.value = obj.value.substr(0, length);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题二，是因为form提交默认做了表单验证，step默认是1,要设置step属性，假如保留2位小数，写法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>关于step，我在这里做简单的介绍，input 中type=number，一般会自动生成一个上下箭头，点击上箭头默认增加一个step，点击下箭头默认会减少一个step。number中默认step是1。也就是step=0.01,可以允许输入2位小数，并且点击上下箭头分别增加0.01和减少0.01。</p><p>假如step和min一起使用，那么数值必须在min和max之间。</p><p>看下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;3.1&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>输入框可以输入哪些数字？</p><p>首先，最小值是1，那么可以输入1.0，第二个是可以输入（1+3.1）那就是4.1,以此类推，每次点击上下箭头都会增加或者减少3.1，输入其他数字无效。这就是step的简单介绍。</p><p>问题三，去除input默认样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-appearance</span>: textfield;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-webkit-inner-spin-button</span>, <span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-webkit-outer-spin-button</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>28、ios 设置input 按钮样式会被默认样式覆盖</strong></p><p>解决方式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">textarea</span> &#123;  </span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;  </span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置默认样式为none</p><p><strong>29、IOS键盘字母输入，默认首字母大写</strong></p><p>解决方案，设置如下属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autocapitalize</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>30、select 下拉选择设置右对齐</strong></p><p>设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select option &#123;direction: rtl;&#125;</span><br></pre></td></tr></table></figure><p><strong>31、通过transform进行skew变形，rotate旋转会造成出现锯齿现象</strong></p><p>可以设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-transform: rotate(-4deg) skew(10deg) translateZ(0); </span><br><span class="line">transform: rotate(-4deg) skew(10deg) translateZ(0); </span><br><span class="line">outline: 1px solid rgba(255,255,255,0);</span><br></pre></td></tr></table></figure><p><strong>32、移动端点击300ms延迟</strong></p><p>300ms尚可接受，不过因为300ms产生的问题，我们必须要解决。300ms导致用户体验并不是很好，解决这个问题，我们一般在移动端用tap事件来取代click事件。</p><p>推荐两个js，一个是fastclick，一个是tap.js</p><p>关于300ms延迟，具体请看：<a href="http://thx.github.io/mobile/300ms-click-delay/">http://thx.github.io/mobile/300ms-click-delay/</a></p><p><strong>33、移动端点透问题</strong></p><p>案例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;haorooms&quot;</span>&gt;</span>点头事件测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>www.xxx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>div是绝对定位的蒙层,并且z-index高于a。而a标签是页面中的一个链接，我们给div绑定tap事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#haorooms&#x27;</span>).on(<span class="string">&#x27;tap&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;#haorooms&#x27;</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们点击蒙层时 div正常消失，但是当我们在a标签上点击蒙层时，发现a链接被触发，这就是所谓的点透事件。</p><p>原因：</p><p>touchstart 早于 touchend 早于click。 亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏， 此时 click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。</p><p>解决：</p><p>（1）尽量都使用touch事件来替换click事件。例如用touchend事件(推荐)。<br>（2）用fastclick，<a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a><br>（3）用preventDefault阻止a标签的click<br>（4）延迟一定的时间(300ms+)来处理事件 （不推荐）<br>（5）以上一般都能解决，实在不行就换成click事件。</p><p>下面介绍一下touchend事件，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#haorooms&quot;</span>).on(<span class="string">&quot;touchend&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>34、消除 IE10 里面的那个叉号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input:-ms-clear&#123;display:none;&#125;</span><br></pre></td></tr></table></figure><p><strong>35、关于 iOS 与 OS X 端字体的优化(横竖屏会出现字体加粗不一致等)</strong></p><p>iOS 浏览器横屏时会重置字体大小，设置 text-size-adjust 为 none 可以解决 iOS 上的问题，但桌面版 Safari 的字体缩放功能会失效，因此最佳方案是将 text-size-adjust 为 100% 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-text-size-adjust: 100%;</span><br><span class="line">-ms-text-size-adjust: 100%;</span><br><span class="line">text-size-adjust: 100%;</span><br></pre></td></tr></table></figure><p><strong>36、关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格</strong></p><p>可以通过正则去掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.value = <span class="built_in">this</span>.value.replace(<span class="regexp">/\u2006/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>37、移动端 HTML5 audio autoplay 失效问题</strong></p><p>这个不是 BUG，由于自动播放网页中的音频或视频，会给用户带来一些困扰或者不必要的流量消耗，所以苹果系统和安卓系统通常都会禁止自动播放和使用 JS 的触发播放，必须由用户来触发才可以播放。</p><p>解决方法思路：先通过用户 touchstart 触碰，触发播放并暂停（音频开始加载，后面用 JS 再操作就没问题了）。</p><p>解决代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;audio&#x27;</span>)[<span class="number">0</span>].play();</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;audio&#x27;</span>)[<span class="number">0</span>].pause();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>38、移动端 HTML5 input date 不支持 placeholder 问题</strong></p><p>这个我感觉没有什么好的解决方案，用如下方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;textbox-n&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;(this.type=&#x27;date&#x27;)&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有的浏览器可能要点击两遍！</p><p><strong>39、部分机型存在type为search的input，自带close按钮样式修改方法</strong></p><p>有些机型的搜索input控件会自带close按钮（一个伪元素），而通常为了兼容所有浏览器，我们会自己实现一个，此时去掉原生close按钮的方法为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#Search</span><span class="selector-pseudo">::-webkit-search-cancel-button</span>&#123;  <span class="attribute">display</span>: none; &#125;</span><br></pre></td></tr></table></figure><p>如果想使用原生close按钮，又想使其符合设计风格，可以对这个伪元素的样式进行修改。</p><p><strong>40、唤起select的option展开</strong></p><p>zepto方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(sltElement).trrgger(<span class="string">&quot;mousedown&quot;</span>);</span><br></pre></td></tr></table></figure><p>原生js方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDropdown</span>(<span class="params">sltElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> event;</span><br><span class="line">  event = <span class="built_in">document</span>.createEvent(<span class="string">&#x27;MouseEvents&#x27;</span>);</span><br><span class="line">  event.initMouseEvent(<span class="string">&#x27;mousedown&#x27;</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">window</span>);</span><br><span class="line">  sltElement.dispatchEvent(event);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用IntersectionObserve-API轻松实现惰性加载和无限滚动</title>
      <link href="2019/03/01/%E5%89%8D%E7%AB%AF/%E5%88%A9%E7%94%A8IntersectionObserve-API%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8/"/>
      <url>2019/03/01/%E5%89%8D%E7%AB%AF/%E5%88%A9%E7%94%A8IntersectionObserve-API%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网页开发时，常常需要了解某个元素是否进入了”视口”（viewport），即用户能不能看到它。</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n77qbn45g308w0i1n11.gif"></p><p>上图的绿色方块不断滚动，顶部会提示它的可见性。<br>传统的实现方法是，监听到scroll事件后，调用目标元素（绿色方块）的getBoundingClientRect()方法，得到它对应于视口左上角的坐标，再判断是否在视口之内。这种方法的缺点是，由于scroll事件密集发生，计算量很大，容易造成性能问题。<br>目前有一个新的 IntersectionObserver API，可以自动”观察”元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做”交叉观察器”。</p><h4 id="一、API"><a href="#一、API" class="headerlink" title="一、API"></a>一、API</h4><p>它的用法非常简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="keyword">new</span> IntersectionObserver(callback, option);</span><br></pre></td></tr></table></figure><p>上面代码中，IntersectionObserver是浏览器原生提供的构造函数，接受两个参数：callback是可见性变化时的回调函数，option是配置对象（该参数可选）。<br>构造函数的返回值是一个观察器实例。实例的observe方法可以指定观察哪个 DOM 节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始观察</span></span><br><span class="line">io.observe(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;example&#x27;</span>)); </span><br><span class="line"><span class="comment">// 停止观察</span></span><br><span class="line">io.unobserve(element); </span><br><span class="line"><span class="comment">// 关闭观察器</span></span><br><span class="line">io.disconnect();</span><br></pre></td></tr></table></figure><p>上面代码中，observe的参数是一个 DOM 节点对象。如果要观察多个节点，就要多次调用这个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">io.observe(elementA);</span><br><span class="line">io.observe(elementB);</span><br></pre></td></tr></table></figure><h4 id="二、callback-参数"><a href="#二、callback-参数" class="headerlink" title="二、callback 参数"></a>二、callback 参数</h4><p>目标元素的可见性变化时，就会调用观察器的回调函数callback。<br>callback一般会触发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(entries);  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，回调函数采用的是箭头函数的写法。callback函数的参数（entries）是一个数组，每个成员都是一个IntersectionObserverEntry对象。举例来说，如果同时有两个被观察的对象的可见性发生变化，entries数组就会有两个成员。</p><h4 id="三、IntersectionObserverEntry-对象"><a href="#三、IntersectionObserverEntry-对象" class="headerlink" title="三、IntersectionObserverEntry 对象"></a>三、IntersectionObserverEntry 对象</h4><p>IntersectionObserverEntry对象提供目标元素的信息，一共有六个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  time: 3893.92,</span><br><span class="line">  rootBounds: ClientRect &#123;</span><br><span class="line">    bottom: 920,</span><br><span class="line">    height: 1024,</span><br><span class="line">    left: 0,</span><br><span class="line">    right: 1024,</span><br><span class="line">    top: 0,</span><br><span class="line">    width: 920</span><br><span class="line">  &#125;,</span><br><span class="line">  boundingClientRect: ClientRect &#123;</span><br><span class="line">     &#x2F;&#x2F; ...</span><br><span class="line">  &#125;,</span><br><span class="line">  intersectionRect: ClientRect &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;,</span><br><span class="line">  intersectionRatio: 0.54,</span><br><span class="line">  target: element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个属性的含义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</span><br><span class="line">target：被观察的目标元素，是一个 DOM 节点对象</span><br><span class="line">rootBounds：根元素的矩形区域的信息，getBoundingClientRect()方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回null</span><br><span class="line">boundingClientRect：目标元素的矩形区域的信息</span><br><span class="line">intersectionRect：目标元素与视口（或根元素）的交叉区域的信息</span><br><span class="line">intersectionRatio：目标元素的可见比例，即intersectionRect占boundingClientRect的比例，完全可见时为1，完全不可见时小于等于0</span><br></pre></td></tr></table></figure><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n6we1hsuj30fa0f4taj.jpg"></p><p>上图中，灰色的水平方框代表视口，深红色的区域代表四个被观察的目标元素。它们各自的intersectionRatio图中都已经注明。<br>我写了一个 Demo[<a href="http://jsbin.com/canuze/edit?js,console,output%5D%EF%BC%8C%E6%BC%94%E7%A4%BAIntersectionObserverEntry%E5%AF%B9%E8%B1%A1%E3%80%82**%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E4%B8%AA">http://jsbin.com/canuze/edit?js,console,output]，演示IntersectionObserverEntry对象。**注意，这个</a> Demo 只能在 Chrome 51+ 运行**。</p><h4 id="四、实例：惰性加载（lazy-load）"><a href="#四、实例：惰性加载（lazy-load）" class="headerlink" title="四、实例：惰性加载（lazy load）"></a>四、实例：惰性加载（lazy load）</h4><p>有时，我们希望某些静态资源（比如图片），只有用户向下滚动，它们进入视口时才加载，这样可以节省带宽，提高网页性能。这就叫做”惰性加载”。<br>有了 IntersectionObserver API，实现起来就很容易了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">changes</span>) </span>&#123;</span><br><span class="line">    changes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">change</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> container = change.target;</span><br><span class="line">      <span class="keyword">var</span> content = container.querySelector(<span class="string">&#x27;template&#x27;</span>).content;</span><br><span class="line">      container.appendChild(content);</span><br><span class="line">      observer.unobserve(container);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">query(<span class="string">&#x27;.lazy-loaded&#x27;</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  observer.observe(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，只有目标区域可见时，才会将模板内容插入真实 DOM，从而引发静态资源的加载。</p><h4 id="五、实例：无限滚动"><a href="#五、实例：无限滚动" class="headerlink" title="五、实例：无限滚动"></a>五、实例：无限滚动</h4><p>无限滚动（infinite scroll）的实现也很简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intersectionObserver = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">entries</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果不可见，就返回</span></span><br><span class="line">    <span class="keyword">if</span> (entries[<span class="number">0</span>].intersectionRatio &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    loadItems(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Loaded new items&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 开始观察</span></span><br><span class="line">intersectionObserver.observe(</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.scrollerFooter&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>无限滚动时，最好在页面底部有一个页尾栏（又称sentinels）。一旦页尾栏可见，就表示用户到达了页面底部，从而加载新的条目放在页尾栏前面。这样做的好处是，不需要再一次调用observe()方法，现有的IntersectionObserver可以保持使用。</p><h4 id="六、Option-对象"><a href="#六、Option-对象" class="headerlink" title="六、Option 对象"></a>六、Option 对象</h4><p>IntersectionObserver构造函数的第二个参数是一个配置对象。它可以设置以下属性。</p><h5 id="6-1-threshold-属性"><a href="#6-1-threshold-属性" class="headerlink" title="6.1 threshold 属性"></a>6.1 threshold 属性</h5><p>threshold属性决定了什么时候触发回调函数。它是一个数组，每个成员都是一个门槛值，默认为[0]，即交叉比例（intersectionRatio）达到0时触发回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  entries =&gt; &#123;<span class="comment">/* ... */</span>&#125;, </span><br><span class="line">  &#123;</span><br><span class="line">    threshold: [<span class="number">0</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>用户可以自定义这个数组。比如，[0, 0.25, 0.5, 0.75, 1]就表示当目标元素 0%、25%、50%、75%、100% 可见时，会触发回调函数。</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n788lmu6g308w0i1tb1.gif"></p><h5 id="6-2-root-属性，rootMargin-属性"><a href="#6-2-root-属性，rootMargin-属性" class="headerlink" title="6.2 root 属性，rootMargin 属性"></a>6.2 root 属性，rootMargin 属性</h5><p>很多时候，目标元素不仅会随着窗口滚动，还会在容器里面滚动（比如在iframe窗口里滚动）。容器内滚动也会影响目标元素的可见性，参见本文开始时的那张示意图。<br>IntersectionObserver API 支持容器内滚动。root属性指定目标元素所在的容器节点（即根元素）。注意，容器元素必须是目标元素的祖先节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> opts = &#123; </span><br><span class="line">  root: <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.container&#x27;</span>),</span><br><span class="line">  rootMargin: <span class="string">&quot;500px 0px&quot;</span> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  callback,</span><br><span class="line">  opts</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码中，除了root属性，还有rootMargin属性。后者定义根元素的margin，用来扩展或缩小rootBounds这个矩形的大小，从而影响intersectionRect交叉区域的大小。它使用CSS的定义方法，比如10px 20px 30px 40px，表示 top、right、bottom 和 left 四个方向的值。<br>这样设置以后，不管是窗口滚动或者容器内滚动，只要目标元素可见性变化，都会触发观察器。</p><h4 id="七、注意点"><a href="#七、注意点" class="headerlink" title="七、注意点"></a>七、注意点</h4><p>IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。<br>规格写明，IntersectionObserver的实现，应该采用requestIdleCallback()，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。</p><h4 id="八、参考链接"><a href="#八、参考链接" class="headerlink" title="八、参考链接"></a>八、参考链接</h4><p>IntersectionObserver’s Coming into View[<a href="https://developers.google.com/web/updates/2016/04/intersectionobserver]">https://developers.google.com/web/updates/2016/04/intersectionobserver]</a><br>Intersection Observers Explained[<a href="https://github.com/WICG/IntersectionObserver/blob/gh-pages/explainer.md]">https://github.com/WICG/IntersectionObserver/blob/gh-pages/explainer.md]</a></p><p>转自：<a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html">http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript排序,冒泡,选择,插入,归并</title>
      <link href="2019/03/01/%E5%89%8D%E7%AB%AF/JavaScript%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1-%E9%80%89%E6%8B%A9-%E6%8F%92%E5%85%A5-%E5%BD%92%E5%B9%B6/"/>
      <url>2019/03/01/%E5%89%8D%E7%AB%AF/JavaScript%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1-%E9%80%89%E6%8B%A9-%E6%8F%92%E5%85%A5-%E5%BD%92%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不过说到排序，最容易想到的就是冒泡排序，选择排序，插入排序了。</p><p><strong>冒泡排序</strong></p><p>依次比较相邻的两个元素，如果后一个小于前一个，则交换，这样从头到尾一次，就将最大的放到了末尾。</p><p>从头到尾再来一次，由于每进行一轮，最后的都已经是最大的了，因此后一轮需要比较次数可以比上一次少一个。虽然你还是可以让他从头到尾来比较，但是后面的比较是没有意义的无用功，为了效率，你应该对代码进行优化。</p><p>图片演示如下</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n50274n9g30my075te6.gif"></p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;<span class="comment">// 相邻元素两两对比</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[j + <span class="number">1</span>];<span class="comment">// 元素交换</span></span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>选择排序</strong></p><p>选择排序我觉得是最简单的了，大一学VB的时候，就只记住了这个排序方法，原理非常简单：每次都找一个最大或者最小的排在开始即可。</p><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置<br>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>重复第二步，直到所有元素均排序完毕。<br>动图演示：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n51jmdukg30mj06wtil.gif"></p><p>代码演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> minIndex, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class="comment">// 寻找最小的数</span></span><br><span class="line">                minIndex = j;                 <span class="comment">// 将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入排序</strong></p><p>插入排序也比较简单。就像打扑克一样，依次将拿到的元素插入到正确的位置即可。</p><p>1.将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。<br>2.从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p><p>动图演示：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n52zq7kxg30mj0e1agh.gif"></p><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">var</span> preIndex, current;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">preIndex = i - <span class="number">1</span>;</span><br><span class="line">current = arr[i];</span><br><span class="line"><span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">arr[preIndex + <span class="number">1</span>] = arr[preIndex];</span><br><span class="line">preIndex--</span><br><span class="line">&#125;</span><br><span class="line">arr[preIndex + <span class="number">1</span>] = current</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的代价是低效</p><p>上面三种都是非常简单的排序方法，简单的同时呢，效率也会比较低，还是拿这本书里的对比图来说明：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n53x1k55j30hs0aumzj.jpg"></p><p>时间复杂度都高达O(n^2),而它们后面的一些排序算法时间复杂度基本都只有O(n log n)。</p><p>我的强迫症又犯了，我想要高效率一点的排序方法。</p><p><strong>归并排序</strong></p><p>简单把这本书的内容过了一遍，当时就理解了这个归并排序，因此这里就谈一下这个归并排序吧。</p><p>基本原理是分治法，就是分开并且递归来排序。</p><p>步骤如下：</p><p>1.申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；<br>2.设定两个指针，最初位置分别为两个已经排序序列的起始位置；<br>3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；<br>4.重复步骤 3 直到某一指针达到序列尾；<br>5.将另一序列剩下的所有元素直接复制到合并序列尾。</p><p>动图演示：</p><p><img src="http://pic1.zhoujie16.cn/006tKfTcly1g0n54fx733j30mj0e1dgf.jpg"></p><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;  <span class="comment">// 采用自上而下的递归方法</span></span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">right = arr.slice(middle);</span><br><span class="line"><span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line"><span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">result.push(left.shift())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result.push(right.shift())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (left.length) result.push(left.shift());</span><br><span class="line"><span class="keyword">while</span> (right.length) result.push(right.shift());</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是个爱折腾的人，折腾了总得看看效果吧。</p><p><strong>效率测试</strong></p><p>由于我学这个来进行排序不是对简单数组，数组内都是对象，要对对象的某个属性进行排序，还要考虑升降序。</p><p>因此我的代码实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [归并排序]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[Array]&#125;</span> </span>arr   [要排序的数组]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[String]&#125;</span> </span>prop  [排序字段，用于数组成员是对象时，按照其某个属性进行排序，简单数组直接排序忽略此参数]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[String]&#125;</span> </span>order [排序方式 省略或asc为升序 否则降序]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[Array]&#125;</span>       </span>[排序后数组，新数组，并非在原数组上的修改]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mergeSort = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 合并</span></span><br><span class="line">    <span class="keyword">var</span> _merge = <span class="function"><span class="keyword">function</span>(<span class="params">left, right, prop</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = [];</span><br><span class="line">        <span class="comment">// 对数组内成员的某个属性排序</span></span><br><span class="line">        <span class="keyword">if</span> (prop) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left[<span class="number">0</span>][prop] &lt;= right[<span class="number">0</span>][prop]) &#123;</span><br><span class="line">                    result.push(left.shift());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.push(right.shift());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 数组成员直接排序</span></span><br><span class="line">            <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">                    result.push(left.shift());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.push(right.shift());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left.length)</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        <span class="keyword">while</span> (right.length)</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _mergeSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr, prop</span>) </span>&#123; <span class="comment">// 采用自上而下的递归方法</span></span><br><span class="line">        <span class="keyword">var</span> len = arr.length;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">            left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">            right = arr.slice(middle);</span><br><span class="line">        <span class="keyword">return</span> _merge(_mergeSort(left, prop), _mergeSort(right, prop), prop);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr, prop, order</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = _mergeSort(arr, prop);</span><br><span class="line">        <span class="keyword">if</span> (!order || order.toLowerCase() === <span class="string">&#x27;asc&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            <span class="keyword">var</span> _ = [];</span><br><span class="line">            result.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">                _.unshift(item);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>需要对哪个属性进行排序是不确定，可以随意指定，因此写成了参数。有由于不想让这些东西在每次循环都进行判断，因此代码有点冗余。</p><p>关于降序的问题，也没有加入参数中，而是简单的升序后再逆序输出。原因是不想让每次循环递归里都去判断条件，所以简单处理了。</p><p>下面就是见证效率的时候了，一段数据模拟：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line"><span class="string">&quot;list|1000&quot;</span>: [&#123;</span><br><span class="line">name: <span class="string">&#x27;@cname&#x27;</span>,</span><br><span class="line">age: <span class="string">&#x27;@integer(0,500)&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;).list</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面使用Mock进行了模拟数据，关于Mock ： <a href="http://mockjs.com/">http://mockjs.com/</a></p><p>实际测试来啦：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效率测试</span></span><br><span class="line"><span class="keyword">var</span> arr = getData();</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;归并排序&#x27;</span>);</span><br><span class="line">mergeSort(arr, <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;归并排序&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;冒泡排序&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; l - i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age) &#123;</span><br><span class="line">            temp = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;冒泡排序&#x27;</span>);</span><br></pre></td></tr></table></figure><p>进行了五次，效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 归并排序: 6.592ms</span><br><span class="line">&#x2F;&#x2F; 冒泡排序: 25.959ms</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 归并排序: 1.334ms</span><br><span class="line">&#x2F;&#x2F; 冒泡排序: 20.078ms</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 归并排序: 1.085ms</span><br><span class="line">&#x2F;&#x2F; 冒泡排序: 16.420ms</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 归并排序: 1.200ms</span><br><span class="line">&#x2F;&#x2F; 冒泡排序: 16.574ms</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 归并排序: 2.593ms</span><br><span class="line">&#x2F;&#x2F; 冒泡排序: 12.653ms</span><br></pre></td></tr></table></figure><p>最低4倍，最高近16倍的效率之差还是比较满意的。</p><p>虽然1000条数据让前端排序的可能性不大，但是几十上百条的情况还是有的。另外由于node，JavaScript也能运行的服务端了，这个效率的提升也还是有用武之地的。</p><p><strong>一点疑问</strong></p><p>归并排序里面使用了递归，在《数据结构与算法 JavaScript 描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：</p><blockquote><p>However, it is not possible to do so in JavaScript, as the recursion goes too deep for the language to handle. </p></blockquote><p>然而，在 JavaScript 中这种方式不太可行，因为这个算法的递归深度对它来讲太深了。<br>gitbook上这本书的作者对此有疑问，我也有疑问。</p><p>归并中虽然用了递归，但是他是放在return后的呀。关于在renturn后的递归是有尾递归优化的呀。</p><p>关于尾递归优化是指：本来外层函数内部再调用一个函数的话，由于外层函数需要等待内层函数返回后才能返回结果，进入内层函数后，外层函数的信息，内存中是必须记住的，也就是调用堆栈。而内部函数放在return关键字后，就表示外层函数到此也就结束了，进入内层函数后，没有必要再记住外层函数内的所有信息。</p><p>上面是我的理解的描述，不知道算不算准确。chrome下已经可以开启尾递归优化的功能了，我觉得这个递归是不该影响他在JavaScript下的使用的。</p><p><strong>最后</strong></p><p>有兴趣的话，推荐读读这本书，进行排序的时候，可以考虑一些更高效的方法。</p><p>不过需要注意的是，这些高效率的排序方法，一般都需要相对较多的额外内存空间，需要权衡一下。</p><p>另外，非常小规模的数据就没有必要了。一是影响太小，而是我们人的效率问题，一分钟能从头写个冒泡、选择、插入的排序方法，而换成是归并排序呢？</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域资源共享CORS详解</title>
      <link href="2019/03/01/%E5%89%8D%E7%AB%AF/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABCORS%E8%AF%A6%E8%A7%A3/"/>
      <url>2019/03/01/%E5%89%8D%E7%AB%AF/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABCORS%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p><p>本文详细介绍CORS的内部机制。</p><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p><h4 id="二、两种请求"><a href="#二、两种请求" class="headerlink" title="二、两种请求"></a>二、两种请求</h4><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p><p>只要同时满足以下两大条件，就属于简单请求。</p><p> （1) 请求方法是以下三种方法之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br></pre></td></tr></table></figure><p>（2）HTTP的头信息不超出以下几种字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</span><br></pre></td></tr></table></figure><p>凡是不同时满足上面两个条件，就属于非简单请求。</p><p>浏览器对这两种请求的处理，是不一样的。</p><h4 id="三、简单请求"><a href="#三、简单请求" class="headerlink" title="三、简单请求"></a>三、简单请求</h4><p><strong>3.1 基本流程</strong><br>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p><p>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;cors HTTP&#x2F;1.1</span><br><span class="line">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0...</span><br></pre></td></tr></table></figure><p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br></pre></td></tr></table></figure><p>上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。</p><p>（1）Access-Control-Allow-Origin</p><p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><p>（2）Access-Control-Allow-Credentials</p><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p>（3）Access-Control-Expose-Headers</p><p>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><p><strong>3.2 withCredentials 属性</strong></p><p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure><p>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p><p>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h4 id="四、非简单请求"><a href="#四、非简单请求" class="headerlink" title="四、非简单请求"></a>四、非简单请求</h4><p><strong>4.1 预检请求</strong><br>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p><p>下面是一段浏览器的JavaScript脚本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://api.alice.com/cors&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;PUT&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;X-Custom-Header&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>上面代码中，HTTP请求的方法是PUT，并且发送一个自定义头信息X-Custom-Header。</p><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS &#x2F;cors HTTP&#x2F;1.1</span><br><span class="line">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0...</span><br></pre></td></tr></table></figure><p>“预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p><p>除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p><p>（1）Access-Control-Request-Method</p><p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</p><p>（2）Access-Control-Request-Headers</p><p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p><p><strong>4.2 预检请求的回应</strong><br>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache&#x2F;2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout&#x3D;2, max&#x3D;100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text&#x2F;plain</span><br></pre></td></tr></table></figure><p>上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示<a href="http://api.bob.com可以请求数据.该字段也可以设为星号,表示同意任意跨源请求./">http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http:&#x2F;&#x2F;api.alice.com.</span><br><span class="line">Origin http:&#x2F;&#x2F;api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure><p>服务器回应的其他CORS相关字段如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure><p>（1）Access-Control-Allow-Methods</p><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p>（2）Access-Control-Allow-Headers</p><p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p>（3）Access-Control-Allow-Credentials</p><p>该字段与简单请求时的含义相同。</p><p>（4）Access-Control-Max-Age</p><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><p>4.3 浏览器的正常请求和回应<br>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p><p>下面是”预检”请求之后，浏览器的正常CORS请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;cors HTTP&#x2F;1.1</span><br><span class="line">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0...</span><br></pre></td></tr></table></figure><p>上面头信息的Origin字段是浏览器自动添加的。</p><p>下面是服务器正常的回应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br></pre></td></tr></table></figure><p>上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。</p><p>五、与JSONP的比较<br>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p><p>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p><p>（完）</p><p>转自：阮一峰的网络日志（<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html%EF%BC%89">http://www.ruanyifeng.com/blog/2016/04/cors.html）</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中几种实用的跨域方法</title>
      <link href="2019/03/01/%E5%89%8D%E7%AB%AF/JavaScript%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%B3%95/"/>
      <url>2019/03/01/%E5%89%8D%E7%AB%AF/JavaScript%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里说的js跨域是指通过js在不同的域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，或者通过js获取页面中不同域的框架中(iframe)的数据。只要协议、域名、端口有任何一个不同，都被当作是不同的域。</p><p>要解决跨域的问题，我们可以使用以下几种方法：</p><p><strong>1、通过jsonp跨域</strong></p><p>script标签是不受同源策略影响的，它可以引入来自任何地方的js文件。<br>而jsonp的原理就是，在客户端和服务端定义一个函数，当客户端发起一个请求时，服务端返回一段javascript代码，其中调用了在客户端定义的函数，并将相应的数据作为参数传入该函数。</p><p>服务端获取到jsonp_callback传递的函数名jsonp_cb，返回一段对该函数调用的js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp_cb</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&quot;http://xx.com/test.php?jsonp_callback=jsonp_cb&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  <span class="comment">// 发送请求</span></span><br><span class="line">  script.src = url;</span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax()</span><br></pre></td></tr></table></figure><p><strong>2、img ping</strong></p><p>img标签也是没有跨域限制的，但它只能用来发送GET请求，且无法获取服务端的响应文本，可以利用它实现一些简单的、单向的跨域通信，例如跟踪用户的点击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">  img.onload = <span class="literal">null</span>;</span><br><span class="line">  img = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">img.src = <span class="string">&quot;http://xx/xx.gif&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3、使用window.name来进行跨域</strong></p><p>window对象拥有name属性，它有一个特点：相同协议下，在一个页面中，不随URL的改变而改变<br>示例代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="string">&#x27;string&#x27;</span> <span class="comment">// 字符串，一般允许的最大值为2Mconsole.log(window.name)location = &#x27;http://funteas.com/&#x27;</span></span><br></pre></td></tr></table></figure><p>此时，在控制台输入window.name，结果依然是”string”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.name <span class="comment">// &quot;string&quot;</span></span><br></pre></td></tr></table></figure><p>window.name的值只能是字符串，任何其他类型的值都会“转化”为字符串<br>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name)<span class="comment">// &quot;function()&#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>通过window.name实现跨域也很简单，iframe拥有contentWindow属性，其指向该iframe的window对象的引用，如果在iframe的src指向的页面中设置window.name值，那么就可以通过iframe.contentWindow.name就可以拿到这个值了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://funteas.com/lab/windowName&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> data = iframe.contentWindow.name</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line">iframe.src = urldocument.body.appendChild(iframe)</span><br></pre></td></tr></table></figure><p>然而，chrome会提示你跨域了！<br>而我们已经知道window.name不随URL的改变而改版，也就是说，onload时，已经获取到了name，只不过因为不同源，当前页面的脚本无法拿到iframe.contentWindow.name，此时只需要把iframe.src改为同源即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://funteas.com/lab/windowName&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    iframe.src = <span class="string">&#x27;favicon.ico&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> data = iframe.contentWindow.name</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line">iframe.src = urldocument.body.appendChild(iframe)</span><br></pre></td></tr></table></figure><p>刷新页面，你会发现iframe不断刷新，这是因为每次onload，iframe的src被修改，然后再次触发onload，从而导致iframe循环刷新，修改下即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://funteas.com/lab/windowName&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> state = <span class="literal">true</span>;</span><br><span class="line">iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(state === <span class="literal">true</span>)&#123;</span><br><span class="line">        iframe.src = <span class="string">&#x27;favicon.ico&#x27;</span>;</span><br><span class="line">        state = <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state === <span class="literal">false</span>)&#123;</span><br><span class="line">        state = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">var</span> data = iframe.contentWindow.name</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">iframe.src = urldocument.body.appendChild(iframe)</span><br></pre></td></tr></table></figure><p>上面请求的是一个静态页面，而服务端通常需要的是动态数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt; window.name = &quot;&#123;\&quot;name\&quot;:\&quot;story\&quot;&#125;&quot;&lt;/script&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>4、使用HTML5中新引进的window.postMessage方法来跨域传送数据</strong></p><p>postMessage允许不同源之间的脚本进行通信，用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin);</span><br></pre></td></tr></table></figure><ul><li>otherWindow 引用窗口 iframe.contentwindow 或 window.open返回的对象</li><li>message 为要传递的数据</li><li>targetOrigin 为目标源</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:80</span></span><br><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> popup = iframe.contentWindow</span><br><span class="line">  popup.postMessage(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;http://127.0.0.1:5000&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">iframe.src = <span class="string">&#x27;http://127.0.0.1:5000/lab/postMessage&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe)</span><br><span class="line"><span class="comment">// 监听返回的</span></span><br><span class="line">postMessagewindow.addEventListener(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.origin !== <span class="string">&quot;http://127.0.0.1:5000&quot;</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.data)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// http://127.0.0.1:5000/lab/postMessage</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 验证消息来源   </span></span><br><span class="line">  <span class="keyword">if</span> (event.origin !== <span class="string">&quot;http://127.0.0.1&quot;</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.source);</span><br><span class="line">  <span class="comment">// 消息源 popup    </span></span><br><span class="line">  <span class="built_in">console</span>.log(event.origin);</span><br><span class="line">  <span class="comment">// 消息源URI https://secure.example.net   </span></span><br><span class="line">  <span class="built_in">console</span>.log(event.data);</span><br><span class="line">  <span class="comment">// 来自消息源的数据 hello    </span></span><br><span class="line">  <span class="comment">// 返回数据    </span></span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  event.source.postMessage(message, event.origin);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5、CORS</strong></p><p>CORS（跨域资源共享）是一种跨域访问的机制，可以让AJAX实现跨域访问。它允许一个域上的脚本向另一个域提交跨域 AJAX 请求。实现此功能非常简单，只需由服务器发送一个响应标头即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: * &#x2F;&#x2F; 允许来自任何域的请求Access-Control-Allow-Origin: http:&#x2F;&#x2F;funteas.com&#x2F; &#x2F;&#x2F; 仅允许来自http:&#x2F;&#x2F;funteas.com&#x2F;的请求</span><br></pre></td></tr></table></figure><p>当客户端的ajax请求的url为其他域时，对于支持CORS的浏览器，请求头会自动添加Origin，值为当前host</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://bar.other/resources/public-data/&#x27;</span>;</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);xhr.send();</span><br></pre></td></tr></table></figure><p>CORS默认不发送cookie，如果要发送cookie，需要设置withCredentials</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>同时，服务端也要设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank">查看MDN关于CORS的介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你敢在post和get上刁难我，就别怪我装逼了</title>
      <link href="2019/02/28/%E5%89%8D%E7%AB%AF/%E4%BD%A0%E6%95%A2%E5%9C%A8post%E5%92%8Cget%E4%B8%8A%E5%88%81%E9%9A%BE%E6%88%91%EF%BC%8C%E5%B0%B1%E5%88%AB%E6%80%AA%E6%88%91%E8%A3%85%E9%80%BC%E4%BA%86/"/>
      <url>2019/02/28/%E5%89%8D%E7%AB%AF/%E4%BD%A0%E6%95%A2%E5%9C%A8post%E5%92%8Cget%E4%B8%8A%E5%88%81%E9%9A%BE%E6%88%91%EF%BC%8C%E5%B0%B1%E5%88%AB%E6%80%AA%E6%88%91%E8%A3%85%E9%80%BC%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前好几次面试都被问到 post 和 get 有什么区别，肯定很多同学和我一样说了一大堆什么 post 比 get 安全，get 比 post 传的少乱起八糟这样的答案，但是面试官就还是不停的问你，还有呢还有呢？当时我就火了还有啥？回来之后上网搜来来回回就那么几个答案，今天被我找到了正确的答案，今天分享给大家。</p><p>GET 和 POST 是 HTTP 请求的两种基本方法，要说它们的区别，接触过 WEB 开发的人都能说出一二。</p><p>最直观的区别就是 GET 把参数包含在 URL 中，POST 通过 request body 传递参数。</p><p>你可能自己写过无数个 GET 和 POST 请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。</p><p>当你在面试中被问到这个问题，你的内心充满了自信和喜悦。</p><img src="http://p9.pstatp.com/large/43650003c269d9e40970" width="400"/><p>你轻轻松松的给出了一个“标准答案”：</p><p>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。 GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。 GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。 GET 请求只能进行 url 编码，而 POST 支持多种编码方式。 GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。 GET 请求在 URL 中传送的参数是有长度限制的，而 POST 么有。 对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。 GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。 GET 参数通过 URL 传递，POST 放在 Request body 中。</p><p>“很遗憾，这不是我们要的回答!”</p><img src="http://p9.pstatp.com/large/43660003bea8e6887c2c" width="400"/><p>请告诉我真相。。。</p><p>如果我告诉你 GET 和 POST 本质上没有区别你信吗?</p><p>让我们扒下 GET 和 POST 的外衣，坦诚相见吧!</p><img src="http://p9.pstatp.com/large/43630003d92e7a974a1b" width="400"/><p>GET 和 POST 是什么?HTTP 协议中的两种发送请求的方法。</p><p>HTTP 是什么?HTTP 是基于 TCP/IP 的关于数据如何在万维网中如何通信的协议。</p><p>HTTP 的底层是 TCP/IP。所以 GET 和 POST 的底层也是 TCP/IP，也就是说，GET/POST 都是 TCP 链接。GET 和 POST 能做的事情是一样一样的。你要给 GET 加上 request body，给 POST 带上 url 参数，技术上是完全行的通的。</p><p>那么，“标准答案”里的那些区别是怎么回事?</p><img src="http://p9.pstatp.com/large/43680001ea57ce1943b8" width="400"/><p>在我大万维网世界中，TCP 就像汽车，我们用 TCP 来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则 HTTP 诞生了。HTTP 给汽车运输设定了好几个服务类别，有 GET, POST, PUT, DELETE 等等，HTTP 规定，当执行 GET 请求的时候，要给汽车贴上 GET 的标签(设置 method 为 GET)，而且要求把传送的数据放在车顶上(url 中)以方便记录。如果是 POST 请求，就要在车上贴上 POST 的标签，并把货物放在车厢里。当然，你也可以在 GET 的时候往车厢内偷偷藏点货物，但是这是很不光彩;也可以在 POST 的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP 只是个行为准则，而 TCP 才是 GET 和 POST 怎么实现的基本。</p><p>但是，我们只看到 HTTP 对 GET 和 POST 参数的传送渠道(url 还是 requrest body)提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢?</p><img src="http://p9.pstatp.com/large/43660003bea65e1749e1" width="400"/><p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器(发起 http 请求)和服务器(接受 http 请求)就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物(url 中无限加参数)。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，(大多数)浏览器通常都会限制 url 长度在 2K 个字节，而(大多数)服务器最多处理 64K 大小的 url。超过的部分，恕不处理。如果你用 GET 服务，在 request body 偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然 GET 可以带 request body，也不能保证一定能被接收到哦。</p><p>好了，现在你知道，GET 和 POST 本质上就是 TCP 链接，并无差别。但是由于 HTTP 的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>你以为本文就这么结束了?</p><img src="http://p9.pstatp.com/large/43680001ea55ac19d5c0" width="400"/><p>我们的大 BOSS 还等着出场呢。。。</p><p>这位 BOSS 有多神秘?当你试图在网上找“GET 和 POST 的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p><p>GET 和 POST 还有一个重大区别，简单的说：</p><p>GET 产生一个 TCP 数据包;POST 产生两个 TCP 数据包。</p><p>长的说：</p><p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200(返回数据);</p><p>而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok(返回数据)。</p><p>也就是说，GET 只需要汽车跑一趟就把货送到了，而 POST 得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>因为 POST 需要两步，时间上消耗的要多一点，看起来 GET 比 POST 更有效。因此 Yahoo 团队有推荐用 GET 替换 POST 来优化网站性能。但这是一个坑!跳入需谨慎。为什么?</p><ol><li><p>GET 与 POST 都有自己的语义，不能随便混用。</p></li><li><p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的 TCP 在验证数据包完整性上，有非常大的优点。</p></li><li><p>并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。</p></li></ol><p>现在，当面试官再问你“GET 与 POST 的区别”的时候，你的内心是不是这样的?</p><img src="http://p1.pstatp.com/large/43640003ccb53db27d4e" width="400"/>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>chrome模拟微信浏览器环境</title>
      <link href="2019/02/28/%E5%89%8D%E7%AB%AF/chrome%E6%A8%A1%E6%8B%9F%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/"/>
      <url>2019/02/28/%E5%89%8D%E7%AB%AF/chrome%E6%A8%A1%E6%8B%9F%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>User Agent 是用户浏览器内的一串字符，它描述了这个浏览器是那款浏览器、用户用的是哪个操作系统等等的一些属性。网页可以获取它来提供针对性的服务，当然，也可以被腾讯用来阻止你的访问。</p><p>我用的是 Chrome，其他浏览器也大同小异。在你打开那个网页链接，打开开发者工具， 然后按 ctrl shift p 打开命令框，搜索 network conditions（网络调节） 并打开。</p><img src="http://pic1.zhoujie16.cn/20190725180046.png" width=600/><p>找到下面的 User Agent，取消选择 Select automatically （自动选择），然后在下面的输入框中加入“ MicroMessenger ”即可。</p><img src="http://pic1.zhoujie16.cn/20190725180017.png" width=600/><p>你做出的更改会在关闭开发者工具后复原。所以不要关闭开发者工具，然后重新输入那个链接地址，打开即可。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端输入框填坑系列</title>
      <link href="2019/02/28/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BE%93%E5%85%A5%E6%A1%86%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/"/>
      <url>2019/02/28/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BE%93%E5%85%A5%E6%A1%86%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>输入在移动端是一个很常用的功能，那么输入框必然是一个很重要的部分。然而，移动端输入框总会遇到各种各样的问题，无论是样式还是ios和android两端体验不一致都是很让我们头疼的问题，那么如何使移动web的输入框体验更贴近原生也成了一个需要我们多多思考和研究的问题。</p><h3 id="一、文字输入限制问题"><a href="#一、文字输入限制问题" class="headerlink" title="一、文字输入限制问题"></a>一、文字输入限制问题</h3><p>我们拿最多可输入16个字为例。当输入字数（注意，不是字符长度）超过16字时，会触发tips提示，并且不能继续输入。</p><p>办法一：<br>textarea可以使用maxlength进行输入字数限制。<br>但是这个办法只能单纯的限制length，有时并不能真正的结局问题。<br>办法二：<br>在将第二个办法之前先来讲讲下面的几种情况：</p><h5 id="1、非直接的文字输入"><a href="#1、非直接的文字输入" class="headerlink" title="1、非直接的文字输入"></a><strong>1、非直接的文字输入</strong></h5><p>什么叫做非直接的文字输入呢？</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkiyktsxg30b10ad774.gif" alt="img"></p><p>当输入汉字时必然会是非直接输入，需要我们点选才能正式输入。<br>当我们字数限制为16个字，需要实时检查是否到16字。输入文字时，当有非直接的文字输入时，监听keydown事件和input事件都会直接触发判断字数逻辑，会截断我们正在输入的文字。<br>解决办法：<br>监听compositionend（当直接的文字输入时触发）这时，当没选中中文的时候不会进行字数判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#input&#x27;</span>).on(<span class="string">&#x27;compositionend&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = $(<span class="built_in">this</span>).val().length;</span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">16</span>) &#123;</span><br><span class="line">    <span class="comment">// 提示超过16字</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2、emoji表情的输入"><a href="#2、emoji表情的输入" class="headerlink" title="2、emoji表情的输入"></a><strong>2、emoji表情的输入</strong></h5><p>当输入emoji的时候，但是，当输入emoji表情的时候，js中判断emoji表情的length为2，因此emoji正常应该最多只能输入8个，但是ios端却把emoji的length算为1，可以输入16个emoji。这样就导致了两端的体验不同。因此需要在js中来进行字数限制。<br>再加上汉字输入问题，那么就加入一个标记位，来判断是否是直接的文字输入。然后监听input，限制字数，当超过字数限制的时候，把前16个字截断显示出来就ok了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cpLock;</span><br><span class="line">$(<span class="string">&#x27;#input&#x27;</span>).on(<span class="string">&#x27;compositionstart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  cpLock = <span class="literal">true</span>；</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&#x27;#input&#x27;</span>).on(<span class="string">&#x27;compositionend&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  cpLock = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&#x27;#input&#x27;</span>).on(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cpLock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target.value.length - <span class="number">17</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> txt = $(e.target).val().substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">      $(e.target).val(txt);</span><br><span class="line">      <span class="comment">// 超过16字提示</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="二、textarea置底展示问题"><a href="#二、textarea置底展示问题" class="headerlink" title="二、textarea置底展示问题"></a>二、textarea置底展示问题</h3><p>ios中的输入体验永远伴随着一个问题，就是当唤起键盘后，整个页面会被键盘压缩，也就是说页面的高度变小，并且所有的fixed全部变为了absolute。</p><h6 id="android效果："><a href="#android效果：" class="headerlink" title="android效果："></a>android效果：</h6><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/2D60002621E863465FA9D1D125E0A625.png" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/19B6FBC1CDAB2DFD5D8372835AD40D5B.jpg" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/0F235217BAA61D883AE0FF749D56639E.png" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/E7A2A47E4CBADEEC480C817F33420B89.jpg" width="300"/><p>使用fixed定位<br>可见android中唤起键盘是覆盖在页面上，不会压缩页面</p><h6 id="在ios上的效果："><a href="#在ios上的效果：" class="headerlink" title="在ios上的效果："></a>在ios上的效果：</h6><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/C2C872ABEC19523C4F7FA12C8BF9AF6C.png" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/13433D7D79C882AD3C77E44923C0E2AC.png" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/7750008C947D43327F2C12BBC837B52E.png" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/1A9474E333E9DC2B5943AA23B78BE9E6.png" width="300"/><p>那么如果我们需要将<strong>输入框固定在屏幕下方，而当键盘被唤起同时输入框固定在键盘上方</strong>（如下图样式）该如何解决呢？</p><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/6E894A4776B4E45EFEFC0A33A6234A51.png" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/C45EADCFE7E097D2D49E5315878F42DC.png" width="300"/><img src="http://www.alloyteam.com/wp-content/uploads/2017/03/F0C85FCCA1DD9D467AB1860DB1886434.png" width="300"/><p>可以看出，键盘会将页面顶上去。那么如果希望可以将输入框和键盘完全贴合，我们可以使用div模拟一个假的输入框，使用定位将真正的输入框隐藏掉，当点击假的输入框的时候，将真正的输入框定位到键盘上方，并且手动获取输入框焦点。</p><h6 id="在实现过程中需要注意下面几个问题："><a href="#在实现过程中需要注意下面几个问题：" class="headerlink" title="在实现过程中需要注意下面几个问题："></a>在实现过程中需要注意下面几个问题：</h6><p><strong>1、真正的输入框的位置计算</strong>：<br>首先记录无键盘时的window.innerHeight，当键盘弹出后再获取当前的window.innerHeight，两者的差值即为键盘的高度，那么定位真输入框自然就很容易了<br><strong>2、在ios下手动获取焦点不可以用click事件，需要使用tap事件才可以手动触发</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#fake-input&#x27;</span>).on($.os.ios ? <span class="string">&#x27;tap&#x27;</span> : <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  initHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">  $(<span class="string">&#x27;#input&#x27;</span>).focus();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3、当键盘收起的时候我们需要将真输入框再次隐藏掉，除了使用失去焦点（blur）方法，还有什么方法可以判断键盘是否收起呢？</strong><br>这里可以使用setInterval监听，当当前window.innerHeight和整屏高度相等的时候判断为键盘收起。<br><strong>注意</strong>：键盘弹起需要一点时间，所以计算当前屏幕高度也需要使用setInterval<br><strong>4、因为textarea中的文字不能置底显示，当输入超过一行textarea需要自动调整高度</strong>，因此将scrollHeight赋值给textarea的height。当删除文字的时候需要height也有变化，因此每次input都先将height置0，然后再赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#textarea&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">$(<span class="string">&#x27;#textarea&#x27;</span>).css(<span class="string">&#x27;height&#x27;</span>, $(<span class="string">&#x27;#textarea&#x27;</span>)[<span class="number">0</span>].scrollHeight);</span><br></pre></td></tr></table></figure><p>未完待续…</p><p>原创文章转载请注明：</p><p>转载自AlloyTeam：<a href="http://www.alloyteam.com/2017/03/moves-the-input-box-fill-series-a/">http://www.alloyteam.com/2017/03/moves-the-input-box-fill-series-a/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于input属性type=file的及其files对象的深层探究</title>
      <link href="2019/02/28/%E5%89%8D%E7%AB%AF/%E5%85%B3%E4%BA%8Einput%E5%B1%9E%E6%80%A7type-file%E7%9A%84%E5%8F%8A%E5%85%B6files%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E5%B1%82%E6%8E%A2%E7%A9%B6/"/>
      <url>2019/02/28/%E5%89%8D%E7%AB%AF/%E5%85%B3%E4%BA%8Einput%E5%B1%9E%E6%80%A7type-file%E7%9A%84%E5%8F%8A%E5%85%B6files%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E5%B1%82%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们都知道，html5中有个input type=file元素。用该元素可以实现页面上传文件的功能</p><p>但一般的做法只是简单的在表单中操作，我来研究一下深层东西</p><p>想要了解它，就要知道它的内置对象，files</p><p>页面上写一个input，然后选<a href="https://www.baidu.com/s?wd=%E4%BF%A9%E4%B8%AA&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">俩个</a>图片，打印这个input对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">&quot;input[name=&#x27;file1&#x27;]&quot;</span>).change( <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;input[name=&#x27;file1&#x27;]&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>发现有下列值，在0中，有一个files对象</p><p>我们发现input选择的文件被记录到了这个对象中，这个是fileList对象，是一个只读对象，不能修改</p><p>因为它不能修改，所以很难实现对已选中多个文件的删除某个文件等操作</p><p>里面记录了文件的name，size，type，和修改时间等，可知这个对象只存放了一些文件的信息，相当于是本地文件的索引，并不是把文件放到input中了，上传文件时它会再去找到实际的本地文件</p><p>利用这个files对象，我们可以实现很多功能，例如：</p><h4 id="一-选择图片未经后端显示预览图片"><a href="#一-选择图片未经后端显示预览图片" class="headerlink" title="一.选择图片未经后端显示预览图片"></a><strong>一.选择图片未经后端显示预览图片</strong></h4><h5 id="方法1：利用window的url工具将文件生成url，再将url赋值给img的src属性，显示出选中图像"><a href="#方法1：利用window的url工具将文件生成url，再将url赋值给img的src属性，显示出选中图像" class="headerlink" title="方法1：利用window的url工具将文件生成url，再将url赋值给img的src属性，显示出选中图像"></a>方法1：利用window的url工具将文件生成url，再将url赋值给img的src属性，显示出选中图像</h5><p>顺便提一下，input中控制选中类型加一个accept属性就行了，只会显示设定的文件类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.doc，.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.fbpj-camera&#x27;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//$(&#x27;.dianpuzhuangxiu .addmokuai .block .shuoming1 .pic .pic1&#x27;).children().remove();</span></span><br><span class="line">  <span class="comment">// 根据这个 &lt;input&gt; 获取文件的 HTML5 js 对象</span></span><br><span class="line">  <span class="keyword">var</span> files = event.target.files, file;</span><br><span class="line">  <span class="keyword">if</span> (files &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取目前上传的文件</span></span><br><span class="line">    file = files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 来在控制台看看到底这个对象是什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">    <span class="comment">// 那么我们可以做一下诸如文件大小校验的动作</span></span><br><span class="line">    <span class="keyword">if</span> (file.size &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>) &#123;</span><br><span class="line">      alert(<span class="string">&#x27;图片大小不能超过 2MB!&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// !!!!!!</span></span><br><span class="line">    <span class="comment">// 下面是关键的关键，通过这个 file 对象生成一个可用的图像 URL</span></span><br><span class="line">    <span class="comment">// 获取 window 的 URL 工具     </span></span><br><span class="line">    <span class="keyword">var</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">    <span class="comment">// 通过 file 生成目标 url</span></span><br><span class="line">    <span class="keyword">var</span> imgURL = URL.createObjectURL(file);</span><br><span class="line">    <span class="comment">// 用这个 URL 产生一个 &lt;img&gt; 将其显示出来</span></span><br><span class="line">    $(<span class="string">&#x27;.fbpj .container&#x27;</span>).prev().find(<span class="string">&quot;img&quot;</span>).attr(<span class="string">&#x27;src&#x27;</span>, imgURL);</span><br><span class="line">    <span class="comment">// 使用下面这句可以在内存中释放对此 url 的伺服，跑了之后那个 URL 就无效了</span></span><br><span class="line">    <span class="comment">//URL.revokeObjectURL(imgURL);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="方法2：利用html5的FileReader-读取文件（前提是浏览器支持的话）"><a href="#方法2：利用html5的FileReader-读取文件（前提是浏览器支持的话）" class="headerlink" title="方法2：利用html5的FileReader()读取文件（前提是浏览器支持的话）"></a>方法2：利用html5的FileReader()读取文件（前提是浏览器支持的话）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.FileReader) &#123;  </span><br><span class="line">    <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();  </span><br><span class="line">    <span class="comment">// add your code here  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span> &#123;  </span><br><span class="line">    alert(<span class="string">&quot;Not supported by your browser!&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;showPreview(this)&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;portrait&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70&quot;</span> <span class="attr">height</span>=<span class="string">&quot;75&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPreview</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = source.files[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.FileReader) &#123;</span><br><span class="line">    <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">    fr.onloadend = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;portrait&quot;</span>).src = e.target.result;</span><br><span class="line">    &#125;;</span><br><span class="line">    fr.readAsDataURL(file);  <span class="comment">//也是利用将图片作为url读出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="FileReader还有一些其他用法"><a href="#FileReader还有一些其他用法" class="headerlink" title="FileReader还有一些其他用法"></a>FileReader还有一些其他用法</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;oscar999&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleFiles</span>(<span class="params">files</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (files.length) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="javascript">        reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">&quot;filecontent&quot;</span>).innerHTML = <span class="built_in">this</span>.result;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        reader.readAsText(file);   <span class="comment">//作为字符串读出</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;handleFiles(this.files)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;filecontent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二-文件拖拽的方法保存文件"><a href="#二-文件拖拽的方法保存文件" class="headerlink" title="二.文件拖拽的方法保存文件"></a><strong>二.文件拖拽的方法保存文件</strong></h4><p>关于文件拖拽下面有注释，我主要说一下怎么给用js给input赋值，而不是手动去选文件</p><p>因为拖拽的区域只是一个div，无法进行上传操作，所以需要加一个form和input，让拖拽进去的文件进入input中。</p><p>取出files后，用$(“#file1”)[0].files=files;将文件赋值给input，注意赋值的必须是fileList对象，不要试图只放进去一个文件，fileList只读。</p><p>然后用h5中的FormData将form转化，提交即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">      text-align: center;</span><br><span class="line">      padding: 50px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">    培训活动列表</span><br><span class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  拖拽进入</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;.container&#x27;</span>).bind(<span class="string">&#x27;dragenter dragover&#x27;</span>, ignoreDrag);</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;.container&quot;</span>).on(&#123;</span></span><br><span class="line"><span class="javascript">    drop: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line">      e.preventDefault();</span><br><span class="line"><span class="javascript">      <span class="comment">//jquery的file要去e.originalEvent里面拿，拖拽获取files的方式与input的不同</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> files = e.originalEvent.dataTransfer.files;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//var files = e.dataTransfer.files;  原生的话这样就可以获取</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        myFileReader(files[i], <span class="function"><span class="keyword">function</span> (<span class="params">result, file</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (result) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//文件</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(file.name)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//文件夹</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;不要上传文件夹&quot;</span>)</span></span><br><span class="line"><span class="javascript">            flag = <span class="literal">false</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#file1&quot;</span>)[<span class="number">0</span>].files = files;   <span class="comment">//关键：将取到的文件赋值给input，用于ajax提交文件！！！</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData($(<span class="string">&quot;#form1&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          url: <span class="string">&quot;/it/orderManage/saveActivity&quot;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line">          data: formData,</span><br><span class="line"><span class="javascript">          <span class="comment">// 告诉jQuery不要去处理发送的数据</span></span></span><br><span class="line"><span class="javascript">          processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 告诉jQuery不要去设置Content-Type请求头</span></span></span><br><span class="line"><span class="javascript">          contentType: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">          <span class="keyword">async</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          success: <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(&quot;上传成功&quot;)</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (ret) &#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#trainInfoModal&quot;</span>).modal(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line"><span class="javascript">              layer.alert(<span class="string">&quot;保存成功&quot;</span>)</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&#x27;#orderTable&#x27;</span>).bootstrapTable(<span class="string">&quot;refresh&quot;</span>);</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#trainInfoModal input&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#trainInfoModal textarea&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(files);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">ignoreDrag</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">    e.originalEvent.stopPropagation();</span><br><span class="line">    e.originalEvent.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">myFileReader</span>(<span class="params">file, callback</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="built_in">window</span>.FileReader) &#123;</span></span><br><span class="line"><span class="javascript">      callback(<span class="literal">true</span>, file);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</span></span><br><span class="line">    fr.readAsDataURL(file);</span><br><span class="line"><span class="javascript">    fr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      callback(<span class="literal">true</span>, file);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    fr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  <span class="comment">//不好判断是否是文件夹，通过上传报错可以判断是文件夹</span></span></span><br><span class="line"><span class="javascript">      callback(<span class="literal">false</span>, file);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后台获取文件还是用MutipartFile[]接收</p><p>暂时先总结这么多</p><hr><p>作者：lianzhang861<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/lianzhang861/article/details/80283120">https://blog.csdn.net/lianzhang861/article/details/80283120</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>世界很大，我们很小，保持谦虚，稳步前行才是关键</title>
      <link href="2019/01/10/%E5%A8%B1%E4%B9%90/%E4%B8%96%E7%95%8C%E5%BE%88%E5%A4%A7%EF%BC%8C%E6%88%91%E4%BB%AC%E5%BE%88%E5%B0%8F%EF%BC%8C%E4%BF%9D%E6%8C%81%E8%B0%A6%E8%99%9A%EF%BC%8C%E7%A8%B3%E6%AD%A5%E5%89%8D%E8%A1%8C%E6%89%8D%E6%98%AF%E5%85%B3%E9%94%AE/"/>
      <url>2019/01/10/%E5%A8%B1%E4%B9%90/%E4%B8%96%E7%95%8C%E5%BE%88%E5%A4%A7%EF%BC%8C%E6%88%91%E4%BB%AC%E5%BE%88%E5%B0%8F%EF%BC%8C%E4%BF%9D%E6%8C%81%E8%B0%A6%E8%99%9A%EF%BC%8C%E7%A8%B3%E6%AD%A5%E5%89%8D%E8%A1%8C%E6%89%8D%E6%98%AF%E5%85%B3%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写了 Node 就算是后端了吗？<br>其实不是的，你可以说自己跨入大前端行列了，可以说自己是会crud的页面仔，但是我个人的观点来讲，你是不算是一个全栈或后端的，因为随便几个问题就可以打破你是后端的这个概念了。</p><p>nginx 你很了解了吗？<br>微服务你知道是什么概念吗？<br>docker你了解过吗？<br>你知道 Node 擅长处理密集型 IO（高并发），但是高并发下应该注意什么，没什么经验的你知道吗？即使是理论？<br>从自己瞎玩到企业级运用其实是有很大差距的，如果你也能用 koa 抽象出像 egg 这样的企业级框架，那就确实是很厉害了，你在使用框架时，你觉得你很厉害，但是其实服务集群的稳定性、健壮性都是框架帮你实现的而已，去除框架，自己本身剩下的东西才是最重要的，而 node 也只是帮我们打开了一扇新世界的大门，让你从前端的繁杂过渡到了深度的世界而已，so~</p><p>emmmm，其实我看书是算比较慢的，因为我经常一章自己可能需要看 2-3 遍，书中的代码我必然是看了后再自己写的，有时候觉得书中太复杂，可能会自己按照书中的思想去改造，结果改到后来发现还是书中的设计正确~~~然而写一篇总结博客，每章的内容可能需要看3-4遍才能保证全面且大部分正确，所以可能更新较慢~</p><p>世界很大，我们很小，保持谦虚，稳步前行才是关键</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react笔记-虚拟DOM与DOM-diff算法</title>
      <link href="2018/10/26/react/react%E7%AC%94%E8%AE%B0-%E8%99%9A%E6%8B%9FDOM%E4%B8%8EDOM-diff%E7%AE%97%E6%B3%95/"/>
      <url>2018/10/26/react/react%E7%AC%94%E8%AE%B0-%E8%99%9A%E6%8B%9FDOM%E4%B8%8EDOM-diff%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-虚拟DOM是什么"><a href="#1-虚拟DOM是什么" class="headerlink" title="1). 虚拟DOM是什么?"></a>1). 虚拟DOM是什么?</h3><p>一个虚拟DOM(元素)是一个一般的js对象, 准确的说是一个对象树(倒立的)<br>虚拟DOM保存了真实DOM的层次关系和一些基本属性，与真实DOM一一对应<br>如果只是更新虚拟DOM, 页面是不会重绘的</p><h3 id="2-Virtual-DOM-算法的基本步骤"><a href="#2-Virtual-DOM-算法的基本步骤" class="headerlink" title="2). Virtual DOM 算法的基本步骤"></a>2). Virtual DOM 算法的基本步骤</h3><p>用JS对象树表示DOM树的结构；然后用这个树构建一个真正的DOM树插到文档当中<br>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异<br>把差异应用到真实DOM树上，视图就更新了</p><h3 id="3-进一步理解"><a href="#3-进一步理解" class="headerlink" title="3). 进一步理解"></a>3). 进一步理解</h3><p>Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。<br>可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;04_component&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">  &#x2F;*</span><br><span class="line">  验证:</span><br><span class="line">  虚拟DOM+DOM Diff算法: 最小化页面重绘</span><br><span class="line">  *&#x2F;</span><br><span class="line"></span><br><span class="line">  class HelloWorld extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">      super(props)</span><br><span class="line">      this.state &#x3D; &#123;</span><br><span class="line">          date: new Date()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">      setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            date: new Date()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      console.log(&#39;render()&#39;)</span><br><span class="line">      return (</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Hello, &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Your name here&quot;&#x2F;&gt;!&amp;nbsp;</span><br><span class="line">          &lt;span&gt;It is &#123;this.state.date.toTimeString()&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;p&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;HelloWorld&#x2F;&gt;,</span><br><span class="line">    document.getElementById(&#39;example&#39;)</span><br><span class="line">  )</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react笔记-组件的生命周期</title>
      <link href="2018/10/26/react/react%E7%AC%94%E8%AE%B0-%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2018/10/26/react/react%E7%AC%94%E8%AE%B0-%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>组件的三个生命周期状态:<br> Mount：插入真实 DOM<br> Update：被重新渲染<br> Unmount：被移出真实 DOM</li><li>生命周期流程:<ul><li>第一次初始化显示: ReactDOM.render(<Xxx/>, containDom)<br>  constructor()<br>  componentWillMount() : 将要插入回调<br>  render() : 用于插入虚拟DOM回调<br>  componentDidMount() : 已经插入回调</li><li>每次更新state: this.setState({})<br>  componentWillReceiveProps(): 接收父组件新的属性<br>  componentWillUpdate() : 将要更新回调<br>  render() : 更新(重新渲染)<br>  componentDidUpdate() : 已经更新回调</li><li>删除组件: ReactDOM.unmountComponentAtNode(div): 移除组件<br>  componentWillUnmount() : 组件将要被移除回调</li></ul></li><li>常用的方法<br> render(): 必须重写, 返回一个自定义的虚拟DOM<br>   constructor(): 初始化状态, 绑定this(可以箭头函数代替)<br>   componentDidMount() : 只执行一次, 已经在dom树中, 适合启动/设置一些监听<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;10_ComponentLife&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">  &#x2F;*</span><br><span class="line">  需求: 自定义组件</span><br><span class="line">    1. 让指定的文本做显示&#x2F;隐藏的动画</span><br><span class="line">    2. 切换时间为2S</span><br><span class="line">    3. 点击按钮从界面中移除组件界面</span><br><span class="line">   *&#x2F;</span><br><span class="line">  class Fade extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor (props) &#123;</span><br><span class="line">      super(props)</span><br><span class="line">      console.log(&#39;constructor(): 创建组件对象&#39;)</span><br><span class="line">      this.state &#x3D; &#123;</span><br><span class="line">        opacity: 1</span><br><span class="line">      &#125;</span><br><span class="line">      this.removeComponent &#x3D; this.removeComponent.bind(this)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount () &#123;</span><br><span class="line">      console.log(&#39;componentWillMount(): 初始化将要挂载&#39;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;&#x2F;&#x2F; 在此方法中启动定时器&#x2F;绑定监听&#x2F;发送ajax请求</span><br><span class="line">      console.log(&#39;componentDidMount(): 初始化已经挂载&#39;)</span><br><span class="line">      &#x2F;&#x2F; 保存到当前组件对象中</span><br><span class="line">      this.intervalId &#x3D; setInterval(function () &#123;</span><br><span class="line">        console.log(&#39;--------&#39;)</span><br><span class="line">        &#x2F;&#x2F; 得到当前opacity</span><br><span class="line">        let &#123;opacity&#125; &#x3D; this.state</span><br><span class="line">        &#x2F;&#x2F; 更新opacity</span><br><span class="line">        opacity -&#x3D; 0.1</span><br><span class="line">        if(opacity&lt;&#x3D;0) &#123;</span><br><span class="line">          opacity &#x3D; 1</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 更新状态</span><br><span class="line">        this.setState(&#123;opacity&#125;)</span><br><span class="line">      &#125;.bind(this), 200)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUpdate () &#123;</span><br><span class="line">      console.log(&#39;componentWillUpdate(): 将要更新&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate () &#123;</span><br><span class="line">      console.log(&#39;componentDidUpdate(): 已经更新&#39;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount () &#123;&#x2F;&#x2F; 清除定时器&#x2F;解除监听</span><br><span class="line">      console.log(&#39;componentWillUnmount(): 将要被移除&#39;)</span><br><span class="line">      clearInterval(this.intervalId)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removeComponent () &#123;</span><br><span class="line">      ReactDOM.unmountComponentAtNode(document.getElementById(&#39;example&#39;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      console.log(&#39;render() 渲染组件&#39;)</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h2 style&#x3D;&#123;&#123;opacity:this.state.opacity&#125;&#125;&gt;&#123;this.props.content&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;this.removeComponent&#125;&gt;不活了&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ReactDOM.render(&lt;Fade content&#x3D;&quot;react学不会, 怎么办?&quot;&#x2F;&gt;, document.getElementById(&#39;example&#39;))</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>koa中间件</title>
      <link href="2018/09/26/%E5%89%8D%E7%AB%AF/koa%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>2018/09/26/%E5%89%8D%E7%AB%AF/koa%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、什么是-Koa-的中间件"><a href="#一、什么是-Koa-的中间件" class="headerlink" title="一、什么是 Koa 的中间件"></a>一、什么是 Koa 的中间件</h3><p>通俗的讲：中间件就是匹配路由之前或者匹配路由完成做的一系列的操作，我们就可以把它叫做中间件。</p><p>在 express 中间件（Middleware）是一个函数，它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web 应用中处理请求-响应循环流程中的中间件，一般被命名为 next 的变量。在 Koa 中中间件和 express 有点类似</p><h5 id="中间件的功能包括："><a href="#中间件的功能包括：" class="headerlink" title="中间件的功能包括："></a>中间件的功能包括：</h5><p>执行任何代码。</p><p>修改请求和响应对象。</p><p>终结请求-响应循环。</p><p>调用堆栈中的下一个中间件。</p><p>如果我的 get、post 回调函数中，没有 next 参数，那么就配了。如果想往下匹配的话，那么需要写 next()</p><h3 id="二、Koa-应用可使用如下几种中间件："><a href="#二、Koa-应用可使用如下几种中间件：" class="headerlink" title="二、Koa 应用可使用如下几种中间件："></a>二、Koa 应用可使用如下几种中间件：</h3><p>应用级中间件<br>路由级中间件<br>错误处理中间件<br>第三方中间件</p><h4 id="1-应用级中间件"><a href="#1-应用级中间件" class="headerlink" title="1.应用级中间件"></a>1.应用级中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入 koa模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Koa=<span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();  <span class="comment">/*引入是实例化路由** 推荐*/</span></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Koa中间件</span></span><br><span class="line"><span class="comment">//匹配任何路由  ，如果不写next，这个路由被匹配到了就不会继续向下匹配</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> app.use(async (ctx)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    ctx.body=&#x27;这是一个中间件&#x27;;</span></span><br><span class="line"><span class="comment"> &#125;)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*匹配路由之前打印日期*/</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    <span class="keyword">await</span> next(); <span class="comment">/*当前路由匹配完成以后继续向下匹配*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;首页&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;新闻列表页面&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;新闻列表页面&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(router.routes());   <span class="comment">/*启动路由*/</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">3002</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-路由级中间件"><a href="#2-路由级中间件" class="headerlink" title="2.路由级中间件"></a>2.路由级中间件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入 koa模块</span></span><br><span class="line"><span class="keyword">var</span> Koa=<span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();  <span class="comment">/*引入是实例化路由** 推荐*/</span></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Koa中间件</span></span><br><span class="line"><span class="comment">//匹配任何路由，如果不写next，这个路由被匹配到了就不会继续向下匹配</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;首页&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 匹配到news路由以后继续向下匹配路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是一个新闻1&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;新闻列表页面&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(router.routes());   <span class="comment">/*启动路由*/</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">3002</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-错误处理中间件"><a href="#3-错误处理中间件" class="headerlink" title="3.错误处理中间件"></a>3.错误处理中间件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入 koa模块</span></span><br><span class="line"><span class="keyword">var</span> Koa=<span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();  <span class="comment">/*引入是实例化路由** 推荐*/</span></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Koa中间件</span></span><br><span class="line"><span class="comment">//匹配任何路由  ，如果不写next，这个路由被匹配到了就不会继续向下匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//www.域名.com/news</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是一个中间件01&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="keyword">if</span>(ctx.status==<span class="number">404</span>)&#123;   <span class="comment">/*如果页面找不到*/</span></span><br><span class="line">        ctx.status = <span class="number">404</span>;</span><br><span class="line">        ctx.body=<span class="string">&quot;这是一个 404 页面&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ctx.url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    ctx.body=<span class="string">&quot;首页&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这是新闻2&#x27;</span>);</span><br><span class="line">    ctx.body=<span class="string">&#x27;这是一个新闻&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;新闻列表页面&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(router.routes());   <span class="comment">/*启动路由*/</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">3002</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-中间件执行流程：洋葱圈"><a href="#4-中间件执行流程：洋葱圈" class="headerlink" title="4.中间件执行流程：洋葱圈"></a>4.中间件执行流程：洋葱圈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入 koa模块</span><br><span class="line"></span><br><span class="line">var Koa&#x3D;require(&#39;koa&#39;);</span><br><span class="line">var router &#x3D; require(&#39;koa-router&#39;)();  &#x2F;*引入是实例化路由** 推荐*&#x2F;</span><br><span class="line">var app&#x3D;new Koa();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Koa中间件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;匹配任何路由  ，如果不写next，这个路由被匹配到了就不会继续向下匹配</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;www.域名.com&#x2F;news</span><br><span class="line">app.use(async (ctx,next)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&#39;1、这是第一个中间件01&#39;);</span><br><span class="line">    await next();</span><br><span class="line"></span><br><span class="line">    console.log(&#39;5、匹配路由完成以后又会返回来执行中间件&#39;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(async (ctx,next)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&#39;2、这是第二个中间件02&#39;);</span><br><span class="line">    await next();</span><br><span class="line"></span><br><span class="line">    console.log(&#39;4、匹配路由完成以后又会返回来执行中间件&#39;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;&#39;,async (ctx)&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">    ctx.body&#x3D;&quot;首页&quot;;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">router.get(&#39;&#x2F;news&#39;,async (ctx)&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">    console.log(&#39;3、匹配到了news这个路由&#39;);</span><br><span class="line">    ctx.body&#x3D;&#39;这是一个新闻&#39;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(router.routes());   &#x2F;*启动路由*&#x2F;</span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line">app.listen(3002);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac下chrome关闭跨域限制</title>
      <link href="2018/03/30/mac%E6%8A%80%E5%B7%A7/mac%E4%B8%8Bchrome%E5%85%B3%E9%97%AD%E8%B7%A8%E5%9F%9F%E9%99%90%E5%88%B6/"/>
      <url>2018/03/30/mac%E6%8A%80%E5%B7%A7/mac%E4%B8%8Bchrome%E5%85%B3%E9%97%AD%E8%B7%A8%E5%9F%9F%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -n &#x2F;Applications&#x2F;Google\ Chrome.app&#x2F; --args --disable-web-security  --user-data-dir&#x3D;&#x2F;Users&#x2F;用户名&#x2F;MyChromeDevUserData&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动开发不同手机弹出数字键盘问题</title>
      <link href="2017/11/09/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E4%B8%8D%E5%90%8C%E6%89%8B%E6%9C%BA%E5%BC%B9%E5%87%BA%E6%95%B0%E5%AD%97%E9%94%AE%E7%9B%98%E9%97%AE%E9%A2%98/"/>
      <url>2017/11/09/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E4%B8%8D%E5%90%8C%E6%89%8B%E6%9C%BA%E5%BC%B9%E5%87%BA%E6%95%B0%E5%AD%97%E9%94%AE%E7%9B%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="做手机页面时，遇到数字输入的键盘的问题，之前的做法只是一刀切的使用-type-”tel”，不过一直觉得九宫格的电话号码键盘上的英文字母太碍事了。于是想要尝试其它的实现方案，最终的结论却令人沮丧。不过也趁机详细了解了下pattern这个属性。"><a href="#做手机页面时，遇到数字输入的键盘的问题，之前的做法只是一刀切的使用-type-”tel”，不过一直觉得九宫格的电话号码键盘上的英文字母太碍事了。于是想要尝试其它的实现方案，最终的结论却令人沮丧。不过也趁机详细了解了下pattern这个属性。" class="headerlink" title="做手机页面时，遇到数字输入的键盘的问题，之前的做法只是一刀切的使用 type=”tel”，不过一直觉得九宫格的电话号码键盘上的英文字母太碍事了。于是想要尝试其它的实现方案，最终的结论却令人沮丧。不过也趁机详细了解了下pattern这个属性。"></a>做手机页面时，遇到数字输入的键盘的问题，之前的做法只是一刀切的使用 type=”tel”，不过一直觉得九宫格的电话号码键盘上的英文字母太碍事了。于是想要尝试其它的实现方案，最终的结论却令人沮丧。不过也趁机详细了解了下pattern这个属性。</h3><h3 id="type-”tel”-和-type-”number”-的区别"><a href="#type-”tel”-和-type-”number”-的区别" class="headerlink" title="type=”tel” 和 type=”number” 的区别"></a>type=”tel” 和 type=”number” 的区别</h3><p>这里还是先那么先交代一下最初遇到的问题。其实无论是<code>tel</code>还是<code>number</code>都不是完美的：</p><h4 id="type-”tel”"><a href="#type-”tel”" class="headerlink" title="type=”tel”"></a>type=”tel”</h4><ul><li><p>  优点是iOS和Android的键盘表现都差不多</p></li><li><p>缺点是那些字母好多余，虽然我没有强迫症但还是感觉怪怪的啊。</p><p>  [图片上传中…(image-fb2657-1510218512899-0)]</p></li></ul><h4 id="type-”number”"><a href="#type-”number”" class="headerlink" title="type=”number”"></a>type=”number”</h4><ul><li><p>  优点是Android下实现的一个真正的数字键盘</p></li><li><p>  缺点一：iOS下不是九宫格键盘，输入不方便</p></li><li><p>  缺点二：旧版Android（包括微信所用的X5内核）在输入框后面会有超级鸡肋的小尾巴，好在Android 4.4.4以后给去掉了。</p></li></ul><p>[图片上传失败…(image-42eb84-1510218512901)]</p><p>[图片上传失败…(image-ca5b01-1510218512901)]</p><p>不过对于缺点二，我们可以用webkit私有的伪元素给fix掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input[type&#x3D;number]::-webkit-inner-spin-button, input[type&#x3D;number]::-webkit-outer-spin-button &#123; -webkit-appearance: none; appearance: none; margin: 0; &#125;</span><br></pre></td></tr></table></figure><h3 id="pattern属性"><a href="#pattern属性" class="headerlink" title="pattern属性"></a>pattern属性</h3><p><code>pattern</code>用于验证表单输入的内容，通常HTML5的<code>type</code>属性，比如<code>email</code>、<code>tel</code>、<code>number</code>、<code>data</code>类、<code>url</code>等，已经自带了简单的数据格式验证功能了，加上pattern后，前端部分的验证更加简单高效了。</p><p>显而易见，<code>pattern</code>的属性值要用正则表达式。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="简单的数字验证"><a href="#简单的数字验证" class="headerlink" title="简单的数字验证"></a>简单的数字验证</h4><p>数字的验证有两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;number&quot; pattern&#x3D;&quot;\d&quot;&gt; &lt;input type&#x3D;&quot;number&quot; pattern&#x3D;&quot;[0-9]*&quot;&gt; </span><br></pre></td></tr></table></figure><p>[图片上传失败…(image-e580b3-1510218512901)]</p><p>对表单验证来说，这两个正则的作用是一样的，表现的话差异就很大：</p><ul><li><p>iOS中，只有<code>[0-9]\*</code>才可以调起九宫格数字键盘，<code>\d</code></p><p>  无效</p></li><li><p>  Android 4.4以下(包括X5内核)，两者都调起数字键盘；</p></li><li><p>Android 4.4.4以上，只认</p><p>  <code>type</code></p><p>  属性，也就是说，如果上面的代码将</p><p>  <code>type=&quot;number&quot;</code></p><p>  改为</p><p>  <code>type=&quot;text&quot;</code></p><p>  ，将调起全键盘而不会是九宫格数字键盘。</p></li></ul><h4 id="常用的正则表达式"><a href="#常用的正则表达式" class="headerlink" title="常用的正则表达式"></a>常用的正则表达式</h4><p><code>pattern</code>的用法都一样，这里不再啰嗦各种详细写法了，只是列出来一些常用的正则就好了：</p><ul><li><p>信用卡</p><p>  <code>[0-9]&#123;13,16&#125;</code></p></li><li><p>银联卡</p><p>  <code>^62[0-5]\d&#123;13,16&#125;$</code></p></li><li><p>Visa:</p><p>  <code>^4[0-9]&#123;12&#125;(?:[0-9]&#123;3&#125;)?$</code></p></li><li><p>  万事达：<code>^5[1-5][0-9]&#123;14&#125;$</code></p></li><li><p>QQ号码：</p><p>  <code>[1-9][0-9]&#123;4,14&#125;</code></p></li><li><p>  手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</code></p></li><li><p>  身份证：<code>^([0-9])&#123;7,18&#125;(x|X)?$</code></p></li><li><p>密码：<code>^[a-zA-Z]\w&#123;5,17&#125;$</code></p><p>  字母开头，长度在6~18之间，只能包含字母、数字和下划线</p></li><li><p>强密码：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</code></p><p>  包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间</p></li><li><p>  7个汉字或14个字符：<code>^[\u4e00-\u9fa5]&#123;1,7&#125;$|^[\dA-Za-z_]&#123;1,14&#125;$</code></p></li></ul><h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><p>很不幸，pattern的浏览器支持很惨：</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac命令行启动tomcat</title>
      <link href="2017/10/09/mac%E6%8A%80%E5%B7%A7/mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8tomcat/"/>
      <url>2017/10/09/mac%E6%8A%80%E5%B7%A7/mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8tomcat/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、检查安装环境<br>      可以在shell终端运行如下命令查看是否安装了java，以及JDK的版本：<br>      Java -version<br>      如果没有安装，请到<a href="https://www.java.com/en/download/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://www.java.com/en/download/下载安装</a></p><p>2、开始安装Tomcat<br>     下载链接：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a><br>     可以下载tar.gz文件，8.X版本，文件夹名称是apache-tomcat-8.5.9.tar.gz</p><p>3、终端操作<br>   3.1、将apache-tomcat-8.5.9.tar.gz文件移动到/usr/local/下<br>            sudo mv /Users/feng/Downloads/apache-tomcat-8.5.9.tar.gz /usr/local/<br>   3.2、解压缩在/usr/local/目录<br>            sudo cd /usr/local/<br>            tar zxvf apache-tomcat-8.5.9.tar.gz .<br>   3.3、建立链接，方便维护使用<br>            sudo ln -s /usr/local/apache-tomcat-8.5.9 /Library/Tomcat<br>   3.4、使自己成为目录的持有者<br>            sudo chown -R 你的系统用户名 /Library/Tomcat<br>   3.5、允许bin目录下程序运行<br>            sudo chmod 755 /Library/Tomcat/bin/*.sh<br>   完成</p><p>4、启动Tomcat<br>   命令行启动：<br>   /Library/Tomcat/bin/startup.sh</p><p>   若出现如下提示则表示安装并运行成功：<br>   Using CATALINA_BASE: /Library/Tomcat<br>   Using CATALINA_HOME: /Library/Tomcat<br>   Using CATALINA_TMPDIR: /Library/Tomcat/temp<br>   Using JRE_HOME: /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home </p><p>  （有时候到这一步了还是依然无法访问8080，有可能是tomcat版本的问题，换成7.0.65版本就OK）</p><p>   停止tomcat：<br>   shutdown.sh (如果不能停止使用killall -9 java 命令杀死进程，用ps -ef| grep java再验证下是否全部杀掉了进程)</p><p>5、打开浏览器，输入 <a href="http://localhost:8080/">http://localhost:8080/</a><br>      回车之后如果看到Apache Tomcat，表示已经成功运行Tomcat </p><p>6、配置Tomcat启动脚本：<br>   6.1、在/usr/bin目录下，使用vi创建tomcat文件，添加如下命令：</p><p>#!/bin/bash</p><p>case $1 in<br>start)<br>sh /Library/Tomcat/bin/startup.sh<br>;;<br>stop)<br>sh /Library/Tomcat/bin/shutdown.sh<br>;;<br>restart)<br>sh /Library/Tomcat/bin/shutdown.sh<br>sh /Library/Tomcat/bin/startup.sh<br>;;<br>*)<br>echo “Usage: start|stop|restart”<br>;;<br>esac</p><p>exit 0</p><p>   6.2、赋予文件执行权限：<br>            chmod 777 tomcat</p><p>   6.3、将这个文件放置到终端包含的路径中，例如/usr/bin，而后便可以在终端中简单地输入tomcat start和tomcat stop启用tomcat了。<br>           快捷命令如下：<br>           1）tomcat start<br>   2)  tomcat stop<br>       3)  tomcat restart </p>]]></content>
      
      
      <categories>
          
          <category> mac技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>overflow深入理解</title>
      <link href="2017/07/01/%E5%89%8D%E7%AB%AF/overflow%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
      <url>2017/07/01/%E5%89%8D%E7%AB%AF/overflow%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj16hhxj30yg0jdqct.jpg" alt="QQ截图20170701142145.png"><br>1.如果overflow-x与overflow-y的值相同则等同于overflow；<br>如果overflow-x与overflow-y的值不相同且其中一个属性值被赋为visible，而另一个值被赋为hidden/scroll/auto,那么这个visible会被重置为auto</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj1ty9dj30yg0gv0xs.jpg" alt="QQ截图20170701140509.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj36egaj30yg05jgnf.jpg" alt="QQ截图20170701140735.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj3t01kj30yg0j9q8q.jpg" alt="QQ截图20170701140819.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj4amjsj30yg0jd0zc.jpg" alt="QQ截图20170701141028.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj4qp56j30yg0jdafe.jpg" alt="QQ截图20170701140924.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj75qiej30yg0jbamn.jpg" alt="QQ截图20170701141234.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj8e5aaj30yg0600u7.jpg" alt="QQ截图20170701141328.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj8vxbej30yg0jdtei.jpg" alt="QQ截图20170701141416.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkj9dwyfj30yg06940n.jpg" alt="QQ截图20170701141446.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjbq30sj30yg05odh0.jpg" alt="QQ截图20170701141610.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjco93zj30yg0jbq7z.jpg" alt="QQ截图20170701141712.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjg2m00j30yg0jdqgq.jpg" alt="QQ截图20170701141815.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjix9q6j30yg0jc4ae.jpg" alt="QQ截图20170701141904.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjjq1gaj30yg0je11d.jpg" alt="QQ截图20170701142026.png"></p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjkm7c9j30yg0jdjyh.jpg" alt="QQ截图20170701142128.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现多重边框</title>
      <link href="2017/06/28/%E5%89%8D%E7%AB%AF/CSS%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%87%8D%E8%BE%B9%E6%A1%86/"/>
      <url>2017/06/28/%E5%89%8D%E7%AB%AF/CSS%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%87%8D%E8%BE%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实现这样的效果 简单</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhckr4mj307u0880h8.jpg" alt="Paste_Image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">width: 150px;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: lightskyblue;</span><br><span class="line">border: 20px solid royalblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">box</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>但要实现这样的效果，不包裹div的前提下，使用outline属性</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhddd9hj30a30af0ml.jpg" alt="Paste_Image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">width: 150px;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: lightskyblue;</span><br><span class="line">border: 20px solid royalblue;</span><br><span class="line">outline: solid 20px brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但要实现这样的效果 outline 是不行的</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkheagmjj308g098gld.jpg" alt="Paste_Image.png"></p><p>如果使用 outline 只会这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">width: 150px;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: lightskyblue;</span><br><span class="line">border: 20px solid royalblue;</span><br><span class="line">border-radius: 30px;</span><br><span class="line">outline: solid 20px brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkherldtj308t09n0sh.jpg" alt="Paste_Image.png"></p><p>但是用阴影 box-shadow 可以做到 就像这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">width: 150px;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: lightskyblue;</span><br><span class="line">border: 20px solid royalblue;</span><br><span class="line">border-radius: 30px;</span><br><span class="line">box-shadow: 0 0 0 20px brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhfdjbgj3088095gld.jpg" alt="Paste_Image.png"></p><p>还能这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">width: 150px;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: lightskyblue;</span><br><span class="line">border: 20px solid royalblue;</span><br><span class="line">border-radius: 30px;</span><br><span class="line">box-shadow: 0 0 0 20px brown,</span><br><span class="line">0 0 0 40px salmon,</span><br><span class="line">0 0 0 60px crimson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkhfosbyj30a30azq2q.jpg" alt="Paste_Image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HBuilder使用逍遥安卓5.1版本模拟器方法</title>
      <link href="2017/06/17/%E5%89%8D%E7%AB%AF/HBuilder%E4%BD%BF%E7%94%A8%E9%80%8D%E9%81%A5%E5%AE%89%E5%8D%935-1%E7%89%88%E6%9C%AC%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/"/>
      <url>2017/06/17/%E5%89%8D%E7%AB%AF/HBuilder%E4%BD%BF%E7%94%A8%E9%80%8D%E9%81%A5%E5%AE%89%E5%8D%935-1%E7%89%88%E6%9C%AC%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载逍遥安卓模拟器"><a href="#1-下载逍遥安卓模拟器" class="headerlink" title="1.下载逍遥安卓模拟器"></a>1.下载逍遥安卓模拟器</h3><p>逍遥安卓模拟器官网地址：<a href="https://www.xyaz.cn/">逍遥安卓模拟器官网</a>；<br>安装成功后不要着急打开，因为默认是安卓4.4版本，还要下载逍遥安卓5.1.1安卓系统内核</p><h3 id="2-下载逍遥安卓5-1-1安卓系统内核"><a href="#2-下载逍遥安卓5-1-1安卓系统内核" class="headerlink" title="2.下载逍遥安卓5.1.1安卓系统内核"></a>2.下载逍遥安卓5.1.1安卓系统内核</h3><p>去官方论坛下载，地址：<a href="http://www.xyaz.cn/thread-4232-1-1.html">公测版逍遥安卓5.1.1安卓系统内核模拟器独家发布</a>;<br>或者百度网盘下载，链接: <a href="https://pan.baidu.com/s/1boQApNT">https://pan.baidu.com/s/1boQApNT</a> 密码: xctb</p><h3 id="3-安装5-1-1内核"><a href="#3-安装5-1-1内核" class="headerlink" title="3.安装5.1.1内核"></a>3.安装5.1.1内核</h3><p>双击就可安装</p><p>安装好之后打开逍遥安卓多开器，点击“新建模拟器”，选择“创建Android 5.1.1模拟器”，等待创建成功就可以打开了。</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjljceuj30i40g6wg0.jpg" alt="Paste_Image.png"></p><h3 id="4-关联HBuilder"><a href="#4-关联HBuilder" class="headerlink" title="4.关联HBuilder"></a>4.关联HBuilder</h3><p>打开HBuilder安装目录 Hbuilder/tools/adbs，复制这3个文件</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjmgklhj30g605eglw.jpg" alt="Paste_Image.png"></p><p>拷贝到逍遥模拟器安装目录的 Memu文件夹下<br><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjnew9uj30gh0av0tn.jpg" alt="Paste_Image.png"></p><p>在逍遥模拟器中打开开发者调试选项打开USB调试</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjocyetj30gn0sv41a.jpg" alt="Paste_Image.png"></p><p>在HBuilder选项中修改端口 21503</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjoufo8j30kr0flmxx.jpg" alt="Paste_Image.png"></p><p>打开逍遥安卓模拟器 重启HBuilder就可以调试了</p><p><img src="http://pic1.zhoujie16.cn/006tNc79ly1g3zkjp98r4j30fo08zwf4.jpg" alt="Paste_Image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3弹性盒模型</title>
      <link href="2017/04/16/%E5%89%8D%E7%AB%AF/CSS3%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>2017/04/16/%E5%89%8D%E7%AB%AF/CSS3%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。<br>设置 display 属性的值为 flex 或 inline-flex。<br><strong>注意</strong>： 弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。<br>弹性子元素默认情况每个容器只有一行。</p><p>##弹性盒模型属性：<br>#####flex-direction属性:指定了弹性子元素在父容器中的位置。</p><blockquote><p><strong><em>row</em></strong>：横向从左到右排列（左对齐），默认的排列方式。<br><strong><em>row-reverse</em></strong>：反转横向排列（右对齐，从后往前排，最后一项排在最前面。<br><strong><em>column</em></strong>：纵向排列。<br><strong><em>column-reverse</em></strong>：反转纵向排列，从后往前排，最后一项排在最上面。</p></blockquote><p>#####justify-content :内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。</p><blockquote><p><strong><em>flex-star</em></strong>t：弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。<br><strong><em>flex-end</em></strong>：弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。<br><strong><em>center</em></strong>：弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。<br><strong><em>space-between</em></strong>：弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。<br><strong><em>space-around</em></strong>：弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。</p></blockquote><p>#####align-items :弹性盒子元素在侧轴（纵轴）方向上的对齐方式。</p><blockquote><p><strong><em>flex-start</em></strong>：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。<br><strong><em>flex-end</em></strong>：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。<br><strong><em>center</em></strong>：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。<br><strong><em>baseline</em></strong>：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。<br><strong><em>stretch</em></strong>：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</p></blockquote><p>#####flex-wrap 属性：弹性盒子的子元素换行方式</p><blockquote><p><strong><em>nowrap</em></strong> - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。<br><strong><em>wrap</em></strong> - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行<br><strong><em>wrap-reverse</em></strong> -反转 wrap 排列。</p></blockquote><p>#####align-content :修改 flex-wrap 属性的行为。类似于 align-items, 但它不是设置弹性子元素的对齐，而是设置各个行的对齐。</p><blockquote><p><strong><em>stretch</em></strong> - 默认。各行将会伸展以占用剩余的空间。<br><strong><em>flex-start</em></strong> - 各行向弹性盒容器的起始位置堆叠。<br><strong><em>flex-end</em></strong> - 各行向弹性盒容器的结束位置堆叠。<br><strong><em>center</em></strong> -各行向弹性盒容器的中间位置堆叠。<br><strong><em>space-between</em></strong> -各行在弹性盒容器中平均分布。<br><strong><em>space-around</em></strong> - 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。</p></blockquote><p>##弹性盒模型子元素属性：<br>#####order: 排序</p><blockquote><p><strong><em><integer></em></strong>：用整数值来定义排列顺序，数值小的排在前面。可以为负值。</p></blockquote><p>#####margin：对齐</p><p>#####align-self ：弹性元素自身在侧轴（纵轴）方向上的对齐方式。</p><blockquote><p><strong><em>auto</em></strong>：如果’align-self’的值为’auto’，则其计算值为元素的父元素的’align-items’值，如果其没有父元素，则计算值为’stretch’。<br><strong><em>flex-start</em></strong>：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。<br><strong><em>flex-end</em></strong>：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。<br><strong><em>center</em></strong>：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。<br><strong><em>baseline</em></strong>：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。<br><strong><em>stretch</em></strong>：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</p></blockquote><p>#####flex ：指定弹性子元素如何分配空间。</p><blockquote><p><strong><em>auto</em></strong>: 计算值为 1 1 auto<br><strong><em>initial</em></strong>: 计算值为 0 1 auto<br><strong><em>none</em></strong>：计算值为 0 0 auto<br><strong><em>inherit</em></strong>：从父元素继承<br><strong><em>[ flex-grow ]</em></strong>：定义弹性盒子元素的扩展比率。<br><strong><em>[ flex-shrink ]</em></strong>：定义弹性盒子元素的收缩比率。<br><strong><em>[ flex-basis ]</em></strong>：定义弹性盒子元素的默认基准值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用jsencrypt执行OpenSSL的RSA加密，解密</title>
      <link href="2017/02/23/%E5%89%8D%E7%AB%AF/%E4%BD%BF%E7%94%A8jsencrypt%E6%89%A7%E8%A1%8COpenSSL%E7%9A%84RSA%E5%8A%A0%E5%AF%86%EF%BC%8C%E8%A7%A3%E5%AF%86/"/>
      <url>2017/02/23/%E5%89%8D%E7%AB%AF/%E4%BD%BF%E7%94%A8jsencrypt%E6%89%A7%E8%A1%8COpenSSL%E7%9A%84RSA%E5%8A%A0%E5%AF%86%EF%BC%8C%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>jsencrypt的GITHUB地址：<a href="https://github.com/travist/jsencrypt">https://github.com/travist/jsencrypt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;使用jsencrypt执行OpenSSL的RSA加密，解密&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;!--引入jsencrypt.js--&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;bin&#x2F;jsencrypt.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;公钥</span><br><span class="line">var PUBLIC_KEY &#x3D; &#39;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr&#x2F;L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED&#x2F;ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQAB&#39;;</span><br><span class="line">&#x2F;&#x2F;私钥</span><br><span class="line">var PRIVATE_KEY &#x3D; &#39;MIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr&#x2F;L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED&#x2F;ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQABAoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc&#x2F;Z2hfenfYEzu+57fI4fvxTQ&#x2F;&#x2F;5DbzRR&#x2F;XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeHm7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAFz&#x2F;7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0&#x2F;mPwmP5rN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD&#x2F;YBvi52POIlRSSIMV7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATeaTgjFnqE&#x2F;lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5AzilpsLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU&#x2F;YgDnSpJVm1nASoRUnU8Jfm3Ozuku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876&#39;;</span><br><span class="line">&#x2F;&#x2F;使用公钥加密</span><br><span class="line">var encrypt &#x3D; new JSEncrypt();</span><br><span class="line">encrypt.setPublicKey(&#39;-----BEGIN PUBLIC KEY-----&#39; + PUBLIC_KEY + &#39;-----END PUBLIC KEY-----&#39;);</span><br><span class="line">var encrypted &#x3D; encrypt.encrypt(&#39;ceshi01&#39;);</span><br><span class="line">console.log(&#39;加密后数据:%o&#39;, encrypted);</span><br><span class="line">&#x2F;&#x2F;使用私钥解密</span><br><span class="line">var decrypt &#x3D; new JSEncrypt();</span><br><span class="line">decrypt.setPrivateKey(&#39;-----BEGIN RSA PRIVATE KEY-----&#39;+PRIVATE_KEY+&#39;-----END RSA PRIVATE KEY-----&#39;);</span><br><span class="line">var uncrypted &#x3D; decrypt.decrypt(encrypted);</span><br><span class="line">console.log(&#39;解密后数据:%o&#39;, uncrypted);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>JSEncrypt v2.3.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*! JSEncrypt v2.3.1 | https:&#x2F;&#x2F;npmcdn.com&#x2F;jsencrypt@2.3.1&#x2F;LICENSE.txt *&#x2F;</span><br><span class="line">!function(t,e)&#123;&quot;function&quot;&#x3D;&#x3D;typeof define&amp;&amp;define.amd?define([&quot;exports&quot;],e):e(&quot;object&quot;&#x3D;&#x3D;typeof exports&amp;&amp;&quot;string&quot;!&#x3D;typeof exports.nodeName?module.exports:t)&#125;(this,function(t)&#123;function e(t,e,i)&#123;null!&#x3D;t&amp;&amp;(&quot;number&quot;&#x3D;&#x3D;typeof t?this.fromNumber(t,e,i):null&#x3D;&#x3D;e&amp;&amp;&quot;string&quot;!&#x3D;typeof t?this.fromString(t,256):this.fromString(t,e))&#125;function i()&#123;return new e(null)&#125;function r(t,e,i,r,s,n)&#123;for(;--n&gt;&#x3D;0;)&#123;var o&#x3D;e*this[t++]+i[r]+s;s&#x3D;Math.floor(o&#x2F;67108864),i[r++]&#x3D;67108863&amp;o&#125;return s&#125;function s(t,e,i,r,s,n)&#123;for(var o&#x3D;32767&amp;e,h&#x3D;e&gt;&gt;15;--n&gt;&#x3D;0;)&#123;var a&#x3D;32767&amp;this[t],u&#x3D;this[t++]&gt;&gt;15,c&#x3D;h*a+u*o;a&#x3D;o*a+((32767&amp;c)&lt;&lt;15)+i[r]+(1073741823&amp;s),s&#x3D;(a&gt;&gt;&gt;30)+(c&gt;&gt;&gt;15)+h*u+(s&gt;&gt;&gt;30),i[r++]&#x3D;1073741823&amp;a&#125;return s&#125;function n(t,e,i,r,s,n)&#123;for(var o&#x3D;16383&amp;e,h&#x3D;e&gt;&gt;14;--n&gt;&#x3D;0;)&#123;var a&#x3D;16383&amp;this[t],u&#x3D;this[t++]&gt;&gt;14,c&#x3D;h*a+u*o;a&#x3D;o*a+((16383&amp;c)&lt;&lt;14)+i[r]+s,s&#x3D;(a&gt;&gt;28)+(c&gt;&gt;14)+h*u,i[r++]&#x3D;268435455&amp;a&#125;return s&#125;function o(t)&#123;return Be.charAt(t)&#125;function h(t,e)&#123;var i&#x3D;Ke[t.charCodeAt(e)];return null&#x3D;&#x3D;i?-1:i&#125;function a(t)&#123;for(var e&#x3D;this.t-1;e&gt;&#x3D;0;--e)t[e]&#x3D;this[e];t.t&#x3D;this.t,t.s&#x3D;this.s&#125;function u(t)&#123;this.t&#x3D;1,this.s&#x3D;0&gt;t?-1:0,t&gt;0?this[0]&#x3D;t:-1&gt;t?this[0]&#x3D;t+this.DV:this.t&#x3D;0&#125;function c(t)&#123;var e&#x3D;i();return e.fromInt(t),e&#125;function f(t,i)&#123;var r;if(16&#x3D;&#x3D;i)r&#x3D;4;else if(8&#x3D;&#x3D;i)r&#x3D;3;else if(256&#x3D;&#x3D;i)r&#x3D;8;else if(2&#x3D;&#x3D;i)r&#x3D;1;else if(32&#x3D;&#x3D;i)r&#x3D;5;else&#123;if(4!&#x3D;i)return void this.fromRadix(t,i);r&#x3D;2&#125;this.t&#x3D;0,this.s&#x3D;0;for(var s&#x3D;t.length,n&#x3D;!1,o&#x3D;0;--s&gt;&#x3D;0;)&#123;var a&#x3D;8&#x3D;&#x3D;r?255&amp;t[s]:h(t,s);0&gt;a?&quot;-&quot;&#x3D;&#x3D;t.charAt(s)&amp;&amp;(n&#x3D;!0):(n&#x3D;!1,0&#x3D;&#x3D;o?this[this.t++]&#x3D;a:o+r&gt;this.DB?(this[this.t-1]|&#x3D;(a&amp;(1&lt;&lt;this.DB-o)-1)&lt;&lt;o,this[this.t++]&#x3D;a&gt;&gt;this.DB-o):this[this.t-1]|&#x3D;a&lt;&lt;o,o+&#x3D;r,o&gt;&#x3D;this.DB&amp;&amp;(o-&#x3D;this.DB))&#125;8&#x3D;&#x3D;r&amp;&amp;0!&#x3D;(128&amp;t[0])&amp;&amp;(this.s&#x3D;-1,o&gt;0&amp;&amp;(this[this.t-1]|&#x3D;(1&lt;&lt;this.DB-o)-1&lt;&lt;o)),this.clamp(),n&amp;&amp;e.ZERO.subTo(this,this)&#125;function p()&#123;for(var t&#x3D;this.s&amp;this.DM;this.t&gt;0&amp;&amp;this[this.t-1]&#x3D;&#x3D;t;)--this.t&#125;function l(t)&#123;if(this.s&lt;0)return&quot;-&quot;+this.negate().toString(t);var e;if(16&#x3D;&#x3D;t)e&#x3D;4;else if(8&#x3D;&#x3D;t)e&#x3D;3;else if(2&#x3D;&#x3D;t)e&#x3D;1;else if(32&#x3D;&#x3D;t)e&#x3D;5;else&#123;if(4!&#x3D;t)return this.toRadix(t);e&#x3D;2&#125;var i,r&#x3D;(1&lt;&lt;e)-1,s&#x3D;!1,n&#x3D;&quot;&quot;,h&#x3D;this.t,a&#x3D;this.DB-h*this.DB%e;if(h-- &gt;0)for(a&lt;this.DB&amp;&amp;(i&#x3D;this[h]&gt;&gt;a)&gt;0&amp;&amp;(s&#x3D;!0,n&#x3D;o(i));h&gt;&#x3D;0;)e&gt;a?(i&#x3D;(this[h]&amp;(1&lt;&lt;a)-1)&lt;&lt;e-a,i|&#x3D;this[--h]&gt;&gt;(a+&#x3D;this.DB-e)):(i&#x3D;this[h]&gt;&gt;(a-&#x3D;e)&amp;r,0&gt;&#x3D;a&amp;&amp;(a+&#x3D;this.DB,--h)),i&gt;0&amp;&amp;(s&#x3D;!0),s&amp;&amp;(n+&#x3D;o(i));return s?n:&quot;0&quot;&#125;function d()&#123;var t&#x3D;i();return e.ZERO.subTo(this,t),t&#125;function g()&#123;return this.s&lt;0?this.negate():this&#125;function m(t)&#123;var e&#x3D;this.s-t.s;if(0!&#x3D;e)return e;var i&#x3D;this.t;if(e&#x3D;i-t.t,0!&#x3D;e)return this.s&lt;0?-e:e;for(;--i&gt;&#x3D;0;)if(0!&#x3D;(e&#x3D;this[i]-t[i]))return e;return 0&#125;function y(t)&#123;var e,i&#x3D;1;return 0!&#x3D;(e&#x3D;t&gt;&gt;&gt;16)&amp;&amp;(t&#x3D;e,i+&#x3D;16),0!&#x3D;(e&#x3D;t&gt;&gt;8)&amp;&amp;(t&#x3D;e,i+&#x3D;8),0!&#x3D;(e&#x3D;t&gt;&gt;4)&amp;&amp;(t&#x3D;e,i+&#x3D;4),0!&#x3D;(e&#x3D;t&gt;&gt;2)&amp;&amp;(t&#x3D;e,i+&#x3D;2),0!&#x3D;(e&#x3D;t&gt;&gt;1)&amp;&amp;(t&#x3D;e,i+&#x3D;1),i&#125;function b()&#123;return this.t&lt;&#x3D;0?0:this.DB*(this.t-1)+y(this[this.t-1]^this.s&amp;this.DM)&#125;function T(t,e)&#123;var i;for(i&#x3D;this.t-1;i&gt;&#x3D;0;--i)e[i+t]&#x3D;this[i];for(i&#x3D;t-1;i&gt;&#x3D;0;--i)e[i]&#x3D;0;e.t&#x3D;this.t+t,e.s&#x3D;this.s&#125;function S(t,e)&#123;for(var i&#x3D;t;i&lt;this.t;++i)e[i-t]&#x3D;this[i];e.t&#x3D;Math.max(this.t-t,0),e.s&#x3D;this.s&#125;function R(t,e)&#123;var i,r&#x3D;t%this.DB,s&#x3D;this.DB-r,n&#x3D;(1&lt;&lt;s)-1,o&#x3D;Math.floor(t&#x2F;this.DB),h&#x3D;this.s&lt;&lt;r&amp;this.DM;for(i&#x3D;this.t-1;i&gt;&#x3D;0;--i)e[i+o+1]&#x3D;this[i]&gt;&gt;s|h,h&#x3D;(this[i]&amp;n)&lt;&lt;r;for(i&#x3D;o-1;i&gt;&#x3D;0;--i)e[i]&#x3D;0;e[o]&#x3D;h,e.t&#x3D;this.t+o+1,e.s&#x3D;this.s,e.clamp()&#125;function E(t,e)&#123;e.s&#x3D;this.s;var i&#x3D;Math.floor(t&#x2F;this.DB);if(i&gt;&#x3D;this.t)return void(e.t&#x3D;0);var r&#x3D;t%this.DB,s&#x3D;this.DB-r,n&#x3D;(1&lt;&lt;r)-1;e[0]&#x3D;this[i]&gt;&gt;r;for(var o&#x3D;i+1;o&lt;this.t;++o)e[o-i-1]|&#x3D;(this[o]&amp;n)&lt;&lt;s,e[o-i]&#x3D;this[o]&gt;&gt;r;r&gt;0&amp;&amp;(e[this.t-i-1]|&#x3D;(this.s&amp;n)&lt;&lt;s),e.t&#x3D;this.t-i,e.clamp()&#125;function D(t,e)&#123;for(var i&#x3D;0,r&#x3D;0,s&#x3D;Math.min(t.t,this.t);s&gt;i;)r+&#x3D;this[i]-t[i],e[i++]&#x3D;r&amp;this.DM,r&gt;&gt;&#x3D;this.DB;if(t.t&lt;this.t)&#123;for(r-&#x3D;t.s;i&lt;this.t;)r+&#x3D;this[i],e[i++]&#x3D;r&amp;this.DM,r&gt;&gt;&#x3D;this.DB;r+&#x3D;this.s&#125;else&#123;for(r+&#x3D;this.s;i&lt;t.t;)r-&#x3D;t[i],e[i++]&#x3D;r&amp;this.DM,r&gt;&gt;&#x3D;this.DB;r-&#x3D;t.s&#125;e.s&#x3D;0&gt;r?-1:0,-1&gt;r?e[i++]&#x3D;this.DV+r:r&gt;0&amp;&amp;(e[i++]&#x3D;r),e.t&#x3D;i,e.clamp()&#125;function w(t,i)&#123;var r&#x3D;this.abs(),s&#x3D;t.abs(),n&#x3D;r.t;for(i.t&#x3D;n+s.t;--n&gt;&#x3D;0;)i[n]&#x3D;0;for(n&#x3D;0;n&lt;s.t;++n)i[n+r.t]&#x3D;r.am(0,s[n],i,n,0,r.t);i.s&#x3D;0,i.clamp(),this.s!&#x3D;t.s&amp;&amp;e.ZERO.subTo(i,i)&#125;function x(t)&#123;for(var e&#x3D;this.abs(),i&#x3D;t.t&#x3D;2*e.t;--i&gt;&#x3D;0;)t[i]&#x3D;0;for(i&#x3D;0;i&lt;e.t-1;++i)&#123;var r&#x3D;e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+&#x3D;e.am(i+1,2*e[i],t,2*i+1,r,e.t-i-1))&gt;&#x3D;e.DV&amp;&amp;(t[i+e.t]-&#x3D;e.DV,t[i+e.t+1]&#x3D;1)&#125;t.t&gt;0&amp;&amp;(t[t.t-1]+&#x3D;e.am(i,e[i],t,2*i,0,1)),t.s&#x3D;0,t.clamp()&#125;function B(t,r,s)&#123;var n&#x3D;t.abs();if(!(n.t&lt;&#x3D;0))&#123;var o&#x3D;this.abs();if(o.t&lt;n.t)return null!&#x3D;r&amp;&amp;r.fromInt(0),void(null!&#x3D;s&amp;&amp;this.copyTo(s));null&#x3D;&#x3D;s&amp;&amp;(s&#x3D;i());var h&#x3D;i(),a&#x3D;this.s,u&#x3D;t.s,c&#x3D;this.DB-y(n[n.t-1]);c&gt;0?(n.lShiftTo(c,h),o.lShiftTo(c,s)):(n.copyTo(h),o.copyTo(s));var f&#x3D;h.t,p&#x3D;h[f-1];if(0!&#x3D;p)&#123;var l&#x3D;p*(1&lt;&lt;this.F1)+(f&gt;1?h[f-2]&gt;&gt;this.F2:0),d&#x3D;this.FV&#x2F;l,g&#x3D;(1&lt;&lt;this.F1)&#x2F;l,m&#x3D;1&lt;&lt;this.F2,v&#x3D;s.t,b&#x3D;v-f,T&#x3D;null&#x3D;&#x3D;r?i():r;for(h.dlShiftTo(b,T),s.compareTo(T)&gt;&#x3D;0&amp;&amp;(s[s.t++]&#x3D;1,s.subTo(T,s)),e.ONE.dlShiftTo(f,T),T.subTo(h,h);h.t&lt;f;)h[h.t++]&#x3D;0;for(;--b&gt;&#x3D;0;)&#123;var S&#x3D;s[--v]&#x3D;&#x3D;p?this.DM:Math.floor(s[v]*d+(s[v-1]+m)*g);if((s[v]+&#x3D;h.am(0,S,s,b,0,f))&lt;S)for(h.dlShiftTo(b,T),s.subTo(T,s);s[v]&lt;--S;)s.subTo(T,s)&#125;null!&#x3D;r&amp;&amp;(s.drShiftTo(f,r),a!&#x3D;u&amp;&amp;e.ZERO.subTo(r,r)),s.t&#x3D;f,s.clamp(),c&gt;0&amp;&amp;s.rShiftTo(c,s),0&gt;a&amp;&amp;e.ZERO.subTo(s,s)&#125;&#125;&#125;function K(t)&#123;var r&#x3D;i();return this.abs().divRemTo(t,null,r),this.s&lt;0&amp;&amp;r.compareTo(e.ZERO)&gt;0&amp;&amp;t.subTo(r,r),r&#125;function A(t)&#123;this.m&#x3D;t&#125;function U(t)&#123;return t.s&lt;0||t.compareTo(this.m)&gt;&#x3D;0?t.mod(this.m):t&#125;function O(t)&#123;return t&#125;function V(t)&#123;t.divRemTo(this.m,null,t)&#125;function N(t,e,i)&#123;t.multiplyTo(e,i),this.reduce(i)&#125;function J(t,e)&#123;t.squareTo(e),this.reduce(e)&#125;function I()&#123;if(this.t&lt;1)return 0;var t&#x3D;this[0];if(0&#x3D;&#x3D;(1&amp;t))return 0;var e&#x3D;3&amp;t;return e&#x3D;e*(2-(15&amp;t)*e)&amp;15,e&#x3D;e*(2-(255&amp;t)*e)&amp;255,e&#x3D;e*(2-((65535&amp;t)*e&amp;65535))&amp;65535,e&#x3D;e*(2-t*e%this.DV)%this.DV,e&gt;0?this.DV-e:-e&#125;function P(t)&#123;this.m&#x3D;t,this.mp&#x3D;t.invDigit(),this.mpl&#x3D;32767&amp;this.mp,this.mph&#x3D;this.mp&gt;&gt;15,this.um&#x3D;(1&lt;&lt;t.DB-15)-1,this.mt2&#x3D;2*t.t&#125;function M(t)&#123;var r&#x3D;i();return t.abs().dlShiftTo(this.m.t,r),r.divRemTo(this.m,null,r),t.s&lt;0&amp;&amp;r.compareTo(e.ZERO)&gt;0&amp;&amp;this.m.subTo(r,r),r&#125;function L(t)&#123;var e&#x3D;i();return t.copyTo(e),this.reduce(e),e&#125;function q(t)&#123;for(;t.t&lt;&#x3D;this.mt2;)t[t.t++]&#x3D;0;for(var e&#x3D;0;e&lt;this.m.t;++e)&#123;var i&#x3D;32767&amp;t[e],r&#x3D;i*this.mpl+((i*this.mph+(t[e]&gt;&gt;15)*this.mpl&amp;this.um)&lt;&lt;15)&amp;t.DM;for(i&#x3D;e+this.m.t,t[i]+&#x3D;this.m.am(0,r,t,e,0,this.m.t);t[i]&gt;&#x3D;t.DV;)t[i]-&#x3D;t.DV,t[++i]++&#125;t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)&gt;&#x3D;0&amp;&amp;t.subTo(this.m,t)&#125;function C(t,e)&#123;t.squareTo(e),this.reduce(e)&#125;function H(t,e,i)&#123;t.multiplyTo(e,i),this.reduce(i)&#125;function j()&#123;return 0&#x3D;&#x3D;(this.t&gt;0?1&amp;this[0]:this.s)&#125;function k(t,r)&#123;if(t&gt;4294967295||1&gt;t)return e.ONE;var s&#x3D;i(),n&#x3D;i(),o&#x3D;r.convert(this),h&#x3D;y(t)-1;for(o.copyTo(s);--h&gt;&#x3D;0;)if(r.sqrTo(s,n),(t&amp;1&lt;&lt;h)&gt;0)r.mulTo(n,o,s);else&#123;var a&#x3D;s;s&#x3D;n,n&#x3D;a&#125;return r.revert(s)&#125;function F(t,e)&#123;var i;return i&#x3D;256&gt;t||e.isEven()?new A(e):new P(e),this.exp(t,i)&#125;</span><br><span class="line">&#x2F;&#x2F; Copyright (c) 2005-2009  Tom Wu</span><br><span class="line">&#x2F;&#x2F; All Rights Reserved.</span><br><span class="line">&#x2F;&#x2F; See &quot;LICENSE&quot; for details.</span><br><span class="line">function _()&#123;var t&#x3D;i();return this.copyTo(t),t&#125;function z()&#123;if(this.s&lt;0)&#123;if(1&#x3D;&#x3D;this.t)return this[0]-this.DV;if(0&#x3D;&#x3D;this.t)return-1&#125;else&#123;if(1&#x3D;&#x3D;this.t)return this[0];if(0&#x3D;&#x3D;this.t)return 0&#125;return(this[1]&amp;(1&lt;&lt;32-this.DB)-1)&lt;&lt;this.DB|this[0]&#125;function Z()&#123;return 0&#x3D;&#x3D;this.t?this.s:this[0]&lt;&lt;24&gt;&gt;24&#125;function G()&#123;return 0&#x3D;&#x3D;this.t?this.s:this[0]&lt;&lt;16&gt;&gt;16&#125;function $(t)&#123;return Math.floor(Math.LN2*this.DB&#x2F;Math.log(t))&#125;function Y()&#123;return this.s&lt;0?-1:this.t&lt;&#x3D;0||1&#x3D;&#x3D;this.t&amp;&amp;this[0]&lt;&#x3D;0?0:1&#125;function W(t)&#123;if(null&#x3D;&#x3D;t&amp;&amp;(t&#x3D;10),0&#x3D;&#x3D;this.signum()||2&gt;t||t&gt;36)return&quot;0&quot;;var e&#x3D;this.chunkSize(t),r&#x3D;Math.pow(t,e),s&#x3D;c(r),n&#x3D;i(),o&#x3D;i(),h&#x3D;&quot;&quot;;for(this.divRemTo(s,n,o);n.signum()&gt;0;)h&#x3D;(r+o.intValue()).toString(t).substr(1)+h,n.divRemTo(s,n,o);return o.intValue().toString(t)+h&#125;function Q(t,i)&#123;this.fromInt(0),null&#x3D;&#x3D;i&amp;&amp;(i&#x3D;10);for(var r&#x3D;this.chunkSize(i),s&#x3D;Math.pow(i,r),n&#x3D;!1,o&#x3D;0,a&#x3D;0,u&#x3D;0;u&lt;t.length;++u)&#123;var c&#x3D;h(t,u);0&gt;c?&quot;-&quot;&#x3D;&#x3D;t.charAt(u)&amp;&amp;0&#x3D;&#x3D;this.signum()&amp;&amp;(n&#x3D;!0):(a&#x3D;i*a+c,++o&gt;&#x3D;r&amp;&amp;(this.dMultiply(s),this.dAddOffset(a,0),o&#x3D;0,a&#x3D;0))&#125;o&gt;0&amp;&amp;(this.dMultiply(Math.pow(i,o)),this.dAddOffset(a,0)),n&amp;&amp;e.ZERO.subTo(this,this)&#125;function X(t,i,r)&#123;if(&quot;number&quot;&#x3D;&#x3D;typeof i)if(2&gt;t)this.fromInt(1);else for(this.fromNumber(t,r),this.testBit(t-1)||this.bitwiseTo(e.ONE.shiftLeft(t-1),ht,this),this.isEven()&amp;&amp;this.dAddOffset(1,0);!this.isProbablePrime(i);)this.dAddOffset(2,0),this.bitLength()&gt;t&amp;&amp;this.subTo(e.ONE.shiftLeft(t-1),this);else&#123;var s&#x3D;new Array,n&#x3D;7&amp;t;s.length&#x3D;(t&gt;&gt;3)+1,i.nextBytes(s),n&gt;0?s[0]&amp;&#x3D;(1&lt;&lt;n)-1:s[0]&#x3D;0,this.fromString(s,256)&#125;&#125;function tt()&#123;var t&#x3D;this.t,e&#x3D;new Array;e[0]&#x3D;this.s;var i,r&#x3D;this.DB-t*this.DB%8,s&#x3D;0;if(t-- &gt;0)for(r&lt;this.DB&amp;&amp;(i&#x3D;this[t]&gt;&gt;r)!&#x3D;(this.s&amp;this.DM)&gt;&gt;r&amp;&amp;(e[s++]&#x3D;i|this.s&lt;&lt;this.DB-r);t&gt;&#x3D;0;)8&gt;r?(i&#x3D;(this[t]&amp;(1&lt;&lt;r)-1)&lt;&lt;8-r,i|&#x3D;this[--t]&gt;&gt;(r+&#x3D;this.DB-8)):(i&#x3D;this[t]&gt;&gt;(r-&#x3D;8)&amp;255,0&gt;&#x3D;r&amp;&amp;(r+&#x3D;this.DB,--t)),0!&#x3D;(128&amp;i)&amp;&amp;(i|&#x3D;-256),0&#x3D;&#x3D;s&amp;&amp;(128&amp;this.s)!&#x3D;(128&amp;i)&amp;&amp;++s,(s&gt;0||i!&#x3D;this.s)&amp;&amp;(e[s++]&#x3D;i);return e&#125;function et(t)&#123;return 0&#x3D;&#x3D;this.compareTo(t)&#125;function it(t)&#123;return this.compareTo(t)&lt;0?this:t&#125;function rt(t)&#123;return this.compareTo(t)&gt;0?this:t&#125;function st(t,e,i)&#123;var r,s,n&#x3D;Math.min(t.t,this.t);for(r&#x3D;0;n&gt;r;++r)i[r]&#x3D;e(this[r],t[r]);if(t.t&lt;this.t)&#123;for(s&#x3D;t.s&amp;this.DM,r&#x3D;n;r&lt;this.t;++r)i[r]&#x3D;e(this[r],s);i.t&#x3D;this.t&#125;else&#123;for(s&#x3D;this.s&amp;this.DM,r&#x3D;n;r&lt;t.t;++r)i[r]&#x3D;e(s,t[r]);i.t&#x3D;t.t&#125;i.s&#x3D;e(this.s,t.s),i.clamp()&#125;function nt(t,e)&#123;return t&amp;e&#125;function ot(t)&#123;var e&#x3D;i();return this.bitwiseTo(t,nt,e),e&#125;function ht(t,e)&#123;return t|e&#125;function at(t)&#123;var e&#x3D;i();return this.bitwiseTo(t,ht,e),e&#125;function ut(t,e)&#123;return t^e&#125;function ct(t)&#123;var e&#x3D;i();return this.bitwiseTo(t,ut,e),e&#125;function ft(t,e)&#123;return t&amp;~e&#125;function pt(t)&#123;var e&#x3D;i();return this.bitwiseTo(t,ft,e),e&#125;function lt()&#123;for(var t&#x3D;i(),e&#x3D;0;e&lt;this.t;++e)t[e]&#x3D;this.DM&amp;~this[e];return t.t&#x3D;this.t,t.s&#x3D;~this.s,t&#125;function dt(t)&#123;var e&#x3D;i();return 0&gt;t?this.rShiftTo(-t,e):this.lShiftTo(t,e),e&#125;function gt(t)&#123;var e&#x3D;i();return 0&gt;t?this.lShiftTo(-t,e):this.rShiftTo(t,e),e&#125;function mt(t)&#123;if(0&#x3D;&#x3D;t)return-1;var e&#x3D;0;return 0&#x3D;&#x3D;(65535&amp;t)&amp;&amp;(t&gt;&gt;&#x3D;16,e+&#x3D;16),0&#x3D;&#x3D;(255&amp;t)&amp;&amp;(t&gt;&gt;&#x3D;8,e+&#x3D;8),0&#x3D;&#x3D;(15&amp;t)&amp;&amp;(t&gt;&gt;&#x3D;4,e+&#x3D;4),0&#x3D;&#x3D;(3&amp;t)&amp;&amp;(t&gt;&gt;&#x3D;2,e+&#x3D;2),0&#x3D;&#x3D;(1&amp;t)&amp;&amp;++e,e&#125;function yt()&#123;for(var t&#x3D;0;t&lt;this.t;++t)if(0!&#x3D;this[t])return t*this.DB+mt(this[t]);return this.s&lt;0?this.t*this.DB:-1&#125;function vt(t)&#123;for(var e&#x3D;0;0!&#x3D;t;)t&amp;&#x3D;t-1,++e;return e&#125;function bt()&#123;for(var t&#x3D;0,e&#x3D;this.s&amp;this.DM,i&#x3D;0;i&lt;this.t;++i)t+&#x3D;vt(this[i]^e);return t&#125;function Tt(t)&#123;var e&#x3D;Math.floor(t&#x2F;this.DB);return e&gt;&#x3D;this.t?0!&#x3D;this.s:0!&#x3D;(this[e]&amp;1&lt;&lt;t%this.DB)&#125;function St(t,i)&#123;var r&#x3D;e.ONE.shiftLeft(t);return this.bitwiseTo(r,i,r),r&#125;function Rt(t)&#123;return this.changeBit(t,ht)&#125;function Et(t)&#123;return this.changeBit(t,ft)&#125;function Dt(t)&#123;return this.changeBit(t,ut)&#125;function wt(t,e)&#123;for(var i&#x3D;0,r&#x3D;0,s&#x3D;Math.min(t.t,this.t);s&gt;i;)r+&#x3D;this[i]+t[i],e[i++]&#x3D;r&amp;this.DM,r&gt;&gt;&#x3D;this.DB;if(t.t&lt;this.t)&#123;for(r+&#x3D;t.s;i&lt;this.t;)r+&#x3D;this[i],e[i++]&#x3D;r&amp;this.DM,r&gt;&gt;&#x3D;this.DB;r+&#x3D;this.s&#125;else&#123;for(r+&#x3D;this.s;i&lt;t.t;)r+&#x3D;t[i],e[i++]&#x3D;r&amp;this.DM,r&gt;&gt;&#x3D;this.DB;r+&#x3D;t.s&#125;e.s&#x3D;0&gt;r?-1:0,r&gt;0?e[i++]&#x3D;r:-1&gt;r&amp;&amp;(e[i++]&#x3D;this.DV+r),e.t&#x3D;i,e.clamp()&#125;function xt(t)&#123;var e&#x3D;i();return this.addTo(t,e),e&#125;function Bt(t)&#123;var e&#x3D;i();return this.subTo(t,e),e&#125;function Kt(t)&#123;var e&#x3D;i();return this.multiplyTo(t,e),e&#125;function At()&#123;var t&#x3D;i();return this.squareTo(t),t&#125;function Ut(t)&#123;var e&#x3D;i();return this.divRemTo(t,e,null),e&#125;function Ot(t)&#123;var e&#x3D;i();return this.divRemTo(t,null,e),e&#125;function Vt(t)&#123;var e&#x3D;i(),r&#x3D;i();return this.divRemTo(t,e,r),new Array(e,r)&#125;function Nt(t)&#123;this[this.t]&#x3D;this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()&#125;function Jt(t,e)&#123;if(0!&#x3D;t)&#123;for(;this.t&lt;&#x3D;e;)this[this.t++]&#x3D;0;for(this[e]+&#x3D;t;this[e]&gt;&#x3D;this.DV;)this[e]-&#x3D;this.DV,++e&gt;&#x3D;this.t&amp;&amp;(this[this.t++]&#x3D;0),++this[e]&#125;&#125;function It()&#123;&#125;function Pt(t)&#123;return t&#125;function Mt(t,e,i)&#123;t.multiplyTo(e,i)&#125;function Lt(t,e)&#123;t.squareTo(e)&#125;function qt(t)&#123;return this.exp(t,new It)&#125;function Ct(t,e,i)&#123;var r&#x3D;Math.min(this.t+t.t,e);for(i.s&#x3D;0,i.t&#x3D;r;r&gt;0;)i[--r]&#x3D;0;var s;for(s&#x3D;i.t-this.t;s&gt;r;++r)i[r+this.t]&#x3D;this.am(0,t[r],i,r,0,this.t);for(s&#x3D;Math.min(t.t,e);s&gt;r;++r)this.am(0,t[r],i,r,0,e-r);i.clamp()&#125;function Ht(t,e,i)&#123;--e;var r&#x3D;i.t&#x3D;this.t+t.t-e;for(i.s&#x3D;0;--r&gt;&#x3D;0;)i[r]&#x3D;0;for(r&#x3D;Math.max(e-this.t,0);r&lt;t.t;++r)i[this.t+r-e]&#x3D;this.am(e-r,t[r],i,0,0,this.t+r-e);i.clamp(),i.drShiftTo(1,i)&#125;function jt(t)&#123;this.r2&#x3D;i(),this.q3&#x3D;i(),e.ONE.dlShiftTo(2*t.t,this.r2),this.mu&#x3D;this.r2.divide(t),this.m&#x3D;t&#125;function kt(t)&#123;if(t.s&lt;0||t.t&gt;2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)&lt;0)return t;var e&#x3D;i();return t.copyTo(e),this.reduce(e),e&#125;function Ft(t)&#123;return t&#125;function _t(t)&#123;for(t.drShiftTo(this.m.t-1,this.r2),t.t&gt;this.m.t+1&amp;&amp;(t.t&#x3D;this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)&lt;0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)&gt;&#x3D;0;)t.subTo(this.m,t)&#125;function zt(t,e)&#123;t.squareTo(e),this.reduce(e)&#125;function Zt(t,e,i)&#123;t.multiplyTo(e,i),this.reduce(i)&#125;function Gt(t,e)&#123;var r,s,n&#x3D;t.bitLength(),o&#x3D;c(1);if(0&gt;&#x3D;n)return o;r&#x3D;18&gt;n?1:48&gt;n?3:144&gt;n?4:768&gt;n?5:6,s&#x3D;8&gt;n?new A(e):e.isEven()?new jt(e):new P(e);var h&#x3D;new Array,a&#x3D;3,u&#x3D;r-1,f&#x3D;(1&lt;&lt;r)-1;if(h[1]&#x3D;s.convert(this),r&gt;1)&#123;var p&#x3D;i();for(s.sqrTo(h[1],p);f&gt;&#x3D;a;)h[a]&#x3D;i(),s.mulTo(p,h[a-2],h[a]),a+&#x3D;2&#125;var l,d,g&#x3D;t.t-1,m&#x3D;!0,v&#x3D;i();for(n&#x3D;y(t[g])-1;g&gt;&#x3D;0;)&#123;for(n&gt;&#x3D;u?l&#x3D;t[g]&gt;&gt;n-u&amp;f:(l&#x3D;(t[g]&amp;(1&lt;&lt;n+1)-1)&lt;&lt;u-n,g&gt;0&amp;&amp;(l|&#x3D;t[g-1]&gt;&gt;this.DB+n-u)),a&#x3D;r;0&#x3D;&#x3D;(1&amp;l);)l&gt;&gt;&#x3D;1,--a;if((n-&#x3D;a)&lt;0&amp;&amp;(n+&#x3D;this.DB,--g),m)h[l].copyTo(o),m&#x3D;!1;else&#123;for(;a&gt;1;)s.sqrTo(o,v),s.sqrTo(v,o),a-&#x3D;2;a&gt;0?s.sqrTo(o,v):(d&#x3D;o,o&#x3D;v,v&#x3D;d),s.mulTo(v,h[l],o)&#125;for(;g&gt;&#x3D;0&amp;&amp;0&#x3D;&#x3D;(t[g]&amp;1&lt;&lt;n);)s.sqrTo(o,v),d&#x3D;o,o&#x3D;v,v&#x3D;d,--n&lt;0&amp;&amp;(n&#x3D;this.DB-1,--g)&#125;return s.revert(o)&#125;function $t(t)&#123;var e&#x3D;this.s&lt;0?this.negate():this.clone(),i&#x3D;t.s&lt;0?t.negate():t.clone();if(e.compareTo(i)&lt;0)&#123;var r&#x3D;e;e&#x3D;i,i&#x3D;r&#125;var s&#x3D;e.getLowestSetBit(),n&#x3D;i.getLowestSetBit();if(0&gt;n)return e;for(n&gt;s&amp;&amp;(n&#x3D;s),n&gt;0&amp;&amp;(e.rShiftTo(n,e),i.rShiftTo(n,i));e.signum()&gt;0;)(s&#x3D;e.getLowestSetBit())&gt;0&amp;&amp;e.rShiftTo(s,e),(s&#x3D;i.getLowestSetBit())&gt;0&amp;&amp;i.rShiftTo(s,i),e.compareTo(i)&gt;&#x3D;0?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return n&gt;0&amp;&amp;i.lShiftTo(n,i),i&#125;function Yt(t)&#123;if(0&gt;&#x3D;t)return 0;var e&#x3D;this.DV%t,i&#x3D;this.s&lt;0?t-1:0;if(this.t&gt;0)if(0&#x3D;&#x3D;e)i&#x3D;this[0]%t;else for(var r&#x3D;this.t-1;r&gt;&#x3D;0;--r)i&#x3D;(e*i+this[r])%t;return i&#125;function Wt(t)&#123;var i&#x3D;t.isEven();if(this.isEven()&amp;&amp;i||0&#x3D;&#x3D;t.signum())return e.ZERO;for(var r&#x3D;t.clone(),s&#x3D;this.clone(),n&#x3D;c(1),o&#x3D;c(0),h&#x3D;c(0),a&#x3D;c(1);0!&#x3D;r.signum();)&#123;for(;r.isEven();)r.rShiftTo(1,r),i?(n.isEven()&amp;&amp;o.isEven()||(n.addTo(this,n),o.subTo(t,o)),n.rShiftTo(1,n)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;s.isEven();)s.rShiftTo(1,s),i?(h.isEven()&amp;&amp;a.isEven()||(h.addTo(this,h),a.subTo(t,a)),h.rShiftTo(1,h)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);r.compareTo(s)&gt;&#x3D;0?(r.subTo(s,r),i&amp;&amp;n.subTo(h,n),o.subTo(a,o)):(s.subTo(r,s),i&amp;&amp;h.subTo(n,h),a.subTo(o,a))&#125;return 0!&#x3D;s.compareTo(e.ONE)?e.ZERO:a.compareTo(t)&gt;&#x3D;0?a.subtract(t):a.signum()&lt;0?(a.addTo(t,a),a.signum()&lt;0?a.add(t):a):a&#125;function Qt(t)&#123;var e,i&#x3D;this.abs();if(1&#x3D;&#x3D;i.t&amp;&amp;i[0]&lt;&#x3D;Ae[Ae.length-1])&#123;for(e&#x3D;0;e&lt;Ae.length;++e)if(i[0]&#x3D;&#x3D;Ae[e])return!0;return!1&#125;if(i.isEven())return!1;for(e&#x3D;1;e&lt;Ae.length;)&#123;for(var r&#x3D;Ae[e],s&#x3D;e+1;s&lt;Ae.length&amp;&amp;Ue&gt;r;)r*&#x3D;Ae[s++];for(r&#x3D;i.modInt(r);s&gt;e;)if(r%Ae[e++]&#x3D;&#x3D;0)return!1&#125;return i.millerRabin(t)&#125;function Xt(t)&#123;var r&#x3D;this.subtract(e.ONE),s&#x3D;r.getLowestSetBit();if(0&gt;&#x3D;s)return!1;var n&#x3D;r.shiftRight(s);t&#x3D;t+1&gt;&gt;1,t&gt;Ae.length&amp;&amp;(t&#x3D;Ae.length);for(var o&#x3D;i(),h&#x3D;0;t&gt;h;++h)&#123;o.fromInt(Ae[Math.floor(Math.random()*Ae.length)]);var a&#x3D;o.modPow(n,this);if(0!&#x3D;a.compareTo(e.ONE)&amp;&amp;0!&#x3D;a.compareTo(r))&#123;for(var u&#x3D;1;u++&lt;s&amp;&amp;0!&#x3D;a.compareTo(r);)if(a&#x3D;a.modPowInt(2,this),0&#x3D;&#x3D;a.compareTo(e.ONE))return!1;if(0!&#x3D;a.compareTo(r))return!1&#125;&#125;return!0&#125;function te()&#123;this.i&#x3D;0,this.j&#x3D;0,this.S&#x3D;new Array&#125;function ee(t)&#123;var e,i,r;for(e&#x3D;0;256&gt;e;++e)this.S[e]&#x3D;e;for(i&#x3D;0,e&#x3D;0;256&gt;e;++e)i&#x3D;i+this.S[e]+t[e%t.length]&amp;255,r&#x3D;this.S[e],this.S[e]&#x3D;this.S[i],this.S[i]&#x3D;r;this.i&#x3D;0,this.j&#x3D;0&#125;function ie()&#123;var t;return this.i&#x3D;this.i+1&amp;255,this.j&#x3D;this.j+this.S[this.i]&amp;255,t&#x3D;this.S[this.i],this.S[this.i]&#x3D;this.S[this.j],this.S[this.j]&#x3D;t,this.S[t+this.S[this.i]&amp;255]&#125;function re()&#123;return new te&#125;function se()&#123;if(null&#x3D;&#x3D;Oe)&#123;for(Oe&#x3D;re();Je&gt;Ne;)&#123;var t&#x3D;Math.floor(65536*Math.random());Ve[Ne++]&#x3D;255&amp;t&#125;for(Oe.init(Ve),Ne&#x3D;0;Ne&lt;Ve.length;++Ne)Ve[Ne]&#x3D;0;Ne&#x3D;0&#125;return Oe.next()&#125;function ne(t)&#123;var e;for(e&#x3D;0;e&lt;t.length;++e)t[e]&#x3D;se()&#125;function oe()&#123;&#125;function he(t,i)&#123;return new e(t,i)&#125;function ae(t,i)&#123;if(i&lt;t.length+11)return console.error(&quot;Message too long for RSA&quot;),null;for(var r&#x3D;new Array,s&#x3D;t.length-1;s&gt;&#x3D;0&amp;&amp;i&gt;0;)&#123;var n&#x3D;t.charCodeAt(s--);128&gt;n?r[--i]&#x3D;n:n&gt;127&amp;&amp;2048&gt;n?(r[--i]&#x3D;63&amp;n|128,r[--i]&#x3D;n&gt;&gt;6|192):(r[--i]&#x3D;63&amp;n|128,r[--i]&#x3D;n&gt;&gt;6&amp;63|128,r[--i]&#x3D;n&gt;&gt;12|224)&#125;r[--i]&#x3D;0;for(var o&#x3D;new oe,h&#x3D;new Array;i&gt;2;)&#123;for(h[0]&#x3D;0;0&#x3D;&#x3D;h[0];)o.nextBytes(h);r[--i]&#x3D;h[0]&#125;return r[--i]&#x3D;2,r[--i]&#x3D;0,new e(r)&#125;function ue()&#123;this.n&#x3D;null,this.e&#x3D;0,this.d&#x3D;null,this.p&#x3D;null,this.q&#x3D;null,this.dmp1&#x3D;null,this.dmq1&#x3D;null,this.coeff&#x3D;null&#125;function ce(t,e)&#123;null!&#x3D;t&amp;&amp;null!&#x3D;e&amp;&amp;t.length&gt;0&amp;&amp;e.length&gt;0?(this.n&#x3D;he(t,16),this.e&#x3D;parseInt(e,16)):console.error(&quot;Invalid RSA public key&quot;)&#125;function fe(t)&#123;return t.modPowInt(this.e,this.n)&#125;function pe(t)&#123;var e&#x3D;ae(t,this.n.bitLength()+7&gt;&gt;3);if(null&#x3D;&#x3D;e)return null;var i&#x3D;this.doPublic(e);if(null&#x3D;&#x3D;i)return null;var r&#x3D;i.toString(16);return 0&#x3D;&#x3D;(1&amp;r.length)?r:&quot;0&quot;+r&#125;function le(t,e)&#123;for(var i&#x3D;t.toByteArray(),r&#x3D;0;r&lt;i.length&amp;&amp;0&#x3D;&#x3D;i[r];)++r;if(i.length-r!&#x3D;e-1||2!&#x3D;i[r])return null;for(++r;0!&#x3D;i[r];)if(++r&gt;&#x3D;i.length)return null;for(var s&#x3D;&quot;&quot;;++r&lt;i.length;)&#123;var n&#x3D;255&amp;i[r];128&gt;n?s+&#x3D;String.fromCharCode(n):n&gt;191&amp;&amp;224&gt;n?(s+&#x3D;String.fromCharCode((31&amp;n)&lt;&lt;6|63&amp;i[r+1]),++r):(s+&#x3D;String.fromCharCode((15&amp;n)&lt;&lt;12|(63&amp;i[r+1])&lt;&lt;6|63&amp;i[r+2]),r+&#x3D;2)&#125;return s&#125;function de(t,e,i)&#123;null!&#x3D;t&amp;&amp;null!&#x3D;e&amp;&amp;t.length&gt;0&amp;&amp;e.length&gt;0?(this.n&#x3D;he(t,16),this.e&#x3D;parseInt(e,16),this.d&#x3D;he(i,16)):console.error(&quot;Invalid RSA private key&quot;)&#125;function ge(t,e,i,r,s,n,o,h)&#123;null!&#x3D;t&amp;&amp;null!&#x3D;e&amp;&amp;t.length&gt;0&amp;&amp;e.length&gt;0?(this.n&#x3D;he(t,16),this.e&#x3D;parseInt(e,16),this.d&#x3D;he(i,16),this.p&#x3D;he(r,16),this.q&#x3D;he(s,16),this.dmp1&#x3D;he(n,16),this.dmq1&#x3D;he(o,16),this.coeff&#x3D;he(h,16)):console.error(&quot;Invalid RSA private key&quot;)&#125;function me(t,i)&#123;var r&#x3D;new oe,s&#x3D;t&gt;&gt;1;this.e&#x3D;parseInt(i,16);for(var n&#x3D;new e(i,16);;)&#123;for(;this.p&#x3D;new e(t-s,1,r),0!&#x3D;this.p.subtract(e.ONE).gcd(n).compareTo(e.ONE)||!this.p.isProbablePrime(10););for(;this.q&#x3D;new e(s,1,r),0!&#x3D;this.q.subtract(e.ONE).gcd(n).compareTo(e.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)&lt;&#x3D;0)&#123;var o&#x3D;this.p;this.p&#x3D;this.q,this.q&#x3D;o&#125;var h&#x3D;this.p.subtract(e.ONE),a&#x3D;this.q.subtract(e.ONE),u&#x3D;h.multiply(a);if(0&#x3D;&#x3D;u.gcd(n).compareTo(e.ONE))&#123;this.n&#x3D;this.p.multiply(this.q),this.d&#x3D;n.modInverse(u),this.dmp1&#x3D;this.d.mod(h),this.dmq1&#x3D;this.d.mod(a),this.coeff&#x3D;this.q.modInverse(this.p);break&#125;&#125;&#125;function ye(t)&#123;if(null&#x3D;&#x3D;this.p||null&#x3D;&#x3D;this.q)return t.modPow(this.d,this.n);for(var e&#x3D;t.mod(this.p).modPow(this.dmp1,this.p),i&#x3D;t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)&lt;0;)e&#x3D;e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)&#125;function ve(t)&#123;var e&#x3D;he(t,16),i&#x3D;this.doPrivate(e);return null&#x3D;&#x3D;i?null:le(i,this.n.bitLength()+7&gt;&gt;3)&#125;function be(t)&#123;var e,i,r&#x3D;&quot;&quot;;for(e&#x3D;0;e+3&lt;&#x3D;t.length;e+&#x3D;3)i&#x3D;parseInt(t.substring(e,e+3),16),r+&#x3D;Le.charAt(i&gt;&gt;6)+Le.charAt(63&amp;i);for(e+1&#x3D;&#x3D;t.length?(i&#x3D;parseInt(t.substring(e,e+1),16),r+&#x3D;Le.charAt(i&lt;&lt;2)):e+2&#x3D;&#x3D;t.length&amp;&amp;(i&#x3D;parseInt(t.substring(e,e+2),16),r+&#x3D;Le.charAt(i&gt;&gt;2)+Le.charAt((3&amp;i)&lt;&lt;4));(3&amp;r.length)&gt;0;)r+&#x3D;qe;return r&#125;function Te(t)&#123;var e,i,r&#x3D;&quot;&quot;,s&#x3D;0;for(e&#x3D;0;e&lt;t.length&amp;&amp;t.charAt(e)!&#x3D;qe;++e)v&#x3D;Le.indexOf(t.charAt(e)),v&lt;0||(0&#x3D;&#x3D;s?(r+&#x3D;o(v&gt;&gt;2),i&#x3D;3&amp;v,s&#x3D;1):1&#x3D;&#x3D;s?(r+&#x3D;o(i&lt;&lt;2|v&gt;&gt;4),i&#x3D;15&amp;v,s&#x3D;2):2&#x3D;&#x3D;s?(r+&#x3D;o(i),r+&#x3D;o(v&gt;&gt;2),i&#x3D;3&amp;v,s&#x3D;3):(r+&#x3D;o(i&lt;&lt;2|v&gt;&gt;4),r+&#x3D;o(15&amp;v),s&#x3D;0));return 1&#x3D;&#x3D;s&amp;&amp;(r+&#x3D;o(i&lt;&lt;2)),r&#125;</span><br><span class="line">&#x2F;&#x2F; Copyright (c) 2005  Tom Wu</span><br><span class="line">&#x2F;&#x2F; All Rights Reserved.</span><br><span class="line">&#x2F;&#x2F; See &quot;LICENSE&quot; for details.</span><br><span class="line">var Se,Re&#x3D;0xdeadbeefcafe,Ee&#x3D;15715070&#x3D;&#x3D;(16777215&amp;Re);Ee&amp;&amp;&quot;Microsoft Internet Explorer&quot;&#x3D;&#x3D;navigator.appName?(e.prototype.am&#x3D;s,Se&#x3D;30):Ee&amp;&amp;&quot;Netscape&quot;!&#x3D;navigator.appName?(e.prototype.am&#x3D;r,Se&#x3D;26):(e.prototype.am&#x3D;n,Se&#x3D;28),e.prototype.DB&#x3D;Se,e.prototype.DM&#x3D;(1&lt;&lt;Se)-1,e.prototype.DV&#x3D;1&lt;&lt;Se;var De&#x3D;52;e.prototype.FV&#x3D;Math.pow(2,De),e.prototype.F1&#x3D;De-Se,e.prototype.F2&#x3D;2*Se-De;var we,xe,Be&#x3D;&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;,Ke&#x3D;new Array;for(we&#x3D;&quot;0&quot;.charCodeAt(0),xe&#x3D;0;9&gt;&#x3D;xe;++xe)Ke[we++]&#x3D;xe;for(we&#x3D;&quot;a&quot;.charCodeAt(0),xe&#x3D;10;36&gt;xe;++xe)Ke[we++]&#x3D;xe;for(we&#x3D;&quot;A&quot;.charCodeAt(0),xe&#x3D;10;36&gt;xe;++xe)Ke[we++]&#x3D;xe;A.prototype.convert&#x3D;U,A.prototype.revert&#x3D;O,A.prototype.reduce&#x3D;V,A.prototype.mulTo&#x3D;N,A.prototype.sqrTo&#x3D;J,P.prototype.convert&#x3D;M,P.prototype.revert&#x3D;L,P.prototype.reduce&#x3D;q,P.prototype.mulTo&#x3D;H,P.prototype.sqrTo&#x3D;C,e.prototype.copyTo&#x3D;a,e.prototype.fromInt&#x3D;u,e.prototype.fromString&#x3D;f,e.prototype.clamp&#x3D;p,e.prototype.dlShiftTo&#x3D;T,e.prototype.drShiftTo&#x3D;S,e.prototype.lShiftTo&#x3D;R,e.prototype.rShiftTo&#x3D;E,e.prototype.subTo&#x3D;D,e.prototype.multiplyTo&#x3D;w,e.prototype.squareTo&#x3D;x,e.prototype.divRemTo&#x3D;B,e.prototype.invDigit&#x3D;I,e.prototype.isEven&#x3D;j,e.prototype.exp&#x3D;k,e.prototype.toString&#x3D;l,e.prototype.negate&#x3D;d,e.prototype.abs&#x3D;g,e.prototype.compareTo&#x3D;m,e.prototype.bitLength&#x3D;b,e.prototype.mod&#x3D;K,e.prototype.modPowInt&#x3D;F,e.ZERO&#x3D;c(0),e.ONE&#x3D;c(1),It.prototype.convert&#x3D;Pt,It.prototype.revert&#x3D;Pt,It.prototype.mulTo&#x3D;Mt,It.prototype.sqrTo&#x3D;Lt,jt.prototype.convert&#x3D;kt,jt.prototype.revert&#x3D;Ft,jt.prototype.reduce&#x3D;_t,jt.prototype.mulTo&#x3D;Zt,jt.prototype.sqrTo&#x3D;zt;var Ae&#x3D;[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],Ue&#x3D;(1&lt;&lt;26)&#x2F;Ae[Ae.length-1];e.prototype.chunkSize&#x3D;$,e.prototype.toRadix&#x3D;W,e.prototype.fromRadix&#x3D;Q,e.prototype.fromNumber&#x3D;X,e.prototype.bitwiseTo&#x3D;st,e.prototype.changeBit&#x3D;St,e.prototype.addTo&#x3D;wt,e.prototype.dMultiply&#x3D;Nt,e.prototype.dAddOffset&#x3D;Jt,e.prototype.multiplyLowerTo&#x3D;Ct,e.prototype.multiplyUpperTo&#x3D;Ht,e.prototype.modInt&#x3D;Yt,e.prototype.millerRabin&#x3D;Xt,e.prototype.clone&#x3D;_,e.prototype.intValue&#x3D;z,e.prototype.byteValue&#x3D;Z,e.prototype.shortValue&#x3D;G,e.prototype.signum&#x3D;Y,e.prototype.toByteArray&#x3D;tt,e.prototype.equals&#x3D;et,e.prototype.min&#x3D;it,e.prototype.max&#x3D;rt,e.prototype.and&#x3D;ot,e.prototype.or&#x3D;at,e.prototype.xor&#x3D;ct,e.prototype.andNot&#x3D;pt,e.prototype.not&#x3D;lt,e.prototype.shiftLeft&#x3D;dt,e.prototype.shiftRight&#x3D;gt,e.prototype.getLowestSetBit&#x3D;yt,e.prototype.bitCount&#x3D;bt,e.prototype.testBit&#x3D;Tt,e.prototype.setBit&#x3D;Rt,e.prototype.clearBit&#x3D;Et,e.prototype.flipBit&#x3D;Dt,e.prototype.add&#x3D;xt,e.prototype.subtract&#x3D;Bt,e.prototype.multiply&#x3D;Kt,e.prototype.divide&#x3D;Ut,e.prototype.remainder&#x3D;Ot,e.prototype.divideAndRemainder&#x3D;Vt,e.prototype.modPow&#x3D;Gt,e.prototype.modInverse&#x3D;Wt,e.prototype.pow&#x3D;qt,e.prototype.gcd&#x3D;$t,e.prototype.isProbablePrime&#x3D;Qt,e.prototype.square&#x3D;At,te.prototype.init&#x3D;ee,te.prototype.next&#x3D;ie;var Oe,Ve,Ne,Je&#x3D;256;if(null&#x3D;&#x3D;Ve)&#123;Ve&#x3D;new Array,Ne&#x3D;0;var Ie;if(window.crypto&amp;&amp;window.crypto.getRandomValues)&#123;var Pe&#x3D;new Uint32Array(256);for(window.crypto.getRandomValues(Pe),Ie&#x3D;0;Ie&lt;Pe.length;++Ie)Ve[Ne++]&#x3D;255&amp;Pe[Ie]&#125;var Me&#x3D;function(t)&#123;if(this.count&#x3D;this.count||0,this.count&gt;&#x3D;256||Ne&gt;&#x3D;Je)return void(window.removeEventListener?window.removeEventListener(&quot;mousemove&quot;,Me,!1):window.detachEvent&amp;&amp;window.detachEvent(&quot;onmousemove&quot;,Me));try&#123;var e&#x3D;t.x+t.y;Ve[Ne++]&#x3D;255&amp;e,this.count+&#x3D;1&#125;catch(i)&#123;&#125;&#125;;window.addEventListener?window.addEventListener(&quot;mousemove&quot;,Me,!1):window.attachEvent&amp;&amp;window.attachEvent(&quot;onmousemove&quot;,Me)&#125;oe.prototype.nextBytes&#x3D;ne,ue.prototype.doPublic&#x3D;fe,ue.prototype.setPublic&#x3D;ce,ue.prototype.encrypt&#x3D;pe,ue.prototype.doPrivate&#x3D;ye,ue.prototype.setPrivate&#x3D;de,ue.prototype.setPrivateEx&#x3D;ge,ue.prototype.generate&#x3D;me,ue.prototype.decrypt&#x3D;ve,</span><br><span class="line">&#x2F;&#x2F; Copyright (c) 2011  Kevin M Burns Jr.</span><br><span class="line">&#x2F;&#x2F; All Rights Reserved.</span><br><span class="line">&#x2F;&#x2F; See &quot;LICENSE&quot; for details.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Extension to jsbn which adds facilities for asynchronous RSA key generation</span><br><span class="line">&#x2F;&#x2F; Primarily created to avoid execution timeout on mobile devices</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;www-cs-students.stanford.edu&#x2F;~tjw&#x2F;jsbn&#x2F;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; ---</span><br><span class="line">function()&#123;var t&#x3D;function(t,r,s)&#123;var n&#x3D;new oe,o&#x3D;t&gt;&gt;1;this.e&#x3D;parseInt(r,16);var h&#x3D;new e(r,16),a&#x3D;this,u&#x3D;function()&#123;var r&#x3D;function()&#123;if(a.p.compareTo(a.q)&lt;&#x3D;0)&#123;var t&#x3D;a.p;a.p&#x3D;a.q,a.q&#x3D;t&#125;var i&#x3D;a.p.subtract(e.ONE),r&#x3D;a.q.subtract(e.ONE),n&#x3D;i.multiply(r);0&#x3D;&#x3D;n.gcd(h).compareTo(e.ONE)?(a.n&#x3D;a.p.multiply(a.q),a.d&#x3D;h.modInverse(n),a.dmp1&#x3D;a.d.mod(i),a.dmq1&#x3D;a.d.mod(r),a.coeff&#x3D;a.q.modInverse(a.p),setTimeout(function()&#123;s()&#125;,0)):setTimeout(u,0)&#125;,c&#x3D;function()&#123;a.q&#x3D;i(),a.q.fromNumberAsync(o,1,n,function()&#123;a.q.subtract(e.ONE).gcda(h,function(t)&#123;0&#x3D;&#x3D;t.compareTo(e.ONE)&amp;&amp;a.q.isProbablePrime(10)?setTimeout(r,0):setTimeout(c,0)&#125;)&#125;)&#125;,f&#x3D;function()&#123;a.p&#x3D;i(),a.p.fromNumberAsync(t-o,1,n,function()&#123;a.p.subtract(e.ONE).gcda(h,function(t)&#123;0&#x3D;&#x3D;t.compareTo(e.ONE)&amp;&amp;a.p.isProbablePrime(10)?setTimeout(c,0):setTimeout(f,0)&#125;)&#125;)&#125;;setTimeout(f,0)&#125;;setTimeout(u,0)&#125;;ue.prototype.generateAsync&#x3D;t;var r&#x3D;function(t,e)&#123;var i&#x3D;this.s&lt;0?this.negate():this.clone(),r&#x3D;t.s&lt;0?t.negate():t.clone();if(i.compareTo(r)&lt;0)&#123;var s&#x3D;i;i&#x3D;r,r&#x3D;s&#125;var n&#x3D;i.getLowestSetBit(),o&#x3D;r.getLowestSetBit();if(0&gt;o)return void e(i);o&gt;n&amp;&amp;(o&#x3D;n),o&gt;0&amp;&amp;(i.rShiftTo(o,i),r.rShiftTo(o,r));var h&#x3D;function()&#123;(n&#x3D;i.getLowestSetBit())&gt;0&amp;&amp;i.rShiftTo(n,i),(n&#x3D;r.getLowestSetBit())&gt;0&amp;&amp;r.rShiftTo(n,r),i.compareTo(r)&gt;&#x3D;0?(i.subTo(r,i),i.rShiftTo(1,i)):(r.subTo(i,r),r.rShiftTo(1,r)),i.signum()&gt;0?setTimeout(h,0):(o&gt;0&amp;&amp;r.lShiftTo(o,r),setTimeout(function()&#123;e(r)&#125;,0))&#125;;setTimeout(h,10)&#125;;e.prototype.gcda&#x3D;r;var s&#x3D;function(t,i,r,s)&#123;if(&quot;number&quot;&#x3D;&#x3D;typeof i)if(2&gt;t)this.fromInt(1);else&#123;this.fromNumber(t,r),this.testBit(t-1)||this.bitwiseTo(e.ONE.shiftLeft(t-1),ht,this),this.isEven()&amp;&amp;this.dAddOffset(1,0);var n&#x3D;this,o&#x3D;function()&#123;n.dAddOffset(2,0),n.bitLength()&gt;t&amp;&amp;n.subTo(e.ONE.shiftLeft(t-1),n),n.isProbablePrime(i)?setTimeout(function()&#123;s()&#125;,0):setTimeout(o,0)&#125;;setTimeout(o,0)&#125;else&#123;var h&#x3D;new Array,a&#x3D;7&amp;t;h.length&#x3D;(t&gt;&gt;3)+1,i.nextBytes(h),a&gt;0?h[0]&amp;&#x3D;(1&lt;&lt;a)-1:h[0]&#x3D;0,this.fromString(h,256)&#125;&#125;;e.prototype.fromNumberAsync&#x3D;s&#125;();var Le&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;,qe&#x3D;&quot;&#x3D;&quot;,Ce&#x3D;Ce||&#123;&#125;;Ce.env&#x3D;Ce.env||&#123;&#125;;var He&#x3D;Ce,je&#x3D;Object.prototype,ke&#x3D;&quot;[object Function]&quot;,Fe&#x3D;[&quot;toString&quot;,&quot;valueOf&quot;];Ce.env.parseUA&#x3D;function(t)&#123;var e,i&#x3D;function(t)&#123;var e&#x3D;0;return parseFloat(t.replace(&#x2F;\.&#x2F;g,function()&#123;return 1&#x3D;&#x3D;e++?&quot;&quot;:&quot;.&quot;&#125;))&#125;,r&#x3D;navigator,s&#x3D;&#123;ie:0,opera:0,gecko:0,webkit:0,chrome:0,mobile:null,air:0,ipad:0,iphone:0,ipod:0,ios:null,android:0,webos:0,caja:r&amp;&amp;r.cajaVersion,secure:!1,os:null&#125;,n&#x3D;t||navigator&amp;&amp;navigator.userAgent,o&#x3D;window&amp;&amp;window.location,h&#x3D;o&amp;&amp;o.href;return s.secure&#x3D;h&amp;&amp;0&#x3D;&#x3D;&#x3D;h.toLowerCase().indexOf(&quot;https&quot;),n&amp;&amp;(&#x2F;windows|win32&#x2F;i.test(n)?s.os&#x3D;&quot;windows&quot;:&#x2F;macintosh&#x2F;i.test(n)?s.os&#x3D;&quot;macintosh&quot;:&#x2F;rhino&#x2F;i.test(n)&amp;&amp;(s.os&#x3D;&quot;rhino&quot;),&#x2F;KHTML&#x2F;.test(n)&amp;&amp;(s.webkit&#x3D;1),e&#x3D;n.match(&#x2F;AppleWebKit\&#x2F;([^\s]*)&#x2F;),e&amp;&amp;e[1]&amp;&amp;(s.webkit&#x3D;i(e[1]),&#x2F; Mobile\&#x2F;&#x2F;.test(n)?(s.mobile&#x3D;&quot;Apple&quot;,e&#x3D;n.match(&#x2F;OS ([^\s]*)&#x2F;),e&amp;&amp;e[1]&amp;&amp;(e&#x3D;i(e[1].replace(&quot;_&quot;,&quot;.&quot;))),s.ios&#x3D;e,s.ipad&#x3D;s.ipod&#x3D;s.iphone&#x3D;0,e&#x3D;n.match(&#x2F;iPad|iPod|iPhone&#x2F;),e&amp;&amp;e[0]&amp;&amp;(s[e[0].toLowerCase()]&#x3D;s.ios)):(e&#x3D;n.match(&#x2F;NokiaN[^\&#x2F;]*|Android \d\.\d|webOS\&#x2F;\d\.\d&#x2F;),e&amp;&amp;(s.mobile&#x3D;e[0]),&#x2F;webOS&#x2F;.test(n)&amp;&amp;(s.mobile&#x3D;&quot;WebOS&quot;,e&#x3D;n.match(&#x2F;webOS\&#x2F;([^\s]*);&#x2F;),e&amp;&amp;e[1]&amp;&amp;(s.webos&#x3D;i(e[1]))),&#x2F; Android&#x2F;.test(n)&amp;&amp;(s.mobile&#x3D;&quot;Android&quot;,e&#x3D;n.match(&#x2F;Android ([^\s]*);&#x2F;),e&amp;&amp;e[1]&amp;&amp;(s.android&#x3D;i(e[1])))),e&#x3D;n.match(&#x2F;Chrome\&#x2F;([^\s]*)&#x2F;),e&amp;&amp;e[1]?s.chrome&#x3D;i(e[1]):(e&#x3D;n.match(&#x2F;AdobeAIR\&#x2F;([^\s]*)&#x2F;),e&amp;&amp;(s.air&#x3D;e[0]))),s.webkit||(e&#x3D;n.match(&#x2F;Opera[\s\&#x2F;]([^\s]*)&#x2F;),e&amp;&amp;e[1]?(s.opera&#x3D;i(e[1]),e&#x3D;n.match(&#x2F;Version\&#x2F;([^\s]*)&#x2F;),e&amp;&amp;e[1]&amp;&amp;(s.opera&#x3D;i(e[1])),e&#x3D;n.match(&#x2F;Opera Mini[^;]*&#x2F;),e&amp;&amp;(s.mobile&#x3D;e[0])):(e&#x3D;n.match(&#x2F;MSIE\s([^;]*)&#x2F;),e&amp;&amp;e[1]?s.ie&#x3D;i(e[1]):(e&#x3D;n.match(&#x2F;Gecko\&#x2F;([^\s]*)&#x2F;),e&amp;&amp;(s.gecko&#x3D;1,e&#x3D;n.match(&#x2F;rv:([^\s\)]*)&#x2F;),e&amp;&amp;e[1]&amp;&amp;(s.gecko&#x3D;i(e[1]))))))),s&#125;,Ce.env.ua&#x3D;Ce.env.parseUA(),Ce.isFunction&#x3D;function(t)&#123;return&quot;function&quot;&#x3D;&#x3D;typeof t||je.toString.apply(t)&#x3D;&#x3D;&#x3D;ke&#125;,Ce._IEEnumFix&#x3D;Ce.env.ua.ie?function(t,e)&#123;var i,r,s;for(i&#x3D;0;i&lt;Fe.length;i+&#x3D;1)r&#x3D;Fe[i],s&#x3D;e[r],He.isFunction(s)&amp;&amp;s!&#x3D;je[r]&amp;&amp;(t[r]&#x3D;s)&#125;:function()&#123;&#125;,Ce.extend&#x3D;function(t,e,i)&#123;if(!e||!t)throw new Error(&quot;extend failed, please check that all dependencies are included.&quot;);var r,s&#x3D;function()&#123;&#125;;if(s.prototype&#x3D;e.prototype,t.prototype&#x3D;new s,t.prototype.constructor&#x3D;t,t.superclass&#x3D;e.prototype,e.prototype.constructor&#x3D;&#x3D;je.constructor&amp;&amp;(e.prototype.constructor&#x3D;e),i)&#123;for(r in i)He.hasOwnProperty(i,r)&amp;&amp;(t.prototype[r]&#x3D;i[r]);He._IEEnumFix(t.prototype,i)&#125;&#125;,&#x2F;*</span><br><span class="line"> * asn1.js - ASN.1 DER encoder classes</span><br><span class="line"> *</span><br><span class="line"> * Copyright (c) 2013 Kenji Urushima (kenji.urushima@gmail.com)</span><br><span class="line"> *</span><br><span class="line"> * This software is licensed under the terms of the MIT License.</span><br><span class="line"> * http:&#x2F;&#x2F;kjur.github.com&#x2F;jsrsasign&#x2F;license</span><br><span class="line"> *</span><br><span class="line"> * The above copyright and license notice shall be </span><br><span class="line"> * included in all copies or substantial portions of the Software.</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * @fileOverview</span><br><span class="line"> * @name asn1-1.0.js</span><br><span class="line"> * @author Kenji Urushima kenji.urushima@gmail.com</span><br><span class="line"> * @version 1.0.2 (2013-May-30)</span><br><span class="line"> * @since 2.1</span><br><span class="line"> * @license &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;kjur.github.io&#x2F;jsrsasign&#x2F;license&#x2F;&quot;&gt;MIT License&lt;&#x2F;a&gt;</span><br><span class="line"> *&#x2F;</span><br><span class="line">&quot;undefined&quot;!&#x3D;typeof KJUR&amp;&amp;KJUR||(KJUR&#x3D;&#123;&#125;),&quot;undefined&quot;!&#x3D;typeof KJUR.asn1&amp;&amp;KJUR.asn1||(KJUR.asn1&#x3D;&#123;&#125;),KJUR.asn1.ASN1Util&#x3D;new function()&#123;this.integerToByteHex&#x3D;function(t)&#123;var e&#x3D;t.toString(16);return e.length%2&#x3D;&#x3D;1&amp;&amp;(e&#x3D;&quot;0&quot;+e),e&#125;,this.bigIntToMinTwosComplementsHex&#x3D;function(t)&#123;var i&#x3D;t.toString(16);if(&quot;-&quot;!&#x3D;i.substr(0,1))i.length%2&#x3D;&#x3D;1?i&#x3D;&quot;0&quot;+i:i.match(&#x2F;^[0-7]&#x2F;)||(i&#x3D;&quot;00&quot;+i);else&#123;var r&#x3D;i.substr(1),s&#x3D;r.length;s%2&#x3D;&#x3D;1?s+&#x3D;1:i.match(&#x2F;^[0-7]&#x2F;)||(s+&#x3D;2);for(var n&#x3D;&quot;&quot;,o&#x3D;0;s&gt;o;o++)n+&#x3D;&quot;f&quot;;var h&#x3D;new e(n,16),a&#x3D;h.xor(t).add(e.ONE);i&#x3D;a.toString(16).replace(&#x2F;^-&#x2F;,&quot;&quot;)&#125;return i&#125;,this.getPEMStringFromHex&#x3D;function(t,e)&#123;var i&#x3D;CryptoJS.enc.Hex.parse(t),r&#x3D;CryptoJS.enc.Base64.stringify(i),s&#x3D;r.replace(&#x2F;(.&#123;64&#125;)&#x2F;g,&quot;$1\r\n&quot;);return s&#x3D;s.replace(&#x2F;\r\n$&#x2F;,&quot;&quot;),&quot;-----BEGIN &quot;+e+&quot;-----\r\n&quot;+s+&quot;\r\n-----END &quot;+e+&quot;-----\r\n&quot;&#125;&#125;,KJUR.asn1.ASN1Object&#x3D;function()&#123;var t&#x3D;&quot;&quot;;this.getLengthHexFromValue&#x3D;function()&#123;if(&quot;undefined&quot;&#x3D;&#x3D;typeof this.hV||null&#x3D;&#x3D;this.hV)throw&quot;this.hV is null or undefined.&quot;;if(this.hV.length%2&#x3D;&#x3D;1)throw&quot;value hex must be even length: n&#x3D;&quot;+t.length+&quot;,v&#x3D;&quot;+this.hV;var e&#x3D;this.hV.length&#x2F;2,i&#x3D;e.toString(16);if(i.length%2&#x3D;&#x3D;1&amp;&amp;(i&#x3D;&quot;0&quot;+i),128&gt;e)return i;var r&#x3D;i.length&#x2F;2;if(r&gt;15)throw&quot;ASN.1 length too long to represent by 8x: n &#x3D; &quot;+e.toString(16);var s&#x3D;128+r;return s.toString(16)+i&#125;,this.getEncodedHex&#x3D;function()&#123;return(null&#x3D;&#x3D;this.hTLV||this.isModified)&amp;&amp;(this.hV&#x3D;this.getFreshValueHex(),this.hL&#x3D;this.getLengthHexFromValue(),this.hTLV&#x3D;this.hT+this.hL+this.hV,this.isModified&#x3D;!1),this.hTLV&#125;,this.getValueHex&#x3D;function()&#123;return this.getEncodedHex(),this.hV&#125;,this.getFreshValueHex&#x3D;function()&#123;return&quot;&quot;&#125;&#125;,KJUR.asn1.DERAbstractString&#x3D;function(t)&#123;KJUR.asn1.DERAbstractString.superclass.constructor.call(this);this.getString&#x3D;function()&#123;return this.s&#125;,this.setString&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.s&#x3D;t,this.hV&#x3D;stohex(this.s)&#125;,this.setStringHex&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.s&#x3D;null,this.hV&#x3D;t&#125;,this.getFreshValueHex&#x3D;function()&#123;return this.hV&#125;,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;(&quot;undefined&quot;!&#x3D;typeof t.str?this.setString(t.str):&quot;undefined&quot;!&#x3D;typeof t.hex&amp;&amp;this.setStringHex(t.hex))&#125;,Ce.extend(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractTime&#x3D;function(t)&#123;KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);this.localDateToUTC&#x3D;function(t)&#123;utc&#x3D;t.getTime()+6e4*t.getTimezoneOffset();var e&#x3D;new Date(utc);return e&#125;,this.formatDate&#x3D;function(t,e)&#123;var i&#x3D;this.zeroPadding,r&#x3D;this.localDateToUTC(t),s&#x3D;String(r.getFullYear());&quot;utc&quot;&#x3D;&#x3D;e&amp;&amp;(s&#x3D;s.substr(2,2));var n&#x3D;i(String(r.getMonth()+1),2),o&#x3D;i(String(r.getDate()),2),h&#x3D;i(String(r.getHours()),2),a&#x3D;i(String(r.getMinutes()),2),u&#x3D;i(String(r.getSeconds()),2);return s+n+o+h+a+u+&quot;Z&quot;&#125;,this.zeroPadding&#x3D;function(t,e)&#123;return t.length&gt;&#x3D;e?t:new Array(e-t.length+1).join(&quot;0&quot;)+t&#125;,this.getString&#x3D;function()&#123;return this.s&#125;,this.setString&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.s&#x3D;t,this.hV&#x3D;stohex(this.s)&#125;,this.setByDateValue&#x3D;function(t,e,i,r,s,n)&#123;var o&#x3D;new Date(Date.UTC(t,e-1,i,r,s,n,0));this.setByDate(o)&#125;,this.getFreshValueHex&#x3D;function()&#123;return this.hV&#125;&#125;,Ce.extend(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object),KJUR.asn1.DERAbstractStructured&#x3D;function(t)&#123;KJUR.asn1.DERAbstractString.superclass.constructor.call(this);this.setByASN1ObjectArray&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.asn1Array&#x3D;t&#125;,this.appendASN1Object&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.asn1Array.push(t)&#125;,this.asn1Array&#x3D;new Array,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;&quot;undefined&quot;!&#x3D;typeof t.array&amp;&amp;(this.asn1Array&#x3D;t.array)&#125;,Ce.extend(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object),KJUR.asn1.DERBoolean&#x3D;function()&#123;KJUR.asn1.DERBoolean.superclass.constructor.call(this),this.hT&#x3D;&quot;01&quot;,this.hTLV&#x3D;&quot;0101ff&quot;&#125;,Ce.extend(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object),KJUR.asn1.DERInteger&#x3D;function(t)&#123;KJUR.asn1.DERInteger.superclass.constructor.call(this),this.hT&#x3D;&quot;02&quot;,this.setByBigInteger&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.hV&#x3D;KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)&#125;,this.setByInteger&#x3D;function(t)&#123;var i&#x3D;new e(String(t),10);this.setByBigInteger(i)&#125;,this.setValueHex&#x3D;function(t)&#123;this.hV&#x3D;t&#125;,this.getFreshValueHex&#x3D;function()&#123;return this.hV&#125;,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;(&quot;undefined&quot;!&#x3D;typeof t.bigint?this.setByBigInteger(t.bigint):&quot;undefined&quot;!&#x3D;typeof t[&quot;int&quot;]?this.setByInteger(t[&quot;int&quot;]):&quot;undefined&quot;!&#x3D;typeof t.hex&amp;&amp;this.setValueHex(t.hex))&#125;,Ce.extend(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object),KJUR.asn1.DERBitString&#x3D;function(t)&#123;KJUR.asn1.DERBitString.superclass.constructor.call(this),this.hT&#x3D;&quot;03&quot;,this.setHexValueIncludingUnusedBits&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.hV&#x3D;t&#125;,this.setUnusedBitsAndHexValue&#x3D;function(t,e)&#123;if(0&gt;t||t&gt;7)throw&quot;unused bits shall be from 0 to 7: u &#x3D; &quot;+t;var i&#x3D;&quot;0&quot;+t;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.hV&#x3D;i+e&#125;,this.setByBinaryString&#x3D;function(t)&#123;t&#x3D;t.replace(&#x2F;0+$&#x2F;,&quot;&quot;);var e&#x3D;8-t.length%8;8&#x3D;&#x3D;e&amp;&amp;(e&#x3D;0);for(var i&#x3D;0;e&gt;&#x3D;i;i++)t+&#x3D;&quot;0&quot;;for(var r&#x3D;&quot;&quot;,i&#x3D;0;i&lt;t.length-1;i+&#x3D;8)&#123;var s&#x3D;t.substr(i,8),n&#x3D;parseInt(s,2).toString(16);1&#x3D;&#x3D;n.length&amp;&amp;(n&#x3D;&quot;0&quot;+n),r+&#x3D;n&#125;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.hV&#x3D;&quot;0&quot;+e+r&#125;,this.setByBooleanArray&#x3D;function(t)&#123;for(var e&#x3D;&quot;&quot;,i&#x3D;0;i&lt;t.length;i++)e+&#x3D;1&#x3D;&#x3D;t[i]?&quot;1&quot;:&quot;0&quot;;this.setByBinaryString(e)&#125;,this.newFalseArray&#x3D;function(t)&#123;for(var e&#x3D;new Array(t),i&#x3D;0;t&gt;i;i++)e[i]&#x3D;!1;return e&#125;,this.getFreshValueHex&#x3D;function()&#123;return this.hV&#125;,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;(&quot;undefined&quot;!&#x3D;typeof t.hex?this.setHexValueIncludingUnusedBits(t.hex):&quot;undefined&quot;!&#x3D;typeof t.bin?this.setByBinaryString(t.bin):&quot;undefined&quot;!&#x3D;typeof t.array&amp;&amp;this.setByBooleanArray(t.array))&#125;,Ce.extend(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object),KJUR.asn1.DEROctetString&#x3D;function(t)&#123;KJUR.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT&#x3D;&quot;04&quot;&#125;,Ce.extend(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNull&#x3D;function()&#123;KJUR.asn1.DERNull.superclass.constructor.call(this),this.hT&#x3D;&quot;05&quot;,this.hTLV&#x3D;&quot;0500&quot;&#125;,Ce.extend(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object),KJUR.asn1.DERObjectIdentifier&#x3D;function(t)&#123;var i&#x3D;function(t)&#123;var e&#x3D;t.toString(16);return 1&#x3D;&#x3D;e.length&amp;&amp;(e&#x3D;&quot;0&quot;+e),e&#125;,r&#x3D;function(t)&#123;var r&#x3D;&quot;&quot;,s&#x3D;new e(t,10),n&#x3D;s.toString(2),o&#x3D;7-n.length%7;7&#x3D;&#x3D;o&amp;&amp;(o&#x3D;0);for(var h&#x3D;&quot;&quot;,a&#x3D;0;o&gt;a;a++)h+&#x3D;&quot;0&quot;;n&#x3D;h+n;for(var a&#x3D;0;a&lt;n.length-1;a+&#x3D;7)&#123;var u&#x3D;n.substr(a,7);a!&#x3D;n.length-7&amp;&amp;(u&#x3D;&quot;1&quot;+u),r+&#x3D;i(parseInt(u,2))&#125;return r&#125;;KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT&#x3D;&quot;06&quot;,this.setValueHex&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.s&#x3D;null,this.hV&#x3D;t&#125;,this.setValueOidString&#x3D;function(t)&#123;if(!t.match(&#x2F;^[0-9.]+$&#x2F;))throw&quot;malformed oid string: &quot;+t;var e&#x3D;&quot;&quot;,s&#x3D;t.split(&quot;.&quot;),n&#x3D;40*parseInt(s[0])+parseInt(s[1]);e+&#x3D;i(n),s.splice(0,2);for(var o&#x3D;0;o&lt;s.length;o++)e+&#x3D;r(s[o]);this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.s&#x3D;null,this.hV&#x3D;e&#125;,this.setValueName&#x3D;function(t)&#123;if(&quot;undefined&quot;&#x3D;&#x3D;typeof KJUR.asn1.x509.OID.name2oidList[t])throw&quot;DERObjectIdentifier oidName undefined: &quot;+t;var e&#x3D;KJUR.asn1.x509.OID.name2oidList[t];this.setValueOidString(e)&#125;,this.getFreshValueHex&#x3D;function()&#123;return this.hV&#125;,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;(&quot;undefined&quot;!&#x3D;typeof t.oid?this.setValueOidString(t.oid):&quot;undefined&quot;!&#x3D;typeof t.hex?this.setValueHex(t.hex):&quot;undefined&quot;!&#x3D;typeof t.name&amp;&amp;this.setValueName(t.name))&#125;,Ce.extend(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object),KJUR.asn1.DERUTF8String&#x3D;function(t)&#123;KJUR.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT&#x3D;&quot;0c&quot;&#125;,Ce.extend(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERNumericString&#x3D;function(t)&#123;KJUR.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT&#x3D;&quot;12&quot;&#125;,Ce.extend(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERPrintableString&#x3D;function(t)&#123;KJUR.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT&#x3D;&quot;13&quot;&#125;,Ce.extend(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERTeletexString&#x3D;function(t)&#123;KJUR.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT&#x3D;&quot;14&quot;&#125;,Ce.extend(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString),KJUR.asn1.DERIA5String&#x3D;function(t)&#123;KJUR.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT&#x3D;&quot;16&quot;&#125;,Ce.extend(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString),KJUR.asn1.DERUTCTime&#x3D;function(t)&#123;KJUR.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT&#x3D;&quot;17&quot;,this.setByDate&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.date&#x3D;t,this.s&#x3D;this.formatDate(this.date,&quot;utc&quot;),this.hV&#x3D;stohex(this.s)&#125;,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;(&quot;undefined&quot;!&#x3D;typeof t.str?this.setString(t.str):&quot;undefined&quot;!&#x3D;typeof t.hex?this.setStringHex(t.hex):&quot;undefined&quot;!&#x3D;typeof t.date&amp;&amp;this.setByDate(t.date))&#125;,Ce.extend(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERGeneralizedTime&#x3D;function(t)&#123;KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT&#x3D;&quot;18&quot;,this.setByDate&#x3D;function(t)&#123;this.hTLV&#x3D;null,this.isModified&#x3D;!0,this.date&#x3D;t,this.s&#x3D;this.formatDate(this.date,&quot;gen&quot;),this.hV&#x3D;stohex(this.s)&#125;,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;(&quot;undefined&quot;!&#x3D;typeof t.str?this.setString(t.str):&quot;undefined&quot;!&#x3D;typeof t.hex?this.setStringHex(t.hex):&quot;undefined&quot;!&#x3D;typeof t.date&amp;&amp;this.setByDate(t.date))&#125;,Ce.extend(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime),KJUR.asn1.DERSequence&#x3D;function(t)&#123;KJUR.asn1.DERSequence.superclass.constructor.call(this,t),this.hT&#x3D;&quot;30&quot;,this.getFreshValueHex&#x3D;function()&#123;for(var t&#x3D;&quot;&quot;,e&#x3D;0;e&lt;this.asn1Array.length;e++)&#123;var i&#x3D;this.asn1Array[e];t+&#x3D;i.getEncodedHex()&#125;return this.hV&#x3D;t,this.hV&#125;&#125;,Ce.extend(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERSet&#x3D;function(t)&#123;KJUR.asn1.DERSet.superclass.constructor.call(this,t),this.hT&#x3D;&quot;31&quot;,this.getFreshValueHex&#x3D;function()&#123;for(var t&#x3D;new Array,e&#x3D;0;e&lt;this.asn1Array.length;e++)&#123;var i&#x3D;this.asn1Array[e];t.push(i.getEncodedHex())&#125;return t.sort(),this.hV&#x3D;t.join(&quot;&quot;),this.hV&#125;&#125;,Ce.extend(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured),KJUR.asn1.DERTaggedObject&#x3D;function(t)&#123;KJUR.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT&#x3D;&quot;a0&quot;,this.hV&#x3D;&quot;&quot;,this.isExplicit&#x3D;!0,this.asn1Object&#x3D;null,this.setASN1Object&#x3D;function(t,e,i)&#123;this.hT&#x3D;e,this.isExplicit&#x3D;t,this.asn1Object&#x3D;i,this.isExplicit?(this.hV&#x3D;this.asn1Object.getEncodedHex(),this.hTLV&#x3D;null,this.isModified&#x3D;!0):(this.hV&#x3D;null,this.hTLV&#x3D;i.getEncodedHex(),this.hTLV&#x3D;this.hTLV.replace(&#x2F;^..&#x2F;,e),this.isModified&#x3D;!1)&#125;,this.getFreshValueHex&#x3D;function()&#123;return this.hV&#125;,&quot;undefined&quot;!&#x3D;typeof t&amp;&amp;(&quot;undefined&quot;!&#x3D;typeof t.tag&amp;&amp;(this.hT&#x3D;t.tag),&quot;undefined&quot;!&#x3D;typeof t.explicit&amp;&amp;(this.isExplicit&#x3D;t.explicit),&quot;undefined&quot;!&#x3D;typeof t.obj&amp;&amp;(this.asn1Object&#x3D;t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))&#125;,Ce.extend(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object),</span><br><span class="line">&#x2F;&#x2F; Copyright (c) 2008-2013 Lapo Luchini &lt;lapo@lapo.it&gt;</span><br><span class="line">&#x2F;&#x2F; copyright notice and this permission notice appear in all copies.</span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F; THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span><br><span class="line">&#x2F;&#x2F; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span><br><span class="line">&#x2F;&#x2F; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span><br><span class="line">&#x2F;&#x2F; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span><br><span class="line">&#x2F;&#x2F; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span><br><span class="line">&#x2F;&#x2F; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span><br><span class="line">&#x2F;&#x2F; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span><br><span class="line">function(t)&#123;&quot;use strict&quot;;var e,i&#x3D;&#123;&#125;;i.decode&#x3D;function(i)&#123;var r;if(e&#x3D;&#x3D;&#x3D;t)&#123;var s&#x3D;&quot;0123456789ABCDEF&quot;,n&#x3D;&quot; \f\n\r \u2028\u2029&quot;;for(e&#x3D;[],r&#x3D;0;16&gt;r;++r)e[s.charAt(r)]&#x3D;r;for(s&#x3D;s.toLowerCase(),r&#x3D;10;16&gt;r;++r)e[s.charAt(r)]&#x3D;r;for(r&#x3D;0;r&lt;n.length;++r)e[n.charAt(r)]&#x3D;-1&#125;var o&#x3D;[],h&#x3D;0,a&#x3D;0;for(r&#x3D;0;r&lt;i.length;++r)&#123;var u&#x3D;i.charAt(r);if(&quot;&#x3D;&quot;&#x3D;&#x3D;u)break;if(u&#x3D;e[u],-1!&#x3D;u)&#123;if(u&#x3D;&#x3D;&#x3D;t)throw&quot;Illegal character at offset &quot;+r;h|&#x3D;u,++a&gt;&#x3D;2?(o[o.length]&#x3D;h,h&#x3D;0,a&#x3D;0):h&lt;&lt;&#x3D;4&#125;&#125;if(a)throw&quot;Hex encoding incomplete: 4 bits missing&quot;;return o&#125;,window.Hex&#x3D;i&#125;(),</span><br><span class="line">&#x2F;&#x2F; Copyright (c) 2008-2013 Lapo Luchini &lt;lapo@lapo.it&gt;</span><br><span class="line">&#x2F;&#x2F; copyright notice and this permission notice appear in all copies.</span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F; THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span><br><span class="line">&#x2F;&#x2F; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span><br><span class="line">&#x2F;&#x2F; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span><br><span class="line">&#x2F;&#x2F; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span><br><span class="line">&#x2F;&#x2F; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span><br><span class="line">&#x2F;&#x2F; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span><br><span class="line">&#x2F;&#x2F; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span><br><span class="line">function(t)&#123;&quot;use strict&quot;;var e,i&#x3D;&#123;&#125;;i.decode&#x3D;function(i)&#123;var r;if(e&#x3D;&#x3D;&#x3D;t)&#123;var s&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;,n&#x3D;&quot;&#x3D; \f\n\r \u2028\u2029&quot;;for(e&#x3D;[],r&#x3D;0;64&gt;r;++r)e[s.charAt(r)]&#x3D;r;for(r&#x3D;0;r&lt;n.length;++r)e[n.charAt(r)]&#x3D;-1&#125;var o&#x3D;[],h&#x3D;0,a&#x3D;0;for(r&#x3D;0;r&lt;i.length;++r)&#123;var u&#x3D;i.charAt(r);if(&quot;&#x3D;&quot;&#x3D;&#x3D;u)break;if(u&#x3D;e[u],-1!&#x3D;u)&#123;if(u&#x3D;&#x3D;&#x3D;t)throw&quot;Illegal character at offset &quot;+r;h|&#x3D;u,++a&gt;&#x3D;4?(o[o.length]&#x3D;h&gt;&gt;16,o[o.length]&#x3D;h&gt;&gt;8&amp;255,o[o.length]&#x3D;255&amp;h,h&#x3D;0,a&#x3D;0):h&lt;&lt;&#x3D;6&#125;&#125;switch(a)&#123;case 1:throw&quot;Base64 encoding incomplete: at least 2 bits missing&quot;;case 2:o[o.length]&#x3D;h&gt;&gt;10;break;case 3:o[o.length]&#x3D;h&gt;&gt;16,o[o.length]&#x3D;h&gt;&gt;8&amp;255&#125;return o&#125;,i.re&#x3D;&#x2F;-----BEGIN [^-]+-----([A-Za-z0-9+\&#x2F;&#x3D;\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\&#x2F;&#x3D;\s]+)&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;,i.unarmor&#x3D;function(t)&#123;var e&#x3D;i.re.exec(t);if(e)if(e[1])t&#x3D;e[1];else&#123;if(!e[2])throw&quot;RegExp out of sync&quot;;t&#x3D;e[2]&#125;return i.decode(t)&#125;,window.Base64&#x3D;i&#125;(),</span><br><span class="line">&#x2F;&#x2F; Copyright (c) 2008-2013 Lapo Luchini &lt;lapo@lapo.it&gt;</span><br><span class="line">&#x2F;&#x2F; copyright notice and this permission notice appear in all copies.</span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F; THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span><br><span class="line">&#x2F;&#x2F; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span><br><span class="line">&#x2F;&#x2F; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span><br><span class="line">&#x2F;&#x2F; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span><br><span class="line">&#x2F;&#x2F; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span><br><span class="line">&#x2F;&#x2F; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span><br><span class="line">&#x2F;&#x2F; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span><br><span class="line">function(t)&#123;&quot;use strict&quot;;function e(t,i)&#123;t instanceof e?(this.enc&#x3D;t.enc,this.pos&#x3D;t.pos):(this.enc&#x3D;t,this.pos&#x3D;i)&#125;function i(t,e,i,r,s)&#123;this.stream&#x3D;t,this.header&#x3D;e,this.length&#x3D;i,this.tag&#x3D;r,this.sub&#x3D;s&#125;var r&#x3D;100,s&#x3D;&quot;…&quot;,n&#x3D;&#123;tag:function(t,e)&#123;var i&#x3D;document.createElement(t);return i.className&#x3D;e,i&#125;,text:function(t)&#123;return document.createTextNode(t)&#125;&#125;;e.prototype.get&#x3D;function(e)&#123;if(e&#x3D;&#x3D;&#x3D;t&amp;&amp;(e&#x3D;this.pos++),e&gt;&#x3D;this.enc.length)throw&quot;Requesting byte offset &quot;+e+&quot; on a stream of length &quot;+this.enc.length;return this.enc[e]&#125;,e.prototype.hexDigits&#x3D;&quot;0123456789ABCDEF&quot;,e.prototype.hexByte&#x3D;function(t)&#123;return this.hexDigits.charAt(t&gt;&gt;4&amp;15)+this.hexDigits.charAt(15&amp;t)&#125;,e.prototype.hexDump&#x3D;function(t,e,i)&#123;for(var r&#x3D;&quot;&quot;,s&#x3D;t;e&gt;s;++s)if(r+&#x3D;this.hexByte(this.get(s)),i!&#x3D;&#x3D;!0)switch(15&amp;s)&#123;case 7:r+&#x3D;&quot;  &quot;;break;case 15:r+&#x3D;&quot;\n&quot;;break;default:r+&#x3D;&quot; &quot;&#125;return r&#125;,e.prototype.parseStringISO&#x3D;function(t,e)&#123;for(var i&#x3D;&quot;&quot;,r&#x3D;t;e&gt;r;++r)i+&#x3D;String.fromCharCode(this.get(r));return i&#125;,e.prototype.parseStringUTF&#x3D;function(t,e)&#123;for(var i&#x3D;&quot;&quot;,r&#x3D;t;e&gt;r;)&#123;var s&#x3D;this.get(r++);i+&#x3D;128&gt;s?String.fromCharCode(s):s&gt;191&amp;&amp;224&gt;s?String.fromCharCode((31&amp;s)&lt;&lt;6|63&amp;this.get(r++)):String.fromCharCode((15&amp;s)&lt;&lt;12|(63&amp;this.get(r++))&lt;&lt;6|63&amp;this.get(r++))&#125;return i&#125;,e.prototype.parseStringBMP&#x3D;function(t,e)&#123;for(var i&#x3D;&quot;&quot;,r&#x3D;t;e&gt;r;r+&#x3D;2)&#123;var s&#x3D;this.get(r),n&#x3D;this.get(r+1);i+&#x3D;String.fromCharCode((s&lt;&lt;8)+n)&#125;return i&#125;,e.prototype.reTime&#x3D;&#x2F;^((?:1[89]|2\d)?\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d&#123;1,3&#125;))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$&#x2F;,e.prototype.parseTime&#x3D;function(t,e)&#123;var i&#x3D;this.parseStringISO(t,e),r&#x3D;this.reTime.exec(i);return r?(i&#x3D;r[1]+&quot;-&quot;+r[2]+&quot;-&quot;+r[3]+&quot; &quot;+r[4],r[5]&amp;&amp;(i+&#x3D;&quot;:&quot;+r[5],r[6]&amp;&amp;(i+&#x3D;&quot;:&quot;+r[6],r[7]&amp;&amp;(i+&#x3D;&quot;.&quot;+r[7]))),r[8]&amp;&amp;(i+&#x3D;&quot; UTC&quot;,&quot;Z&quot;!&#x3D;r[8]&amp;&amp;(i+&#x3D;r[8],r[9]&amp;&amp;(i+&#x3D;&quot;:&quot;+r[9]))),i):&quot;Unrecognized time: &quot;+i&#125;,e.prototype.parseInteger&#x3D;function(t,e)&#123;var i&#x3D;e-t;if(i&gt;4)&#123;i&lt;&lt;&#x3D;3;var r&#x3D;this.get(t);if(0&#x3D;&#x3D;&#x3D;r)i-&#x3D;8;else for(;128&gt;r;)r&lt;&lt;&#x3D;1,--i;return&quot;(&quot;+i+&quot; bit)&quot;&#125;for(var s&#x3D;0,n&#x3D;t;e&gt;n;++n)s&#x3D;s&lt;&lt;8|this.get(n);return s&#125;,e.prototype.parseBitString&#x3D;function(t,e)&#123;var i&#x3D;this.get(t),r&#x3D;(e-t-1&lt;&lt;3)-i,s&#x3D;&quot;(&quot;+r+&quot; bit)&quot;;if(20&gt;&#x3D;r)&#123;var n&#x3D;i;s+&#x3D;&quot; &quot;;for(var o&#x3D;e-1;o&gt;t;--o)&#123;for(var h&#x3D;this.get(o),a&#x3D;n;8&gt;a;++a)s+&#x3D;h&gt;&gt;a&amp;1?&quot;1&quot;:&quot;0&quot;;n&#x3D;0&#125;&#125;return s&#125;,e.prototype.parseOctetString&#x3D;function(t,e)&#123;var i&#x3D;e-t,n&#x3D;&quot;(&quot;+i+&quot; byte) &quot;;i&gt;r&amp;&amp;(e&#x3D;t+r);for(var o&#x3D;t;e&gt;o;++o)n+&#x3D;this.hexByte(this.get(o));return i&gt;r&amp;&amp;(n+&#x3D;s),n&#125;,e.prototype.parseOID&#x3D;function(t,e)&#123;for(var i&#x3D;&quot;&quot;,r&#x3D;0,s&#x3D;0,n&#x3D;t;e&gt;n;++n)&#123;var o&#x3D;this.get(n);if(r&#x3D;r&lt;&lt;7|127&amp;o,s+&#x3D;7,!(128&amp;o))&#123;if(&quot;&quot;&#x3D;&#x3D;&#x3D;i)&#123;var h&#x3D;80&gt;r?40&gt;r?0:1:2;i&#x3D;h+&quot;.&quot;+(r-40*h)&#125;else i+&#x3D;&quot;.&quot;+(s&gt;&#x3D;31?&quot;bigint&quot;:r);r&#x3D;s&#x3D;0&#125;&#125;return i&#125;,i.prototype.typeName&#x3D;function()&#123;if(this.tag&#x3D;&#x3D;&#x3D;t)return&quot;unknown&quot;;var e&#x3D;this.tag&gt;&gt;6,i&#x3D;(this.tag&gt;&gt;5&amp;1,31&amp;this.tag);switch(e)&#123;case 0:switch(i)&#123;case 0:return&quot;EOC&quot;;case 1:return&quot;BOOLEAN&quot;;case 2:return&quot;INTEGER&quot;;case 3:return&quot;BIT_STRING&quot;;case 4:return&quot;OCTET_STRING&quot;;case 5:return&quot;NULL&quot;;case 6:return&quot;OBJECT_IDENTIFIER&quot;;case 7:return&quot;ObjectDescriptor&quot;;case 8:return&quot;EXTERNAL&quot;;case 9:return&quot;REAL&quot;;case 10:return&quot;ENUMERATED&quot;;case 11:return&quot;EMBEDDED_PDV&quot;;case 12:return&quot;UTF8String&quot;;case 16:return&quot;SEQUENCE&quot;;case 17:return&quot;SET&quot;;case 18:return&quot;NumericString&quot;;case 19:return&quot;PrintableString&quot;;case 20:return&quot;TeletexString&quot;;case 21:return&quot;VideotexString&quot;;case 22:return&quot;IA5String&quot;;case 23:return&quot;UTCTime&quot;;case 24:return&quot;GeneralizedTime&quot;;case 25:return&quot;GraphicString&quot;;case 26:return&quot;VisibleString&quot;;case 27:return&quot;GeneralString&quot;;case 28:return&quot;UniversalString&quot;;case 30:return&quot;BMPString&quot;;default:return&quot;Universal_&quot;+i.toString(16)&#125;case 1:return&quot;Application_&quot;+i.toString(16);case 2:return&quot;[&quot;+i+&quot;]&quot;;case 3:return&quot;Private_&quot;+i.toString(16)&#125;&#125;,i.prototype.reSeemsASCII&#x3D;&#x2F;^[ -~]+$&#x2F;,i.prototype.content&#x3D;function()&#123;if(this.tag&#x3D;&#x3D;&#x3D;t)return null;var e&#x3D;this.tag&gt;&gt;6,i&#x3D;31&amp;this.tag,n&#x3D;this.posContent(),o&#x3D;Math.abs(this.length);if(0!&#x3D;&#x3D;e)&#123;if(null!&#x3D;&#x3D;this.sub)return&quot;(&quot;+this.sub.length+&quot; elem)&quot;;var h&#x3D;this.stream.parseStringISO(n,n+Math.min(o,r));return this.reSeemsASCII.test(h)?h.substring(0,2*r)+(h.length&gt;2*r?s:&quot;&quot;):this.stream.parseOctetString(n,n+o)&#125;switch(i)&#123;case 1:return 0&#x3D;&#x3D;&#x3D;this.stream.get(n)?&quot;false&quot;:&quot;true&quot;;case 2:return this.stream.parseInteger(n,n+o);case 3:return this.sub?&quot;(&quot;+this.sub.length+&quot; elem)&quot;:this.stream.parseBitString(n,n+o);case 4:return this.sub?&quot;(&quot;+this.sub.length+&quot; elem)&quot;:this.stream.parseOctetString(n,n+o);case 6:return this.stream.parseOID(n,n+o);case 16:case 17:return&quot;(&quot;+this.sub.length+&quot; elem)&quot;;case 12:return this.stream.parseStringUTF(n,n+o);case 18:case 19:case 20:case 21:case 22:case 26:return this.stream.parseStringISO(n,n+o);case 30:return this.stream.parseStringBMP(n,n+o);case 23:case 24:return this.stream.parseTime(n,n+o)&#125;return null&#125;,i.prototype.toString&#x3D;function()&#123;return this.typeName()+&quot;@&quot;+this.stream.pos+&quot;[header:&quot;+this.header+&quot;,length:&quot;+this.length+&quot;,sub:&quot;+(null&#x3D;&#x3D;&#x3D;this.sub?&quot;null&quot;:this.sub.length)+&quot;]&quot;&#125;,i.prototype.print&#x3D;function(e)&#123;if(e&#x3D;&#x3D;&#x3D;t&amp;&amp;(e&#x3D;&quot;&quot;),document.writeln(e+this),null!&#x3D;&#x3D;this.sub)&#123;e+&#x3D;&quot;  &quot;;for(var i&#x3D;0,r&#x3D;this.sub.length;r&gt;i;++i)this.sub[i].print(e)&#125;&#125;,i.prototype.toPrettyString&#x3D;function(e)&#123;e&#x3D;&#x3D;&#x3D;t&amp;&amp;(e&#x3D;&quot;&quot;);var i&#x3D;e+this.typeName()+&quot; @&quot;+this.stream.pos;if(this.length&gt;&#x3D;0&amp;&amp;(i+&#x3D;&quot;+&quot;),i+&#x3D;this.length,32&amp;this.tag?i+&#x3D;&quot; (constructed)&quot;:3!&#x3D;this.tag&amp;&amp;4!&#x3D;this.tag||null&#x3D;&#x3D;&#x3D;this.sub||(i+&#x3D;&quot; (encapsulates)&quot;),i+&#x3D;&quot;\n&quot;,null!&#x3D;&#x3D;this.sub)&#123;e+&#x3D;&quot;  &quot;;for(var r&#x3D;0,s&#x3D;this.sub.length;s&gt;r;++r)i+&#x3D;this.sub[r].toPrettyString(e)&#125;return i&#125;,i.prototype.toDOM&#x3D;function()&#123;var t&#x3D;n.tag(&quot;div&quot;,&quot;node&quot;);t.asn1&#x3D;this;var e&#x3D;n.tag(&quot;div&quot;,&quot;head&quot;),i&#x3D;this.typeName().replace(&#x2F;_&#x2F;g,&quot; &quot;);e.innerHTML&#x3D;i;var r&#x3D;this.content();if(null!&#x3D;&#x3D;r)&#123;r&#x3D;String(r).replace(&#x2F;&lt;&#x2F;g,&quot;&lt;&quot;);var s&#x3D;n.tag(&quot;span&quot;,&quot;preview&quot;);s.appendChild(n.text(r)),e.appendChild(s)&#125;t.appendChild(e),this.node&#x3D;t,this.head&#x3D;e;var o&#x3D;n.tag(&quot;div&quot;,&quot;value&quot;);if(i&#x3D;&quot;Offset: &quot;+this.stream.pos+&quot;&lt;br&#x2F;&gt;&quot;,i+&#x3D;&quot;Length: &quot;+this.header+&quot;+&quot;,i+&#x3D;this.length&gt;&#x3D;0?this.length:-this.length+&quot; (undefined)&quot;,32&amp;this.tag?i+&#x3D;&quot;&lt;br&#x2F;&gt;(constructed)&quot;:3!&#x3D;this.tag&amp;&amp;4!&#x3D;this.tag||null&#x3D;&#x3D;&#x3D;this.sub||(i+&#x3D;&quot;&lt;br&#x2F;&gt;(encapsulates)&quot;),null!&#x3D;&#x3D;r&amp;&amp;(i+&#x3D;&quot;&lt;br&#x2F;&gt;Value:&lt;br&#x2F;&gt;&lt;b&gt;&quot;+r+&quot;&lt;&#x2F;b&gt;&quot;,&quot;object&quot;&#x3D;&#x3D;typeof oids&amp;&amp;6&#x3D;&#x3D;this.tag))&#123;var h&#x3D;oids[r];h&amp;&amp;(h.d&amp;&amp;(i+&#x3D;&quot;&lt;br&#x2F;&gt;&quot;+h.d),h.c&amp;&amp;(i+&#x3D;&quot;&lt;br&#x2F;&gt;&quot;+h.c),h.w&amp;&amp;(i+&#x3D;&quot;&lt;br&#x2F;&gt;(warning!)&quot;))&#125;o.innerHTML&#x3D;i,t.appendChild(o);var a&#x3D;n.tag(&quot;div&quot;,&quot;sub&quot;);if(null!&#x3D;&#x3D;this.sub)for(var u&#x3D;0,c&#x3D;this.sub.length;c&gt;u;++u)a.appendChild(this.sub[u].toDOM());return t.appendChild(a),e.onclick&#x3D;function()&#123;t.className&#x3D;&quot;node collapsed&quot;&#x3D;&#x3D;t.className?&quot;node&quot;:&quot;node collapsed&quot;&#125;,t&#125;,i.prototype.posStart&#x3D;function()&#123;return this.stream.pos&#125;,i.prototype.posContent&#x3D;function()&#123;return this.stream.pos+this.header&#125;,i.prototype.posEnd&#x3D;function()&#123;return this.stream.pos+this.header+Math.abs(this.length)&#125;,i.prototype.fakeHover&#x3D;function(t)&#123;this.node.className+&#x3D;&quot; hover&quot;,t&amp;&amp;(this.head.className+&#x3D;&quot; hover&quot;)&#125;,i.prototype.fakeOut&#x3D;function(t)&#123;var e&#x3D;&#x2F; ?hover&#x2F;;this.node.className&#x3D;this.node.className.replace(e,&quot;&quot;),t&amp;&amp;(this.head.className&#x3D;this.head.className.replace(e,&quot;&quot;))&#125;,i.prototype.toHexDOM_sub&#x3D;function(t,e,i,r,s)&#123;if(!(r&gt;&#x3D;s))&#123;var o&#x3D;n.tag(&quot;span&quot;,e);o.appendChild(n.text(i.hexDump(r,s))),t.appendChild(o)&#125;&#125;,i.prototype.toHexDOM&#x3D;function(e)&#123;var i&#x3D;n.tag(&quot;span&quot;,&quot;hex&quot;);if(e&#x3D;&#x3D;&#x3D;t&amp;&amp;(e&#x3D;i),this.head.hexNode&#x3D;i,this.head.onmouseover&#x3D;function()&#123;this.hexNode.className&#x3D;&quot;hexCurrent&quot;&#125;,this.head.onmouseout&#x3D;function()&#123;this.hexNode.className&#x3D;&quot;hex&quot;&#125;,i.asn1&#x3D;this,i.onmouseover&#x3D;function()&#123;var t&#x3D;!e.selected;t&amp;&amp;(e.selected&#x3D;this.asn1,this.className&#x3D;&quot;hexCurrent&quot;),this.asn1.fakeHover(t)&#125;,i.onmouseout&#x3D;function()&#123;var t&#x3D;e.selected&#x3D;&#x3D;this.asn1;this.asn1.fakeOut(t),t&amp;&amp;(e.selected&#x3D;null,this.className&#x3D;&quot;hex&quot;)&#125;,this.toHexDOM_sub(i,&quot;tag&quot;,this.stream,this.posStart(),this.posStart()+1),this.toHexDOM_sub(i,this.length&gt;&#x3D;0?&quot;dlen&quot;:&quot;ulen&quot;,this.stream,this.posStart()+1,this.posContent()),null&#x3D;&#x3D;&#x3D;this.sub)i.appendChild(n.text(this.stream.hexDump(this.posContent(),this.posEnd())));else if(this.sub.length&gt;0)&#123;var r&#x3D;this.sub[0],s&#x3D;this.sub[this.sub.length-1];this.toHexDOM_sub(i,&quot;intro&quot;,this.stream,this.posContent(),r.posStart());for(var o&#x3D;0,h&#x3D;this.sub.length;h&gt;o;++o)i.appendChild(this.sub[o].toHexDOM(e));this.toHexDOM_sub(i,&quot;outro&quot;,this.stream,s.posEnd(),this.posEnd())&#125;return i&#125;,i.prototype.toHexString&#x3D;function(t)&#123;return this.stream.hexDump(this.posStart(),this.posEnd(),!0)&#125;,i.decodeLength&#x3D;function(t)&#123;var e&#x3D;t.get(),i&#x3D;127&amp;e;if(i&#x3D;&#x3D;e)return i;if(i&gt;3)throw&quot;Length over 24 bits not supported at position &quot;+(t.pos-1);if(0&#x3D;&#x3D;&#x3D;i)return-1;e&#x3D;0;for(var r&#x3D;0;i&gt;r;++r)e&#x3D;e&lt;&lt;8|t.get();return e&#125;,i.hasContent&#x3D;function(t,r,s)&#123;if(32&amp;t)return!0;if(3&gt;t||t&gt;4)return!1;var n&#x3D;new e(s);3&#x3D;&#x3D;t&amp;&amp;n.get();var o&#x3D;n.get();if(o&gt;&gt;6&amp;1)return!1;try&#123;var h&#x3D;i.decodeLength(n);return n.pos-s.pos+h&#x3D;&#x3D;r&#125;catch(a)&#123;return!1&#125;&#125;,i.decode&#x3D;function(t)&#123;t instanceof e||(t&#x3D;new e(t,0));var r&#x3D;new e(t),s&#x3D;t.get(),n&#x3D;i.decodeLength(t),o&#x3D;t.pos-r.pos,h&#x3D;null;if(i.hasContent(s,n,t))&#123;var a&#x3D;t.pos;if(3&#x3D;&#x3D;s&amp;&amp;t.get(),h&#x3D;[],n&gt;&#x3D;0)&#123;for(var u&#x3D;a+n;t.pos&lt;u;)h[h.length]&#x3D;i.decode(t);if(t.pos!&#x3D;u)throw&quot;Content size is not correct for container starting at offset &quot;+a&#125;else try&#123;for(;;)&#123;var c&#x3D;i.decode(t);if(0&#x3D;&#x3D;&#x3D;c.tag)break;h[h.length]&#x3D;c&#125;n&#x3D;a-t.pos&#125;catch(f)&#123;throw&quot;Exception while decoding undefined length content: &quot;+f&#125;&#125;else t.pos+&#x3D;n;return new i(r,o,n,s,h)&#125;,i.test&#x3D;function()&#123;for(var t&#x3D;[&#123;value:[39],expected:39&#125;,&#123;value:[129,201],expected:201&#125;,&#123;value:[131,254,220,186],expected:16702650&#125;],r&#x3D;0,s&#x3D;t.length;s&gt;r;++r)&#123;var n&#x3D;new e(t[r].value,0),o&#x3D;i.decodeLength(n);o!&#x3D;t[r].expected&amp;&amp;document.write(&quot;In test[&quot;+r+&quot;] expected &quot;+t[r].expected+&quot; got &quot;+o+&quot;\n&quot;)&#125;&#125;,window.ASN1&#x3D;i&#125;(),ASN1.prototype.getHexStringValue&#x3D;function()&#123;var t&#x3D;this.toHexString(),e&#x3D;2*this.header,i&#x3D;2*this.length;return t.substr(e,i)&#125;,ue.prototype.parseKey&#x3D;function(t)&#123;try&#123;var e&#x3D;0,i&#x3D;0,r&#x3D;&#x2F;^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$&#x2F;,s&#x3D;r.test(t)?Hex.decode(t):Base64.unarmor(t),n&#x3D;ASN1.decode(s);if(3&#x3D;&#x3D;&#x3D;n.sub.length&amp;&amp;(n&#x3D;n.sub[2].sub[0]),9&#x3D;&#x3D;&#x3D;n.sub.length)&#123;e&#x3D;n.sub[1].getHexStringValue(),this.n&#x3D;he(e,16),i&#x3D;n.sub[2].getHexStringValue(),this.e&#x3D;parseInt(i,16);var o&#x3D;n.sub[3].getHexStringValue();this.d&#x3D;he(o,16);var h&#x3D;n.sub[4].getHexStringValue();this.p&#x3D;he(h,16);var a&#x3D;n.sub[5].getHexStringValue();this.q&#x3D;he(a,16);var u&#x3D;n.sub[6].getHexStringValue();this.dmp1&#x3D;he(u,16);var c&#x3D;n.sub[7].getHexStringValue();this.dmq1&#x3D;he(c,16);var f&#x3D;n.sub[8].getHexStringValue();this.coeff&#x3D;he(f,16)&#125;else&#123;if(2!&#x3D;&#x3D;n.sub.length)return!1;var p&#x3D;n.sub[1],l&#x3D;p.sub[0];e&#x3D;l.sub[0].getHexStringValue(),this.n&#x3D;he(e,16),i&#x3D;l.sub[1].getHexStringValue(),this.e&#x3D;parseInt(i,16)&#125;return!0&#125;catch(d)&#123;return!1&#125;&#125;,ue.prototype.getPrivateBaseKey&#x3D;function()&#123;var t&#x3D;&#123;array:[new KJUR.asn1.DERInteger(&#123;&quot;int&quot;:0&#125;),new KJUR.asn1.DERInteger(&#123;bigint:this.n&#125;),new KJUR.asn1.DERInteger(&#123;&quot;int&quot;:this.e&#125;),new KJUR.asn1.DERInteger(&#123;bigint:this.d&#125;),new KJUR.asn1.DERInteger(&#123;bigint:this.p&#125;),new KJUR.asn1.DERInteger(&#123;bigint:this.q&#125;),new KJUR.asn1.DERInteger(&#123;bigint:this.dmp1&#125;),new KJUR.asn1.DERInteger(&#123;bigint:this.dmq1&#125;),new KJUR.asn1.DERInteger(&#123;bigint:this.coeff&#125;)]&#125;,e&#x3D;new KJUR.asn1.DERSequence(t);return e.getEncodedHex()&#125;,ue.prototype.getPrivateBaseKeyB64&#x3D;function()&#123;return be(this.getPrivateBaseKey())&#125;,ue.prototype.getPublicBaseKey&#x3D;function()&#123;var t&#x3D;&#123;array:[new KJUR.asn1.DERObjectIdentifier(&#123;oid:&quot;1.2.840.113549.1.1.1&quot;&#125;),new KJUR.asn1.DERNull]&#125;,e&#x3D;new KJUR.asn1.DERSequence(t);t&#x3D;&#123;array:[new KJUR.asn1.DERInteger(&#123;bigint:this.n&#125;),new KJUR.asn1.DERInteger(&#123;&quot;int&quot;:this.e&#125;)]&#125;;var i&#x3D;new KJUR.asn1.DERSequence(t);t&#x3D;&#123;hex:&quot;00&quot;+i.getEncodedHex()&#125;;var r&#x3D;new KJUR.asn1.DERBitString(t);t&#x3D;&#123;array:[e,r]&#125;;var s&#x3D;new KJUR.asn1.DERSequence(t);return s.getEncodedHex()&#125;,ue.prototype.getPublicBaseKeyB64&#x3D;function()&#123;return be(this.getPublicBaseKey())&#125;,ue.prototype.wordwrap&#x3D;function(t,e)&#123;if(e&#x3D;e||64,!t)return t;var i&#x3D;&quot;(.&#123;1,&quot;+e+&quot;&#125;)( +|$\n?)|(.&#123;1,&quot;+e+&quot;&#125;)&quot;;return t.match(RegExp(i,&quot;g&quot;)).join(&quot;\n&quot;)&#125;,ue.prototype.getPrivateKey&#x3D;function()&#123;var t&#x3D;&quot;-----BEGIN RSA PRIVATE KEY-----\n&quot;;return t+&#x3D;this.wordwrap(this.getPrivateBaseKeyB64())+&quot;\n&quot;,t+&#x3D;&quot;-----END RSA PRIVATE KEY-----&quot;&#125;,ue.prototype.getPublicKey&#x3D;function()&#123;var t&#x3D;&quot;-----BEGIN PUBLIC KEY-----\n&quot;;return t+&#x3D;this.wordwrap(this.getPublicBaseKeyB64())+&quot;\n&quot;,t+&#x3D;&quot;-----END PUBLIC KEY-----&quot;&#125;,ue.prototype.hasPublicKeyProperty&#x3D;function(t)&#123;return t&#x3D;t||&#123;&#125;,t.hasOwnProperty(&quot;n&quot;)&amp;&amp;t.hasOwnProperty(&quot;e&quot;)&#125;,ue.prototype.hasPrivateKeyProperty&#x3D;function(t)&#123;return t&#x3D;t||&#123;&#125;,t.hasOwnProperty(&quot;n&quot;)&amp;&amp;t.hasOwnProperty(&quot;e&quot;)&amp;&amp;t.hasOwnProperty(&quot;d&quot;)&amp;&amp;t.hasOwnProperty(&quot;p&quot;)&amp;&amp;t.hasOwnProperty(&quot;q&quot;)&amp;&amp;t.hasOwnProperty(&quot;dmp1&quot;)&amp;&amp;t.hasOwnProperty(&quot;dmq1&quot;)&amp;&amp;t.hasOwnProperty(&quot;coeff&quot;)&#125;,ue.prototype.parsePropertiesFrom&#x3D;function(t)&#123;this.n&#x3D;t.n,this.e&#x3D;t.e,t.hasOwnProperty(&quot;d&quot;)&amp;&amp;(this.d&#x3D;t.d,this.p&#x3D;t.p,this.q&#x3D;t.q,this.dmp1&#x3D;t.dmp1,this.dmq1&#x3D;t.dmq1,this.coeff&#x3D;t.coeff)&#125;;var _e&#x3D;function(t)&#123;ue.call(this),t&amp;&amp;(&quot;string&quot;&#x3D;&#x3D;typeof t?this.parseKey(t):(this.hasPrivateKeyProperty(t)||this.hasPublicKeyProperty(t))&amp;&amp;this.parsePropertiesFrom(t))&#125;;_e.prototype&#x3D;new ue,_e.prototype.constructor&#x3D;_e;var ze&#x3D;function(t)&#123;t&#x3D;t||&#123;&#125;,this.default_key_size&#x3D;parseInt(t.default_key_size)||1024,this.default_public_exponent&#x3D;t.default_public_exponent||&quot;010001&quot;,this.log&#x3D;t.log||!1,this.key&#x3D;null&#125;;ze.prototype.setKey&#x3D;function(t)&#123;this.log&amp;&amp;this.key&amp;&amp;console.warn(&quot;A key was already set, overriding existing.&quot;),this.key&#x3D;new _e(t)&#125;,ze.prototype.setPrivateKey&#x3D;function(t)&#123;this.setKey(t)&#125;,ze.prototype.setPublicKey&#x3D;function(t)&#123;this.setKey(t)&#125;,ze.prototype.decrypt&#x3D;function(t)&#123;try&#123;return this.getKey().decrypt(Te(t))&#125;catch(e)&#123;return!1&#125;&#125;,ze.prototype.encrypt&#x3D;function(t)&#123;try&#123;return be(this.getKey().encrypt(t))&#125;catch(e)&#123;return!1&#125;&#125;,ze.prototype.getKey&#x3D;function(t)&#123;if(!this.key)&#123;if(this.key&#x3D;new _e,t&amp;&amp;&quot;[object Function]&quot;&#x3D;&#x3D;&#x3D;&#123;&#125;.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)&#125;return this.key&#125;,ze.prototype.getPrivateKey&#x3D;function()&#123;return this.getKey().getPrivateKey()&#125;,ze.prototype.getPrivateKeyB64&#x3D;function()&#123;return this.getKey().getPrivateBaseKeyB64()&#125;,ze.prototype.getPublicKey&#x3D;function()&#123;return this.getKey().getPublicKey()&#125;,ze.prototype.getPublicKeyB64&#x3D;function()&#123;return this.getKey().getPublicBaseKeyB64()&#125;,ze.version&#x3D;&quot;2.3.1&quot;,t.JSEncrypt&#x3D;ze&#125;);</span><br><span class="line">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>base64编码和解码（JS）</title>
      <link href="2017/02/21/%E5%89%8D%E7%AB%AF/base64%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81%EF%BC%88JS%EF%BC%89/"/>
      <url>2017/02/21/%E5%89%8D%E7%AB%AF/base64%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81%EF%BC%88JS%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">var base64EncodeChars &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">var base64DecodeChars &#x3D; new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);</span><br><span class="line">&#x2F;**</span><br><span class="line"> * base64编码</span><br><span class="line"> * @param &#123;Object&#125; str</span><br><span class="line"> *&#x2F;</span><br><span class="line">function base64encode(str) &#123;</span><br><span class="line">var out, i, len;</span><br><span class="line">var c1, c2, c3;</span><br><span class="line">len &#x3D; str.length;</span><br><span class="line">i &#x3D; 0;</span><br><span class="line">out &#x3D; &quot;&quot;;</span><br><span class="line">while(i &lt; len) &#123;</span><br><span class="line">c1 &#x3D; str.charCodeAt(i++) &amp; 0xff;</span><br><span class="line">if(i &#x3D;&#x3D; len) &#123;</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt(c1 &gt;&gt; 2);</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt((c1 &amp; 0x3) &lt;&lt; 4);</span><br><span class="line">out +&#x3D; &quot;&#x3D;&#x3D;&quot;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">c2 &#x3D; str.charCodeAt(i++);</span><br><span class="line">if(i &#x3D;&#x3D; len) &#123;</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt(c1 &gt;&gt; 2);</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt((c2 &amp; 0xF) &lt;&lt; 2);</span><br><span class="line">out +&#x3D; &quot;&#x3D;&quot;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">c3 &#x3D; str.charCodeAt(i++);</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt(c1 &gt;&gt; 2);</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt(((c2 &amp; 0xF) &lt;&lt; 2) | ((c3 &amp; 0xC0) &gt;&gt; 6));</span><br><span class="line">out +&#x3D; base64EncodeChars.charAt(c3 &amp; 0x3F);</span><br><span class="line">&#125;</span><br><span class="line">return out;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * base64解码</span><br><span class="line"> * @param &#123;Object&#125; str</span><br><span class="line"> *&#x2F;</span><br><span class="line">function base64decode(str) &#123;</span><br><span class="line">var c1, c2, c3, c4;</span><br><span class="line">var i, len, out;</span><br><span class="line">len &#x3D; str.length;</span><br><span class="line">i &#x3D; 0;</span><br><span class="line">out &#x3D; &quot;&quot;;</span><br><span class="line">while(i &lt; len) &#123;</span><br><span class="line">&#x2F;* c1 *&#x2F;</span><br><span class="line">do &#123;</span><br><span class="line">c1 &#x3D; base64DecodeChars[str.charCodeAt(i++) &amp; 0xff];</span><br><span class="line">&#125;</span><br><span class="line">while (i &lt; len &amp;&amp; c1 &#x3D;&#x3D; -1);</span><br><span class="line">if(c1 &#x3D;&#x3D; -1)</span><br><span class="line">break;</span><br><span class="line">&#x2F;* c2 *&#x2F;</span><br><span class="line">do &#123;</span><br><span class="line">c2 &#x3D; base64DecodeChars[str.charCodeAt(i++) &amp; 0xff];</span><br><span class="line">&#125;</span><br><span class="line">while (i &lt; len &amp;&amp; c2 &#x3D;&#x3D; -1);</span><br><span class="line">if(c2 &#x3D;&#x3D; -1)</span><br><span class="line">break;</span><br><span class="line">out +&#x3D; String.fromCharCode((c1 &lt;&lt; 2) | ((c2 &amp; 0x30) &gt;&gt; 4));</span><br><span class="line">&#x2F;* c3 *&#x2F;</span><br><span class="line">do &#123;</span><br><span class="line">c3 &#x3D; str.charCodeAt(i++) &amp; 0xff;</span><br><span class="line">if(c3 &#x3D;&#x3D; 61)</span><br><span class="line">return out;</span><br><span class="line">c3 &#x3D; base64DecodeChars[c3];</span><br><span class="line">&#125;</span><br><span class="line">while (i &lt; len &amp;&amp; c3 &#x3D;&#x3D; -1);</span><br><span class="line">if(c3 &#x3D;&#x3D; -1)</span><br><span class="line">break;</span><br><span class="line">out +&#x3D; String.fromCharCode(((c2 &amp; 0XF) &lt;&lt; 4) | ((c3 &amp; 0x3C) &gt;&gt; 2));</span><br><span class="line">&#x2F;* c4 *&#x2F;</span><br><span class="line">do &#123;</span><br><span class="line">c4 &#x3D; str.charCodeAt(i++) &amp; 0xff;</span><br><span class="line">if(c4 &#x3D;&#x3D; 61)</span><br><span class="line">return out;</span><br><span class="line">c4 &#x3D; base64DecodeChars[c4];</span><br><span class="line">&#125;</span><br><span class="line">while (i &lt; len &amp;&amp; c4 &#x3D;&#x3D; -1);</span><br><span class="line">if(c4 &#x3D;&#x3D; -1)</span><br><span class="line">break;</span><br><span class="line">out +&#x3D; String.fromCharCode(((c3 &amp; 0x03) &lt;&lt; 6) | c4);</span><br><span class="line">&#125;</span><br><span class="line">return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
